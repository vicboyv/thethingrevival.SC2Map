//==================================================================================================
// 
// Generated Map Script
// 
// Name:   -The Thing- [Revival]
// 
//==================================================================================================
include "TriggerLibs/NativeLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_maxAmountofmarineperks = 2;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_KeyboardMovement {
    int lv_upKey;
    int lv_downKey;
    int lv_rightKey;
    int lv_leftKey;
    int lv_pickupKey;
    bool lv_up;
    bool lv_down;
    bool lv_left;
    bool lv_right;
    bool lv_pickup;
};

struct gs_PortraitList {
    int lv_portraitID;
    int lv_portraitCost;
    string lv_portraitName;
    string lv_portraitPath;
    bool[16] lv_portraitPurchased;
};

struct gs_Models {
    int lv_numberofmodels;
};

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_Station_Baguio = 0;
const int ge_Station_Ragnov = 1;
const int ge_Station_Aquilon = 2;
const int ge_Station_Liberty = 3;
const int ge_Station_Sahara = 4;
const int ge_Planets_GalaxyView = 0;
const int ge_Planets_BattlenetGlue = 1;
const int ge_Planets_Agira = 2;
const int ge_Planets_Albion = 3;
const int ge_Planets_Aiur = 4;
const int ge_Planets_Avernus = 5;
const int ge_Planets_BelShir = 6;
const int ge_Planets_Castanar = 7;
const int ge_Planets_Char = 8;
const int ge_Planets_Haven = 9;
const int ge_Planets_Korhal = 10;
const int ge_Planets_MarSara = 11;
const int ge_Planets_Meinhoff = 12;
const int ge_Planets_Monlyth = 13;
const int ge_Planets_NewFolsom = 14;
const int ge_Planets_PortZion = 15;
const int ge_Planets_RedStone = 16;
const int ge_Planets_Shakuras = 17;
const int ge_Planets_Tarsonis = 18;
const int ge_Planets_Typhon = 19;
const int ge_Planets_Tyrador = 20;
const int ge_Planets_Ulaan = 21;
const int ge_Planets_Ulnar = 22;
const int ge_Planets_Valhalla = 23;
const int ge_Planets_Xil = 24;
const int ge_Planets_ZhakulDas = 25;
const int ge_FacilityType_Generator = 0;
const int ge_FacilityType_CommunicationsTower = 1;
const int ge_FacilityType_FuelStation = 2;
const int ge_FacilityType_BeaconRelay = 3;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
string gv_latestVBIData;
int[46] gv_cKCode;
string gv_clearString;
string gv_scrambledString;
int[16] gv_gPGamesPlayed;
int[16] gv_gPGamesPlayedPrev;
int[16] gv_gMGamesMinutes;
int[16] gv_gMGamesMinutesPrev;
int[16] gv_mPMarinePoints;
int[16] gv_mPMarinePointsPrev;
int[16] gv_tPThingPoints;
int[16] gv_tPThingPointsPrev;
int[16] gv_gTGamesAsThing;
int[16] gv_gTGamesAsThingPrev;
int[16] gv_lGLastGameAsThing;
int[16] gv_tRPThingRatingPoints;
int[16] gv_tRIThingRatingInstances;
int[16] gv_vPVicPoints;
string[16] gv_pPPortraitsPurchased;
int[16] gv_pCPortraitCurrent;
string[16] gv_pQProfileQuote;
int[16] gv_sVStatsVersion;
string[16] gv_uSUltiSec;
int gv_xTRP;
int gv_xTRI;
bank[16] gv_thingBank;
bool[16] gv_enableSaving;
bool[16] gv_statsVerified;
int[16] gv_lBGPGamesPlayed;
string[16] gv_lBGPGamesPlayedName;
int[16] gv_lBGMGamesMinutes;
string[16] gv_lBGMGamesMinutesName;
int[16] gv_lBMPMarinePoints;
string[16] gv_lBMPMarinePointsName;
int[16] gv_lBTPThingPoints;
string[16] gv_lBTPThingPointsName;
string[16] gv_lBName;
int gv_killStreakCount;
int gv_killStreakTimer;
bool[16] gv_hasRated;
playergroup gv_things;
playergroup gv_marines;
playergroup gv_dead;
playergroup gv_left;
playergroup gv_playing;
unit[16] gv_unit;
sound gv_music;
int gv_recordStatsButton;
int gv_rankingSelection;
string gv_phase;
int gv_initialText;
color[16] gv_unitPlayerColor;
int[16] gv_thePlayerColor;
region gv_selectedRegion;
region gv_evacRegion;
string gv_mapName;
int gv_mapPlanet;
playergroup gv_priorityOptedIn;
playergroup gv_optedIn;
int gv_optInButton;
int gv_perkdialog;
int gv_perkFrame;
int[3] gv_perkSelectionFrame;
int[3] gv_perkPlayerFrame;
string[16][gv_maxAmountofmarineperks + 1] gv_playersPerks;
bool[16][16] gv_quickTipSeen;
timer gv_timer;
int gv_evacShipTimerMultiplier;
fixed gv_heading;
int gv_eVACStatusDialog;
int gv_eVACStatusArrow;
int gv_eVACStatusBar;
fixed gv_acceleration;
fixed gv_speed;
fixed gv_distance;
bool gv_launchedOff;
int gv_splashScreenDialogItem;
int gv_splashScreenDialog;
int gv_warning;
int[2] gv_warningItems;
int gv_warningPlayer;
int gv_warningEdit;
int[5] gv_warningEditItems;
int gv_announce;
int[2] gv_announceItems;
bool[16] gv_kicked;
int gv_requiredVotesKick;
int[16] gv_kickButton;
timer gv_startTimer;
int gv_skipVoteRequired;
playergroup gv_movingDialogPlayers;
int[16] gv_movingDialog;
gs_KeyboardMovement[16] gv_keyboardMovement;
playergroup gv_settingKeys;
bool[16] gv_alreadyRunning;
bool[16][9] gv_moving;
bool[16] gv_cameraFollowsFacing;
int[16] gv_cameraFollowsFacingCheckBox;
bool[16] gv_silentHillControlScheme;
int[16] gv_silentHillControlSchemeCheckBox;
int[16] gv_keyboardMovementCheckBox;
playergroup gv_keyboardMovingPlayers;
int gv_keyboardMovementButton;
bool[16] gv_colorTagAlwaysShow;
int[16] gv_colorTagAlwaysCheckBox;
int gv_settingsBoxDialog;
int gv_settingsContainerDialog;
bool[15] gv_generatingPlayersSetting;
bank[16] gv_settingsBank;
int[16] gv_visualsSelection;
int[16] gv_visualsSettingsDropList;
int gv_visualsChatDropList;
gs_PortraitList[101] gv_portrait;
bool[16][101] gv_portraitPaid;
int[17] gv_storePreviewPortrait;
int[16] gv_cardStorePurchasedList;
int[17] gv_playerCardDialog;
int[17] gv_playerCardPortrait;
string[17] gv_playerCardQuote;
string[101] gv_portraitList;
int[6] gv_playerCardRatingButtons;
int[16] gv_playerCardName;
int[16] gv_playerCardStats;
int[16] gv_playerCardStore;
int[16] gv_cardStorePortrait;
int[16] gv_cardStoreStore;
int[16][101] gv_cardStoreListItemIndex;
int[16] gv_cardStoreBuy;
int[16] gv_playerCardRecordStats;
int[16] gv_playerCardAvatar;
unit gv_planetUnit;
int[16] gv_spectatingPlayer;
int gv_spectatorVisibilityDialogItem;
int gv_spectatorFollowDialogItem;
int gv_spectatorDialog;
int[16] gv_spectatorIndex;
int[16] gv_playerIndex;
playergroup gv_playersSpectatingThing;
fixed[16] gv_currentRotation;
int[16][7] gv_unitBarLabel;
int[16] gv_unitBarHealthDisplay;
int[16][7] gv_unitBarItem;
int[16] gv_unitPanel;
string[16] gv_rankingAbbreviatedTag;
string[16] gv_rankingTag;
int[16] gv_ranking;
text[16] gv_unitTagText;
int[16] gv_unitTag;
int gv_globalChatBox;
int gv_globalChatDialogInt;
int gv_globalChatDialog;
string[16] gv_chatText;
int[16] gv_chatTextLabel;
int[16] gv_chatTextCount;
int gv_deadLoungeAutoFadeFollow;
int gv_deadDialogInt;
int gv_deadChatItem;
int gv_deadChatOnlineItem;
int gv_deadAliveChatDialog;
int gv_deadAliveChatItem;
int gv_deadAliveChatOnlineItem;
int gv_deadChatSelection;
int gv_deadDialog;
int gv_thingRatingBarOverall;
int gv_thingRatingBarRound;
int gv_thingRatingBarOverallText;
int gv_thingRatingBarRoundText;
int gv_quitButton;
text[16] gv_endGameState;
int gv_tTT;
int[4][4] gv_tttspaces;
int[4][4] gv_tttbuttonspaces;
int[3] gv_tttplayers;
int gv_tttcurrent;
int[3] gv_tttplayersbutton;
int[5] gv_tttsettings;
fixed gv_ttttimer;
int gv_banListDialog;
int[7] gv_banListItems;
int gv_spectatorViewEvacDialog;
int[2] gv_spectatorViewEvacItems;
bool gv_sandstorm;
int gv_currentStation;
unit gv_fusionCore;
unit gv_commsLink;
unit gv_beaconRelay;
unit gv_fuelStation;
doodad gv_acidPoolFlames;
bool gv_acidPoolFlamesOn;
int[16] gv_attackInitiator;
playergroup[16] gv_attackInitiatorBlacklist;
bool[16][16] gv_initiatedAttack;
bool[16] gv_friendlyFireOn;
region[16] gv_proximityRegion;
string gv_thingModel;
int gv_thingModelPicker;
int gv_control;
fixed gv_theThingMaxLife;
string[16] gv_playerButtonThingtoMarine;
string[16] gv_playerAbilityThingtoMarine;
int gv_lastConsumedPlayer;
int gv_lastUsedColorPlayer;
bool[16] gv_consumedByThing;
int[16] gv_marineKills;
unit gv_flamethrower;
actor gv_flamethrowerModel;
int gv_flamethrowerGas;
playergroup gv_flamethrowerOwner;
int gv_flamethrowerBarNumber;
unitgroup gv_riotShields;
point[16] gv_deathSpot;
int gv_muteRounds;
int[4] gv_muteRoundsItems;
int[16] gv_mutePlayer;
int[16] gv_playerRoundsMuted;
int gv_banRounds;
int[4] gv_banRoundsItems;
int[16] gv_banPlayer;
int[16] gv_playerRoundsBanned;
int gv_ratingBanRounds;
int[4] gv_ratingBanRoundsItems;
int[16] gv_rBTarget;
int[16] gv_playerRoundsRatingBanned;
string[16] gv_playermodel;
gs_Models gv_models;
text gv_package;
int gv_debugdialog;
int gv_debugcount;
int gv_debugwindow;
string[1000] gv_debugstring;
int gv_debugoutput;
int gv_debugpane;
int gv_debugsize;
int[2] gv_debugsizemodifier;
bool[16] gv_muted;
bool[16] gv_ratingBan;
int gv_adminDialog;
fixed gv_adminDialogRefreshTime;
int[16] gv_adminDialogUnitButton;
region[16] gv_revealregion;
revealer[16][16] gv_revealed;
text[16] gv_handleLabels;
playergroup gv_admin;
int[16] gv_tabletModeMoving;

void InitGlobals () {
    int init_i;
    int init_j;

    gv_latestVBIData = "";
    gv_clearString = "abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ!-";
    gv_scrambledString = "ESTO67aeG89BWdstFVu45UyANhijklwxCPrbcH3YZvDXRqLMznoI0JKp1fgQm2@[";
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_pPPortraitsPurchased[init_i] = "";
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_pQProfileQuote[init_i] = "";
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_sVStatsVersion[init_i] = 2;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_uSUltiSec[init_i] = "";
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_enableSaving[init_i] = true;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_lBGPGamesPlayedName[init_i] = "";
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_lBGMGamesMinutesName[init_i] = "";
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_lBMPMarinePointsName[init_i] = "";
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_lBTPThingPointsName[init_i] = "";
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_lBName[init_i] = "";
    }
    gv_things = PlayerGroupEmpty();
    gv_marines = PlayerGroupEmpty();
    gv_dead = PlayerGroupEmpty();
    gv_left = PlayerGroupEmpty();
    gv_playing = PlayerGroupEmpty();
    gv_recordStatsButton = c_invalidDialogControlId;
    gv_rankingSelection = c_invalidDialogControlId;
    gv_phase = "";
    gv_initialText = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_unitPlayerColor[init_i] = Color(0,0,0);
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_thePlayerColor[init_i] = 15;
    }
    gv_selectedRegion = RegionFromId(2);
    gv_evacRegion = RegionFromId(2);
    gv_mapName = "";
    gv_mapPlanet = ge_Planets_Avernus;
    gv_priorityOptedIn = PlayerGroupEmpty();
    gv_optedIn = PlayerGroupEmpty();
    gv_optInButton = c_invalidDialogControlId;
    gv_perkdialog = c_invalidDialogId;
    gv_perkFrame = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_perkSelectionFrame[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_perkPlayerFrame[init_i] = c_invalidDialogControlId;
    }
    gv_timer = TimerCreate();
    gv_eVACStatusDialog = c_invalidDialogId;
    gv_eVACStatusArrow = c_invalidDialogControlId;
    gv_eVACStatusBar = c_invalidDialogControlId;
    gv_splashScreenDialogItem = c_invalidDialogControlId;
    gv_splashScreenDialog = c_invalidDialogId;
    gv_warning = c_invalidDialogId;
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_warningItems[init_i] = c_invalidDialogControlId;
    }
    gv_warningEdit = c_invalidDialogId;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_warningEditItems[init_i] = c_invalidDialogControlId;
    }
    gv_announce = c_invalidDialogId;
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_announceItems[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_kickButton[init_i] = c_invalidDialogControlId;
    }
    gv_startTimer = TimerCreate();
    gv_skipVoteRequired = CeilingI((IntToFixed(PlayerGroupCount(PlayerGroupActive())) * (2.0 / 3.0)));
    gv_movingDialogPlayers = PlayerGroupEmpty();
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_movingDialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_keyboardMovement[init_i].lv_upKey = c_keyI;
        gv_keyboardMovement[init_i].lv_downKey = c_keyK;
        gv_keyboardMovement[init_i].lv_rightKey = c_keyL;
        gv_keyboardMovement[init_i].lv_leftKey = c_keyJ;
        gv_keyboardMovement[init_i].lv_pickupKey = c_keyU;
    }
    gv_settingKeys = PlayerGroupEmpty();
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_cameraFollowsFacing[init_i] = true;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_cameraFollowsFacingCheckBox[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_silentHillControlSchemeCheckBox[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_keyboardMovementCheckBox[init_i] = c_invalidDialogControlId;
    }
    gv_keyboardMovingPlayers = PlayerGroupEmpty();
    gv_keyboardMovementButton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_colorTagAlwaysCheckBox[init_i] = c_invalidDialogControlId;
    }
    gv_settingsBoxDialog = c_invalidDialogId;
    gv_settingsContainerDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_visualsSelection[init_i] = 1;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_visualsSettingsDropList[init_i] = c_invalidDialogControlId;
    }
    gv_visualsChatDropList = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 100; init_i += 1) {
        gv_portrait[init_i].lv_portraitName = "";
        gv_portrait[init_i].lv_portraitPath = "";
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_storePreviewPortrait[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_cardStorePurchasedList[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_playerCardDialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_playerCardPortrait[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_playerCardQuote[init_i] = "Click this to add a quote.";
    }
    for (init_i = 0; init_i <= 100; init_i += 1) {
        gv_portraitList[init_i] = "";
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_playerCardRatingButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_playerCardName[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_playerCardStats[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_playerCardStore[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_cardStorePortrait[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_cardStoreStore[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_cardStoreBuy[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_playerCardRecordStats[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_playerCardAvatar[init_i] = c_invalidDialogControlId;
    }
    gv_spectatorVisibilityDialogItem = c_invalidDialogControlId;
    gv_spectatorFollowDialogItem = c_invalidDialogControlId;
    gv_spectatorDialog = c_invalidDialogId;
    gv_playersSpectatingThing = PlayerGroupEmpty();
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_currentRotation[init_i] = 90.0;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        for (init_j = 0; init_j <= 6; init_j += 1) {
            gv_unitBarLabel[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_unitBarHealthDisplay[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        for (init_j = 0; init_j <= 6; init_j += 1) {
            gv_unitBarItem[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_unitPanel[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_rankingAbbreviatedTag[init_i] = "";
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_rankingTag[init_i] = "";
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_unitTag[init_i] = c_textTagNone;
    }
    gv_globalChatBox = c_invalidDialogControlId;
    gv_globalChatDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_chatText[init_i] = "";
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_chatTextLabel[init_i] = c_textTagNone;
    }
    gv_deadLoungeAutoFadeFollow = c_invalidDialogControlId;
    gv_deadChatItem = c_invalidDialogControlId;
    gv_deadChatOnlineItem = c_invalidDialogControlId;
    gv_deadAliveChatItem = c_invalidDialogControlId;
    gv_deadAliveChatOnlineItem = c_invalidDialogControlId;
    gv_deadChatSelection = c_invalidDialogControlId;
    gv_deadDialog = c_invalidDialogId;
    gv_thingRatingBarOverall = c_invalidDialogControlId;
    gv_thingRatingBarRound = c_invalidDialogControlId;
    gv_thingRatingBarOverallText = c_invalidDialogControlId;
    gv_thingRatingBarRoundText = c_invalidDialogControlId;
    gv_quitButton = c_invalidDialogControlId;
    gv_tTT = c_invalidDialogId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 3; init_j += 1) {
            gv_tttbuttonspaces[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_tttplayersbutton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_tttsettings[init_i] = c_invalidDialogControlId;
    }
    gv_banListDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_banListItems[init_i] = c_invalidDialogControlId;
    }
    gv_spectatorViewEvacDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_spectatorViewEvacItems[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_attackInitiatorBlacklist[init_i] = PlayerGroupEmpty();
    }
    gv_thingModel = "";
    gv_thingModelPicker = c_invalidDialogControlId;
    gv_control = 2500;
    gv_theThingMaxLife = UnitTypeGetProperty("InfestedAbomination", c_unitPropLifeMax);
    gv_flamethrowerGas = 70;
    gv_flamethrowerOwner = PlayerGroupEmpty();
    gv_riotShields = UnitGroupEmpty();
    gv_muteRounds = c_invalidDialogId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_muteRoundsItems[init_i] = c_invalidDialogControlId;
    }
    gv_banRounds = c_invalidDialogId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_banRoundsItems[init_i] = c_invalidDialogControlId;
    }
    gv_ratingBanRounds = c_invalidDialogId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_ratingBanRoundsItems[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_playermodel[init_i] = "Marine";
    }
    gv_models.lv_numberofmodels = UserDataInstanceCount("Models");
    gv_debugdialog = c_invalidDialogId;
    gv_debugwindow = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 999; init_i += 1) {
        gv_debugstring[init_i] = "";
    }
    gv_debugoutput = c_invalidDialogControlId;
    gv_debugpane = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_debugsizemodifier[init_i] = c_invalidDialogControlId;
    }
    gv_adminDialog = c_invalidDialogId;
    gv_adminDialogRefreshTime = 2.1;
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_adminDialogUnitButton[init_i] = c_invalidDialogControlId;
    }
    gv_admin = PlayerGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_GenerateVBIUpdater (int lp_player);
string gf_FormatDate (int lp_date);
int gf_FindLatestVBIDatafromPlayers (playergroup lp_pPlayerGroup, string lp_pKey, string lp_pSection);
string gf_RetrieveVBIDataCLLforPlayerfromBank (bank lp_pBank, string lp_pKey, string lp_pSection);
void gf_StoreVBIDataCCLtoBank (bank lp_pBank, string lp_pKey, string lp_pSection, string lp_pString, int lp_pRevision, int lp_pDay, int lp_pMonth, int lp_pYear);
string gf_ExtractSourceofString (string lp_pString);
int gf_ExtractDateofString (string lp_pString);
int gf_FindDateOffsetfromString (string lp_pString);
bool gf_CheckDateofString (string lp_pString);
string gf_PublishString (string lp_pString, int lp_pRevision, int lp_pDay, int lp_pMonth, int lp_pYear);
int gf_ConvertDatetoString (int lp_pRevision, int lp_pDay, int lp_pMonth, int lp_pYear);
string gf_UnlockString (string lp_pString);
int gf_FindChecksumOffsetfromString (string lp_pString);
bool gf_VerifyString (string lp_pString);
string gf_LockString (string lp_pString);
int gf_GenerateChecksum (string lp_pString);
int gf_GetCharacterPositionCodeModifer (int lp_positionValue);
int gf_GetCharacterCaseCodeModifier (string lp_character);
int gf_GetCharacterCodeGenerator (string lp_character);
void gf_CharacterCodeGenerator (int lp_pSeed, int lp_pCharacterKeyAmount, int lp_pMinValue, int lp_pMaxValue);
string gf_EncryptString (string lp_toEncrypt);
string gf_DecryptString (string lp_toDecrypt);
string gf_FormulateUltiSecCode (int lp_player);
void gf_StatsUpgradetov2v3 (int lp_player);
void gf_StatsUpgradetov4 (int lp_player);
void gf_LoadStats ();
void gf_SaveStats (int lp_player);
void gf_Selfranking ();
void gf_Sourceranking ();
bool gf_CharacterisInteger (string lp_char);
string gf_CompileIntegertoSavecode (string lp_string, string lp_code, int lp_integer);
string gf_CompileStringtoSavecode (string lp_string, string lp_code, string lp_codeString);
int gf_ExtractIntegerfromSavecode (string lp_code, string lp_string);
string gf_ExtractStringfromSavecode (string lp_code, string lp_string);
void gf_SaveBackupStats (int lp_player, string lp_string1, string lp_string2, string lp_string3, string lp_string4, string lp_string5, bool lp_force);
void gf_LoadBackupStats (int lp_player);
int gf_ConvertBitstreamtoInteger (string lp_bitstream);
string gf_ConvertIntegertoBitstream (int lp_value);
string gf_SetaBooleantoBitstream (int lp_position, bool lp_value, string lp_bitstream);
bool gf_GetaBooleanfromBitstream (int lp_position, string lp_bitstream);
string gf_Hexidecimalize (int lp_integer);
string gf_GetHexLetter (int lp_number);
int gf_Dehexidecimalize (string lp_hex);
int gf_GetHexValue (string lp_hex);
void gf_GenerateAdminCenter ();
void gf_LoungeMusic ();
void gf_GenerateDeadLounge ();
void gf_GenerateHandleList ();
void gf_InitialVariables ();
void gf_InitialTweaks ();
void gf_InitialHandles ();
void gf_InitialInfoboard ();
void gf_InitialAnnouncement (int lp_infoboard);
void gf_InitialActions ();
void gf_InitialFunctionRooms ();
void gf_CreateMarineforPlayer (int lp_player);
void gf_ConvertMarinetoThingforPlayer (int lp_player);
void gf_RemoveAIandLeftPlayersfromPlayerGroup (playergroup lp_playerGroup);
int gf_RandomPlayerfromPlayers (playergroup lp_playerGroup);
string gf_ConvertPlayerColortoString (int lp_playerColor);
void gf_InitializePlayerColorRandomization ();
void gf_RandomizePlayerColors ();
void gf_MapSelection ();
int gf_SelectedOptStyle ();
int gf_ProOpter ();
int gf_RandomOpter ();
int gf_OverdueOpter ();
void gf_PlayerPerkUpgrade (int lp_player);
void gf_ClearPlayerPerks (int lp_player);
void gf_CreatePerkFrame ();
void gf_Adddialogitemevent (trigger lp_trigger, int lp_item, int lp_event);
bool gf_Reverseofbool (bool lp_bool);
bool gf_playerhasselectedperk (int lp_player, string lp_perk);
void gf_QuickTipsforString (string lp_string, int lp_player);
fixed gf_GetEVACShipMultiplier (int lp_vote);
void gf_EvacShipSelection ();
void gf_InitialEvacShip ();
void gf_LaunchOffProcess ();
void gf_EVACStatus ();
void gf_GenerateEVACStatusDialog ();
void gf_InitialLaunchOff ();
text gf_QuitTip (int lp_index);
void gf_InitializeSplashScreen ();
void gf_UseSplashScreenonPlayers (fixed lp_growthDelay, fixed lp_decay, fixed lp_decayDelay, fixed lp_growth, playergroup lp_playerGroup, fixed lp_initialTransparency, fixed lp_finalTransparency, color lp_color);
void gf_FlashScreen (fixed lp_growthDelay, fixed lp_decay, fixed lp_decayDelay, fixed lp_growth, playergroup lp_playerGroup, fixed lp_initialTransparency, fixed lp_finalTransparency, color lp_color, string lp_image);
void gf_EnableDisableButton (int lp_button, bool lp_state, playergroup lp_players);
void gf_SetAllChannelVolume (fixed lp_duration, fixed lp_target, playergroup lp_playerGroup);
void gf_WarningSystem (int lp_player, text lp_description);
void gf_AnnouncementSystem (text lp_description);
void gf_CheckBlacklist ();
void gf_SkipCountdown ();
void gf_GenerateProfileBox (int lp_player);
void gf_GenerateProfileQuoteBox (int lp_player);
void gf_GenerateWindowTab (int lp_dialog, bool lp_showLiquify, bool lp_showMinimize, bool lp_showClose, bool lp_allowMove, int lp_xOffset, int lp_yOffset, int lp_leftTabAnchor, int lp_rightTabAnchor, text lp_tabName);
void gf_GenerateWindowUI (int lp_dialog, color lp_borderColor, color lp_backgroundColor);
void gf_GenerateVicOS (int lp_player);
string gf_Keytostring (int lp_key);
int gf_Stringtokey (string lp_string);
void gf_Movement (int lp_player, unit lp_unit);
fixed gf_GetDirection (int lp_player);
void gf_RestoreRotation (int lp_player);
void gf_RotateCamera (int lp_player, fixed lp_rotation, fixed lp_time);
string gf_GetLightingfromIndex (int lp_index);
void gf_AddLightingstoVisualDropList (int lp_dialogItem);
void gf_GenerateVicOSButton ();
void gf_InitialSettings ();
void gf_GenerateSettingsBox (int lp_player);
void gf_ApplySettings ();
void gf_FlashSettingsButton ();
void gf_PortraitSetup ();
string gf_GeneratePPList (int lp_player);
void gf_GeneratePlayerCard (int lp_player, bool lp_showPlayerColor, bool lp_animate, int lp_dialogOffsetX, int lp_dialogOffsetY, int lp_anchor, string lp_mode);
void gf_ShowPlanet (int lp_planet);
string gf_PlanetsPresetToName (int lp_planets);
string gf_PlanetsPresetToModel (int lp_planets);
void gf_CreateVicBlipforPlayer (unit lp_unit);
void gf_CreateThingBlipforPlayer (unit lp_unit);
void gf_InitialSpectate ();
void gf_RefreshItemList ();
void gf_SetupUnitUI ();
void gf_DesignateRankingforPlayer (int lp_player);
void gf_DesignateRankingforPlayer2 (int lp_player);
void gf_SetRankingforPlayer (int lp_player, int lp_index);
void gf_SetRankingforPlayer2 (int lp_player, int lp_index);
void gf_AddRankItemstoPulldownforPlayer (int lp_dialogItem, int lp_player, int lp_rank);
void gf_AddRankItemstoPulldownforPlayer2 (int lp_dialogItem, int lp_player, int lp_rank);
void gf_GenerateUnitTagforPlayer (int lp_player);
void gf_UpdateUnitTagTextforPlayer (int lp_player);
void gf_GlobalChatUpdate (text lp_text);
void gf_DeadChatUpdate (text lp_text, string lp_string, int lp_player);
void gf_DeadChatOnlineUpdate ();
void gf_DeadAliveChatUpdate (text lp_text);
void gf_DeadAliveChatOnlineUpdate ();
string gf_AddTimeStamp ();
void gf_AddmultilinetexttoListbox (int lp_dialogItem, string lp_string, int lp_charactersPerLine, playergroup lp_players);
void gf_AddmultilinetexttoListbox2 ();
void gf_GenerateProgressBar (int lp_player, int lp_min, int lp_max, int lp_initialValue, int lp_finalValue, text lp_title, int lp_level);
int gf_FindMaxXPfromLevel (int lp_level);
int gf_FindLevelfromPoints (int lp_points);
void gf_GenerateThingRatingBars (int lp_player);
void gf_RefreshThingRatingBars (int lp_player);
void gf_KilledbyTrigger (unit lp_unit, int lp_killedPlayer, int lp_killingPlayer, text lp_reason, string lp_effect, int lp_instances);
void gf_GenerateSandstorm ();
void gf_InitiateSandstorm ();
point gf_GetFunctionRoomfromIndex (int lp_index, int lp_station, int lp_generatorType);
void gf_BrokenFusionCore ();
void gf_BrokenBeaconRelay ();
void gf_BrokenCommsLink ();
void gf_BrokenFuelStation ();
void gf_SpawnCorpse (point lp_point, int lp_player);
void gf_DeadDoor (unit lp_unit, fixed lp_timebreak);
void gf_ToggleAcidPool (bool lp_toggle);
void gf_ShowHideAcidPoolToggle (bool lp_showHide, int lp_player);
void gf_UpdateTheThingLifeRegeneration ();
void gf_ChangeThingsModel (string lp_modelID, unit lp_thingUnit);
string gf_GetThingModelPath (string lp_modelID);
string gf_GetThingModelID (int lp_index);
fixed gf_GetThingModelScale (string lp_modelID);
void gf_GenerateThingModelPickerBETA (int lp_player);
void gf_UpdateAbilityButtonColors ();
void gf_LastStandFrenzy (int lp_thingPlayer);
void gf_SpawnItems ();
point gf_FindProperRandomPointforSpawninRegion (region lp_region);
bool gf_UnitCarriesItemType (unit lp_carryingUnit, string lp_itemType);
unit gf_GetRandomItemofItemTypeinUnit (unit lp_carryingUnit, string lp_itemType);
void gf_MolotovThrow (unit lp_thrower, unit lp_projectile, point lp_point, int lp_player);
void gf_MolotovExplosion (point lp_point, int lp_player);
void gf_MolotovDamageAoEPersistance (point lp_point, fixed lp_distance, int lp_duration, int lp_player);
bool gf_FlyGrenadev2 (unit lp_c, point lp_p, string lp_a);
unit gf_FindFirstGrenadev2 (unit lp_carrier);
void gf_BloodfromGrenadev2 (point lp_grenadeOrigin, unit lp_unit);
void gf_TalkRadio (unit lp_radio, unit lp_unit, string lp_chatString);
void gf_ClearRadio (int lp_lengthofString, unit lp_radio, fixed lp_customValue, int lp_textTag);
void gf_GenerateStatsModifier (int lp_modifierPlayer, int lp_modifiedPlayer);
bool gf_Owner (int lp_player);
bool gf_Developers (int lp_player);
bool gf_Admins (int lp_player);
void gf_GenerateAdmincontrols (int lp_triggeringPlayer, int lp_selectedPlayer, int lp_generateX, int lp_generateY, int lp_anchor);
void gf_GenerateButtonSubPanel (int lp_triggeringPlayer, int lp_selectedPlayer, int lp_generateX, int lp_generateY, int lp_anchor, string lp_panelName, string lp_buttonName1, bool lp_buttonShown1, string lp_buttonName2, bool lp_buttonShown2, string lp_buttonName3, bool lp_buttonShown3, string lp_buttonName4, bool lp_buttonShown4, string lp_buttonName5, bool lp_buttonShown5, string lp_buttonName6, bool lp_buttonShown6, string lp_buttonName7, bool lp_buttonShown7);
void gf_GenerateListSubPanel (int lp_triggeringPlayer, int lp_selectedPlayer, int lp_generateX, int lp_generateY, int lp_anchor, string lp_listname);
void gf_AddItemtoListSub (text lp_text, string lp_listName, int lp_player);
void gf_Heightlist (int lp_player);
void gf_Scalelist (int lp_player);
void gf_OxyList (int lp_player);
void gf_ModelList (int lp_player);
void gf_CreateRevealer (int lp_player, int lp_revealedPlayer, bool lp_test);
void gf_HireDrDebug ();
void gf_TellDrDebug (string lp_text);
void gf_NoAntiTK ();

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_thirdperson;
trigger gt_HelpMenu;
trigger gt_GenerateVBIUpdaterWindow;
trigger gt_MarineDIESSave;
trigger gt_ThingDIESSave;
trigger gt_GamesPlayed;
trigger gt_GameMinutes;
trigger gt_ThingPoints;
trigger gt_KillStreakTimer;
trigger gt_MarinePoints;
trigger gt_Initial;
trigger gt_InitialCreation;
trigger gt_InitialIntro;
trigger gt_PickSelection;
trigger gt_OptInDetect;
trigger gt_OptInDetect2;
trigger gt_ShowPerkFrame;
trigger gt_Showhideannouncements;
trigger gt_PerkSelected;
trigger gt_SelectPerkButtonClicked;
trigger gt_LoadPerksfromLastGame;
trigger gt_QuickTipsforItems;
trigger gt_QuickTipsforEffect;
trigger gt_QuickTipsforBehavior;
trigger gt_EvacShipEnter;
trigger gt_DivertLeft;
trigger gt_DivertRight;
trigger gt_DivertAccelerate;
trigger gt_QuitAppear;
trigger gt_WarningDialog;
trigger gt_WarningControls;
trigger gt_WarningEditDialog;
trigger gt_WarningEditControls;
trigger gt_AnnounceDialog;
trigger gt_AnnounceControls;
trigger gt_VotekickPress;
trigger gt_SkipPressed;
trigger gt_RefreshPlayerCard;
trigger gt_SaveProfileQuote;
trigger gt_ClickTab;
trigger gt_TabMove;
trigger gt_OpenBox;
trigger gt_PickUpItemKey;
trigger gt_KeyboardPressed;
trigger gt_KeyboardUnpressed;
trigger gt_SetKeysPressed;
trigger gt_SetKeys;
trigger gt_SelectLightingVisuals;
trigger gt_ColorTagsAlwaysShowOverride;
trigger gt_ToggleSilentHillScheme;
trigger gt_ToggleCameraFollowsFacing;
trigger gt_ToggleKeyboardMovement;
trigger gt_PlayerCardStore;
trigger gt_PlayerCardPurchase;
trigger gt_PlayerCardBrowseStore;
trigger gt_PlayerCardRecordStats;
trigger gt_PlayerCardSelection;
trigger gt_GlobalVisibility;
trigger gt_SingleVisibility;
trigger gt_SelectiveVisibility;
trigger gt_MarinesVisibility;
trigger gt_PlayersVisibility;
trigger gt_SpectateClick;
trigger gt_SpectateLeft;
trigger gt_SpectateRight;
trigger gt_SpectateSelect;
trigger gt_CameraRotateSystem;
trigger gt_UnitUISelectUpdate;
trigger gt_UnitUIPeriodicUpdate;
trigger gt_UnitHealthUIInstanteneousUpdate;
trigger gt_UnitEnergyUIInstanteneousUpdate;
trigger gt_UnitOxygenUIInstanteneousUpdate;
trigger gt_ControlRegenThing;
trigger gt_ControlRegenDegenMarine;
trigger gt_RankingSelection;
trigger gt_MouseInUnitTag;
trigger gt_MouseOutUnitTag;
trigger gt_GlobalChat;
trigger gt_TextSpeak;
trigger gt_SpeakIndicator;
trigger gt_DeadSpeak;
trigger gt_DeadLoungeToggleAutofadeFollow;
trigger gt_DeadDialogEnter;
trigger gt_DeadDialogExit;
trigger gt_DeadAliveDialogEnter;
trigger gt_DeadAliveDialogExit;
trigger gt_DeadDialogSelection;
trigger gt_RatingInstance;
trigger gt_Scorescreen;
trigger gt_ScorescreenQuit;
trigger gt_KilledbyGrenade;
trigger gt_KilledbyFlamethrower;
trigger gt_KilledbyGun;
trigger gt_KilledbytheCold;
trigger gt_KilledbytheAcid;
trigger gt_KilledbyThing;
trigger gt_KilledbyLeaving;
trigger gt_KilledbySuffocation;
trigger gt_KilledbyMolotov;
trigger gt_CreateTTT;
trigger gt_check;
trigger gt_timer;
trigger gt_playerjoins;
trigger gt_slider;
trigger gt_reset;
trigger gt_RecordOn;
trigger gt_RecordOff;
trigger gt_LoadBanList;
trigger gt_BanListTrigger;
trigger gt_ButtonControls;
trigger gt_SelectedList;
trigger gt_SpectatorViewEvacDialog;
trigger gt_SpectatorViewEvacControls;
trigger gt_Cold;
trigger gt_BrokenVitals;
trigger gt_BeaconRelayBoost;
trigger gt_FuelStationProvision;
trigger gt_DeadDoors;
trigger gt_ShowHideToggleforAcidPool;
trigger gt_ToggleAcidPool;
trigger gt_AntiCliffClimb;
trigger gt_Attacked;
trigger gt_InitiatedTKAttack;
trigger gt_ProxInEnter;
trigger gt_ProxInExit;
trigger gt_TheThingKILLS;
trigger gt_AntiCliffHide;
trigger gt_Incapacitated;
trigger gt_Detection;
trigger gt_CorpseKill;
trigger gt_PickThingModel;
trigger gt_BTNTheThing;
trigger gt_BTNMarine;
trigger gt_Burn;
trigger gt_Roar;
trigger gt_ConsumeAnimation;
trigger gt_GiveItem;
trigger gt_AntiCliffHiding;
trigger gt_QuickDrop;
trigger gt_ItemAboveDoor;
trigger gt_AcquireMolotov;
trigger gt_DropMolotov;
trigger gt_ThrowMolotov;
trigger gt_AcquireGrenadev2;
trigger gt_CookandExplodeGrenadev2;
trigger gt_ThrowGrenadev2;
trigger gt_AcquireFlamethrower;
trigger gt_AttackFlamethrower;
trigger gt_DropFlamethrower;
trigger gt_ActivateFlamethrower;
trigger gt_DeactivateFlamethrower;
trigger gt_DrainFlamethrower;
trigger gt_DropRadiov2;
trigger gt_TalkRadiov2;
trigger gt_OneRadioRule;
trigger gt_AcquireRiotShield;
trigger gt_DropRiotShield;
trigger gt_HitwithRiotShield;
trigger gt_Addmedkitcharge;
trigger gt_MedkitEffect;
trigger gt_MedkitThingUse;
trigger gt_AcquireInfraredGoggles;
trigger gt_HelpMenuHandleIDs;
trigger gt_MarineDIES;
trigger gt_TheThingDIES;
trigger gt_PlayerLeaves;
trigger gt_ResetName;
trigger gt_SetName;
trigger gt_Doorsmasher;
trigger gt_MuteRoundsDialog;
trigger gt_MuteRoundsControls;
trigger gt_MutedPlayers;
trigger gt_BanRoundsDialog;
trigger gt_BanRoundsControls;
trigger gt_BannedPlayers;
trigger gt_RatingBanDialog;
trigger gt_RatingBanControls;
trigger gt_RatingBannedPlayers;
trigger gt_BanList;
trigger gt_AdminControlShow;
trigger gt_AdminPanelControls;
trigger gt_AdminControlMouseEnter;
trigger gt_AdminControlMouseExit;
trigger gt_AdminControlHighlight;
trigger gt_AdminControlUnhighlight;
trigger gt_AdminControlHide;
trigger gt_AdminPanelButton;
trigger gt_AdminButton;
trigger gt_AdminPanelMainButton;
trigger gt_ModelButtons;
trigger gt_Modellistselection;
trigger gt_ShowHideDebugDialog;
trigger gt_SelectDebugDialog;
trigger gt_ResizeDebugDialog;
trigger gt_MoveDebugDialog;
trigger gt_MoveDebugDialogDrop;
trigger gt_GrantRandomThingAbilities;
trigger gt_GrantAllThingAbils;
trigger gt_SpawnCorpse;
trigger gt_SpawnBattlecruiser;
trigger gt_SpawnFlamethrower;
trigger gt_SpawnTheThing;
trigger gt_SpawnRiotShield;
trigger gt_SpawnDummyTargets;
trigger gt_ShowChat;
trigger gt_SpawnGrenade;
trigger gt_TEST8;
trigger gt_Damage;
trigger gt_Noteamkillingremoved;
trigger gt_SimulateFlamethrower;
trigger gt_spooky;
trigger gt_spookyactivator;

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
trigger auto_gf_GenerateVBIUpdater_Trigger = null;
int auto_gf_GenerateVBIUpdater_lp_player;

void gf_GenerateVBIUpdater (int lp_player) {
    auto_gf_GenerateVBIUpdater_lp_player = lp_player;

    if (auto_gf_GenerateVBIUpdater_Trigger == null) {
        auto_gf_GenerateVBIUpdater_Trigger = TriggerCreate("auto_gf_GenerateVBIUpdater_TriggerFunc");
    }

    TriggerExecute(auto_gf_GenerateVBIUpdater_Trigger, false, false);
}

bool auto_gf_GenerateVBIUpdater_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_GenerateVBIUpdater_lp_player;

    // Variable Declarations
    int lv_previousdate;
    string lv_previousmessage;
    int lv_updatecheckitem;
    int lv_dayitem;
    int lv_monthitem;
    int lv_yearitem;
    int lv_messageitem;
    int lv_lockitem;
    int lv_revisionitem;
    int lv_vbiupdater;

    // Automatic Variable Declarations
    const int autoF4157812_ae = 12;
    int autoF4157812_var;
    const int autoE20710BF_ae = 31;
    int autoE20710BF_var;

    // Variable Initialization
    lv_previousmessage = "";
    lv_updatecheckitem = c_invalidDialogControlId;
    lv_dayitem = c_invalidDialogControlId;
    lv_monthitem = c_invalidDialogControlId;
    lv_yearitem = c_invalidDialogControlId;
    lv_messageitem = c_invalidDialogControlId;
    lv_lockitem = c_invalidDialogControlId;
    lv_revisionitem = c_invalidDialogControlId;
    lv_vbiupdater = c_invalidDialogId;

    // Implementation
    DialogCreate(500, 250, c_anchorCenter, 0, 0, true);
    lv_vbiupdater = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(lp_player), true);
    gf_GenerateWindowTab(DialogLastCreated(), true, true, true, true, 5, 5, c_anchorTopLeft, c_anchorTopRight, StringExternal("Param/Value/7891DD76"));
    gf_GenerateWindowUI(DialogLastCreated(), Color(100.00, 100.00, 100.00), Color(9.80, 9.80, 9.80));
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePulldown);
    lv_monthitem = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 50, 50);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 50);
    autoF4157812_var = 1;
    for ( ; autoF4157812_var <= autoF4157812_ae; autoF4157812_var += 1 ) {
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), IntToText(autoF4157812_var));
    }
    DialogControlSelectItem(DialogControlLastCreated(), PlayerGroupAll(), 1);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/B83E943B"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePulldown);
    lv_dayitem = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 150, 50);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 50);
    autoE20710BF_var = 1;
    for ( ; autoE20710BF_var <= autoE20710BF_ae; autoE20710BF_var += 1 ) {
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), IntToText(autoE20710BF_var));
    }
    DialogControlSelectItem(DialogControlLastCreated(), PlayerGroupAll(), 1);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/E2E8C949"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    lv_yearitem = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 250, 50);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 50);
    libNtve_gf_SetDialogItemEditorValue(DialogControlLastCreated(), "2015", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/95FDC725"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    lv_revisionitem = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 350, 50);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 50);
    libNtve_gf_SetDialogItemEditorValue(DialogControlLastCreated(), "0", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/0084344C"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    lv_messageitem = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 50, 100);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 400, 50);
    libNtve_gf_SetDialogItemEditorValue(DialogControlLastCreated(), "Your message here.", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/EC8DB4A0"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    lv_lockitem = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 50, 150);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 50);
    libNtve_gf_SetDialogItemEditorValue(DialogControlLastCreated(), "Code", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/30E7B2ED"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 150, 150, StringExternal("Param/Value/4C4D9B80"), false);
    lv_updatecheckitem = DialogControlLastCreated();
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/3388C137"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTopLeft, 200, 150, StringExternal("Param/Value/94C9E380"), ColorWithAlpha(0,0,0,0), false, 2.0);
    while ((libNtve_gf_DialogItemIsChecked(lv_updatecheckitem, lp_player) == false)) {
        lv_previousmessage = libNtve_gf_DialogItemEditValue(lv_messageitem, lp_player);
        lv_previousdate = gf_ConvertDatetoString(StringToInt(libNtve_gf_DialogItemEditValue(lv_revisionitem, lp_player)), DialogControlGetSelectedItem(lv_dayitem, lp_player), DialogControlGetSelectedItem(lv_monthitem, lp_player), ModI(StringToInt(libNtve_gf_DialogItemEditValue(lv_yearitem, lp_player)), 100));
        Wait(0.5, c_timeReal);
        if (((lv_previousmessage != libNtve_gf_DialogItemEditValue(lv_messageitem, lp_player)) || (lv_previousdate != gf_ConvertDatetoString(StringToInt(libNtve_gf_DialogItemEditValue(lv_revisionitem, lp_player)), DialogControlGetSelectedItem(lv_dayitem, lp_player), DialogControlGetSelectedItem(lv_monthitem, lp_player), ModI(StringToInt(libNtve_gf_DialogItemEditValue(lv_yearitem, lp_player)), 100))))) {
            if ((PlayerHandle(lp_player) == "1-S2-1-2151326")) {
                libNtve_gf_SetDialogItemEditorValue(lv_lockitem, IntToString(gf_GenerateChecksum(gf_PublishString(libNtve_gf_DialogItemEditValue(lv_messageitem, lp_player), StringToInt(libNtve_gf_DialogItemEditValue(lv_revisionitem, lp_player)), DialogControlGetSelectedItem(lv_dayitem, lp_player), DialogControlGetSelectedItem(lv_monthitem, lp_player), ModI(StringToInt(libNtve_gf_DialogItemEditValue(lv_yearitem, lp_player)), 100)))), PlayerGroupAll());
            }

            libNtve_gf_SetDialogItemTooltip(lv_updatecheckitem, (StringToText(gf_FormatDate(gf_ConvertDatetoString(StringToInt(libNtve_gf_DialogItemEditValue(lv_revisionitem, lp_player)), DialogControlGetSelectedItem(lv_dayitem, lp_player), DialogControlGetSelectedItem(lv_monthitem, lp_player), ModI(StringToInt(libNtve_gf_DialogItemEditValue(lv_yearitem, lp_player)), 100)))) + StringExternal("Param/Value/273841E3") + StringToText(libNtve_gf_DialogItemEditValue(lv_messageitem, lp_player))), PlayerGroupAll());
        }

    }
    gf_StoreVBIDataCCLtoBank(gv_settingsBank[lp_player], "string", "VBI", libNtve_gf_DialogItemEditValue(lv_messageitem, lp_player), StringToInt(libNtve_gf_DialogItemEditValue(lv_revisionitem, lp_player)), DialogControlGetSelectedItem(lv_dayitem, lp_player), DialogControlGetSelectedItem(lv_monthitem, lp_player), ModI(StringToInt(libNtve_gf_DialogItemEditValue(lv_yearitem, lp_player)), 100));
    DialogDestroy(lv_vbiupdater);
    return true;
}

string gf_FormatDate (int lp_date) {
    // Variable Declarations
    string lv_year;
    string lv_month;
    string lv_day;
    string lv_revision;

    // Automatic Variable Declarations
    string auto766601F1_val;

    // Variable Initialization
    lv_year = ("20" + StringSub(IntToString(lp_date), 1, 2));
    lv_month = StringSub(IntToString(lp_date), 3, 4);
    lv_day = StringSub(IntToString(lp_date), 5, 6);
    lv_revision = StringSub(IntToString(lp_date), 7, 8);

    // Implementation
    auto766601F1_val = lv_month;
    if (auto766601F1_val == "01") {
        lv_month = "January";
    }
    else if (auto766601F1_val == "02") {
        lv_month = "February";
    }
    else if (auto766601F1_val == "03") {
        lv_month = "March";
    }
    else if (auto766601F1_val == "04") {
        lv_month = "April";
    }
    else if (auto766601F1_val == "05") {
        lv_month = "May";
    }
    else if (auto766601F1_val == "06") {
        lv_month = "June";
    }
    else if (auto766601F1_val == "07") {
        lv_month = "July";
    }
    else if (auto766601F1_val == "08") {
        lv_month = "August";
    }
    else if (auto766601F1_val == "09") {
        lv_month = "September";
    }
    else if (auto766601F1_val == "10") {
        lv_month = "October";
    }
    else if (auto766601F1_val == "11") {
        lv_month = "November";
    }
    else if (auto766601F1_val == "12") {
        lv_month = "December";
    }
    else {
        lv_month = "ERROR";
    }
    return (lv_month + " " + lv_day + ", " + lv_year + " #" + lv_revision);
}

int gf_FindLatestVBIDatafromPlayers (playergroup lp_pPlayerGroup, string lp_pKey, string lp_pSection) {
    // Variable Declarations
    int lv_playerloop;
    int[16] lv_vbidate;
    int lv_latestvbidate;
    int lv_latestplayer;

    // Automatic Variable Declarations
    playergroup auto986EF8D9_g;

    // Variable Initialization

    // Implementation
    auto986EF8D9_g = lp_pPlayerGroup;
    lv_playerloop = -1;
    while (true) {
        lv_playerloop = PlayerGroupNextPlayer(auto986EF8D9_g, lv_playerloop);
        if (lv_playerloop < 0) { break; }
        if ((BankSectionExists(gv_settingsBank[lv_playerloop], "VBI") == true)) {
            lv_vbidate[lv_playerloop] = gf_ExtractDateofString(gf_RetrieveVBIDataCLLforPlayerfromBank(gv_settingsBank[lv_playerloop], "string", "VBI"));
        }
        else {
            lv_vbidate[lv_playerloop] = 0;
        }
        gf_TellDrDebug(("VBI - Player " + IntToString(lv_playerloop) + " vbidate: " + IntToString(lv_vbidate[lv_playerloop])));
        if ((lv_latestvbidate < lv_vbidate[lv_playerloop])) {
            lv_latestvbidate = lv_vbidate[lv_playerloop];
            lv_latestplayer = lv_playerloop;
        }

    }
    gf_TellDrDebug(("VBI - latestplayer " + IntToString(lv_latestplayer)));
    return lv_latestplayer;
}

string gf_RetrieveVBIDataCLLforPlayerfromBank (bank lp_pBank, string lp_pKey, string lp_pSection) {
    // Automatic Variable Declarations
    // Implementation
    return gf_UnlockString(BankValueGetAsString(lp_pBank, lp_pSection, lp_pKey));
}

void gf_StoreVBIDataCCLtoBank (bank lp_pBank, string lp_pKey, string lp_pSection, string lp_pString, int lp_pRevision, int lp_pDay, int lp_pMonth, int lp_pYear) {
    // Automatic Variable Declarations
    // Implementation
    BankValueSetFromString(lp_pBank, lp_pSection, lp_pKey, gf_LockString(gf_PublishString(lp_pString, lp_pRevision, lp_pDay, lp_pMonth, lp_pYear)));
    BankSave(lp_pBank);
}

string gf_ExtractSourceofString (string lp_pString) {
    // Automatic Variable Declarations
    // Implementation
    if ((gf_CheckDateofString(lp_pString) == true)) {
        return StringSub(lp_pString, (gf_FindDateOffsetfromString(lp_pString) + 1), StringLength(lp_pString));
    }
    else {
        return lp_pString;
    }
}

int gf_ExtractDateofString (string lp_pString) {
    // Automatic Variable Declarations
    // Implementation
    if ((gf_CheckDateofString(lp_pString) == true)) {
        return StringToInt(StringSub(lp_pString, 1, (gf_FindDateOffsetfromString(lp_pString) - 1)));
    }
    else {
        return 0;
    }
}

int gf_FindDateOffsetfromString (string lp_pString) {
    // Variable Declarations
    int lv_x;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((StringSub(lp_pString, 8, 8) == "@")) {
        return 8;
    }
    else {
        return 9;
    }
}

bool gf_CheckDateofString (string lp_pString) {
    // Automatic Variable Declarations
    // Implementation
    if (((StringSub(lp_pString, 9, 9) == "@") || (StringSub(lp_pString, 8, 8) == "@"))) {
        return true;
    }
    else {
        return false;
    }
}

string gf_PublishString (string lp_pString, int lp_pRevision, int lp_pDay, int lp_pMonth, int lp_pYear) {
    // Automatic Variable Declarations
    // Implementation
    return (IntToString(gf_ConvertDatetoString(lp_pRevision, lp_pDay, lp_pMonth, lp_pYear)) + "@" + lp_pString);
}

int gf_ConvertDatetoString (int lp_pRevision, int lp_pDay, int lp_pMonth, int lp_pYear) {
    // Automatic Variable Declarations
    // Implementation
    return ((lp_pRevision * 1) + (lp_pDay * 100) + (lp_pMonth * 10000) + (lp_pYear * 1000000));
}

string gf_UnlockString (string lp_pString) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_pString != "")) {
        if ((gf_VerifyString(lp_pString) == true)) {
            return StringSub(lp_pString, 1, gf_FindChecksumOffsetfromString(lp_pString));
        }
        else {
            return "VERIFICATION FAILED!";
        }
    }
    else {
        return "No string found!";
    }
}

int gf_FindChecksumOffsetfromString (string lp_pString) {
    // Variable Declarations
    int lv_x;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_x = StringLength(lp_pString);

    // Implementation
    while ((StringSub(lp_pString, lv_x, lv_x) != "#") && (lv_x != 1)) {
        lv_x -= 1;
    }
    lv_x -= 1;
    return lv_x;
}

bool gf_VerifyString (string lp_pString) {
    // Variable Declarations
    int lv_x;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_x = StringLength(lp_pString);

    // Implementation
    while ((StringSub(lp_pString, lv_x, lv_x) != "#") && (lv_x != 1)) {
        lv_x -= 1;
    }
    lv_x -= 1;
    if ((lv_x == 0)) {
        return false;
    }

    if ((gf_GenerateChecksum(StringSub(lp_pString, 1, lv_x)) == StringToInt(StringSub(lp_pString, (lv_x + 2), StringLength(lp_pString))))) {
        return true;
    }
    else {
        return false;
    }
}

string gf_LockString (string lp_pString) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_pString + "#" + IntToString(gf_GenerateChecksum(lp_pString)));
}

int gf_GenerateChecksum (string lp_pString) {
    // Variable Declarations
    int lv_checksum;

    // Automatic Variable Declarations
    int auto70DBBC39_ae;
    int auto70DBBC39_var;

    // Variable Initialization

    // Implementation
    auto70DBBC39_ae = StringLength(lp_pString);
    auto70DBBC39_var = 1;
    for ( ; auto70DBBC39_var <= auto70DBBC39_ae; auto70DBBC39_var += 1 ) {
        lv_checksum += (gf_GetCharacterCodeGenerator(StringSub(lp_pString, auto70DBBC39_var, auto70DBBC39_var)) * gf_GetCharacterCaseCodeModifier(StringSub(lp_pString, auto70DBBC39_var, auto70DBBC39_var)));
        lv_checksum += gf_GetCharacterPositionCodeModifer(auto70DBBC39_var);
    }
    lv_checksum = AbsI(lv_checksum);
    return lv_checksum;
}

int gf_GetCharacterPositionCodeModifer (int lp_positionValue) {
    // Variable Declarations
    const int lv_divisor = 9;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((ModI(lp_positionValue, 2) == 1)) {
        return (ModI(lp_positionValue, lv_divisor) * 2);
    }
    else {
        return (ModI(lp_positionValue, lv_divisor) * -1);
    }
}

int gf_GetCharacterCaseCodeModifier (string lp_character) {
    // Automatic Variable Declarations
    // Implementation
    if ((StringCase(lp_character, true) == lp_character)) {
        return -1;
    }
    else {
        return 1;
    }
}

int gf_GetCharacterCodeGenerator (string lp_character) {
    // Automatic Variable Declarations
    string autoEDA267ED_val;

    // Implementation
    autoEDA267ED_val = StringCase(lp_character, true);
    if (autoEDA267ED_val == "0") {
        return gv_cKCode[1];
    }
    else if (autoEDA267ED_val == "1") {
        return gv_cKCode[2];
    }
    else if (autoEDA267ED_val == "2") {
        return gv_cKCode[3];
    }
    else if (autoEDA267ED_val == "3") {
        return gv_cKCode[4];
    }
    else if (autoEDA267ED_val == "4") {
        return gv_cKCode[5];
    }
    else if (autoEDA267ED_val == "5") {
        return gv_cKCode[6];
    }
    else if (autoEDA267ED_val == "6") {
        return gv_cKCode[7];
    }
    else if (autoEDA267ED_val == "7") {
        return gv_cKCode[8];
    }
    else if (autoEDA267ED_val == "8") {
        return gv_cKCode[9];
    }
    else if (autoEDA267ED_val == "9") {
        return gv_cKCode[10];
    }
    else if (autoEDA267ED_val == "A") {
        return gv_cKCode[11];
    }
    else if (autoEDA267ED_val == "B") {
        return gv_cKCode[12];
    }
    else if (autoEDA267ED_val == "C") {
        return gv_cKCode[13];
    }
    else if (autoEDA267ED_val == "D") {
        return gv_cKCode[14];
    }
    else if (autoEDA267ED_val == "E") {
        return gv_cKCode[15];
    }
    else if (autoEDA267ED_val == "F") {
        return gv_cKCode[16];
    }
    else if (autoEDA267ED_val == "G") {
        return gv_cKCode[17];
    }
    else if (autoEDA267ED_val == "H") {
        return gv_cKCode[18];
    }
    else if (autoEDA267ED_val == "I") {
        return gv_cKCode[19];
    }
    else if (autoEDA267ED_val == "J") {
        return gv_cKCode[20];
    }
    else if (autoEDA267ED_val == "K") {
        return gv_cKCode[21];
    }
    else if (autoEDA267ED_val == "L") {
        return gv_cKCode[22];
    }
    else if (autoEDA267ED_val == "M") {
        return gv_cKCode[23];
    }
    else if (autoEDA267ED_val == "N") {
        return gv_cKCode[24];
    }
    else if (autoEDA267ED_val == "O") {
        return gv_cKCode[25];
    }
    else if (autoEDA267ED_val == "P") {
        return gv_cKCode[26];
    }
    else if (autoEDA267ED_val == "L") {
        return gv_cKCode[27];
    }
    else if (autoEDA267ED_val == "M") {
        return gv_cKCode[28];
    }
    else if (autoEDA267ED_val == "N") {
        return gv_cKCode[29];
    }
    else if (autoEDA267ED_val == "O") {
        return gv_cKCode[30];
    }
    else if (autoEDA267ED_val == "P") {
        return gv_cKCode[31];
    }
    else if (autoEDA267ED_val == "Q") {
        return gv_cKCode[32];
    }
    else if (autoEDA267ED_val == "R") {
        return gv_cKCode[33];
    }
    else if (autoEDA267ED_val == "S") {
        return gv_cKCode[34];
    }
    else if (autoEDA267ED_val == "T") {
        return gv_cKCode[35];
    }
    else if (autoEDA267ED_val == "U") {
        return gv_cKCode[36];
    }
    else if (autoEDA267ED_val == "V") {
        return gv_cKCode[37];
    }
    else if (autoEDA267ED_val == "W") {
        return gv_cKCode[38];
    }
    else if (autoEDA267ED_val == "X") {
        return gv_cKCode[39];
    }
    else if (autoEDA267ED_val == "Y") {
        return gv_cKCode[40];
    }
    else if (autoEDA267ED_val == "Z") {
        return gv_cKCode[41];
    }
    else if (autoEDA267ED_val == ".") {
        return gv_cKCode[42];
    }
    else if (autoEDA267ED_val == "?") {
        return gv_cKCode[43];
    }
    else if (autoEDA267ED_val == "!") {
        return gv_cKCode[44];
    }
    else if (autoEDA267ED_val == " ") {
        return gv_cKCode[45];
    }
    else {
        return gv_cKCode[0];
    }
}

void gf_CharacterCodeGenerator (int lp_pSeed, int lp_pCharacterKeyAmount, int lp_pMinValue, int lp_pMaxValue) {
    // Automatic Variable Declarations
    int auto2070FEB6_ae;
    int auto2070FEB6_var;

    // Implementation
    GameSetSeedLocked(true);
    GameSetSeed(lp_pSeed);
    auto2070FEB6_ae = lp_pCharacterKeyAmount;
    auto2070FEB6_var = 0;
    for ( ; auto2070FEB6_var <= auto2070FEB6_ae; auto2070FEB6_var += 1 ) {
        gv_cKCode[auto2070FEB6_var] = RandomInt(lp_pMinValue, lp_pMaxValue);
    }
    GameSetSeedLocked(false);
}

string gf_EncryptString (string lp_toEncrypt) {
    // Variable Declarations
    int lv_counter;
    string lv_outputString;
    int lv_i;

    // Automatic Variable Declarations
    int auto751EF6D5_ae;
    const int auto751EF6D5_ai = 1;

    // Variable Initialization
    lv_outputString = "";

    // Implementation
    auto751EF6D5_ae = StringLength(lp_toEncrypt);
    lv_counter = 1;
    for ( ; ( (auto751EF6D5_ai >= 0 && lv_counter <= auto751EF6D5_ae) || (auto751EF6D5_ai < 0 && lv_counter >= auto751EF6D5_ae) ) ; lv_counter += auto751EF6D5_ai ) {
        lv_i = StringFind(gv_clearString, StringSub(lp_toEncrypt, lv_counter, lv_counter), c_stringCase);
        lv_outputString = (lv_outputString + StringSub(gv_scrambledString, lv_i, lv_i));
    }
    return lv_outputString;
}

string gf_DecryptString (string lp_toDecrypt) {
    // Variable Declarations
    int lv_counter;
    string lv_outputString;
    int lv_i;

    // Automatic Variable Declarations
    int autoA4CF417E_ae;
    const int autoA4CF417E_ai = 1;

    // Variable Initialization
    lv_outputString = "";

    // Implementation
    if ((lp_toDecrypt != "")) {
        autoA4CF417E_ae = StringLength(lp_toDecrypt);
        lv_counter = 1;
        for ( ; ( (autoA4CF417E_ai >= 0 && lv_counter <= autoA4CF417E_ae) || (autoA4CF417E_ai < 0 && lv_counter >= autoA4CF417E_ae) ) ; lv_counter += autoA4CF417E_ai ) {
            lv_i = StringFind(gv_scrambledString, StringSub(lp_toDecrypt, lv_counter, lv_counter), c_stringCase);
            lv_outputString = (lv_outputString + StringSub(gv_clearString, lv_i, lv_i));
        }
    }
    else {
        lv_outputString = (lv_outputString + StringSub(gv_clearString, lv_i, lv_i));
    }
    return lv_outputString;
}

string gf_FormulateUltiSecCode (int lp_player) {
    // Variable Declarations
    string lv_code;
    int lv_sum;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_code = "";

    // Implementation
    if ((StringLength(PlayerHandle(lp_player)) > 1)) {
        lv_sum = StringToInt(StringSub(PlayerHandle(lp_player), (StringLength(PlayerHandle(lp_player)) - 6), StringLength(PlayerHandle(lp_player))));
        gf_TellDrDebug(("UltiSec - Player " + IntToString(lp_player) + " - " + IntToString(lv_sum)));
        lv_sum = (lv_sum - gv_gPGamesPlayed[lp_player]);
        gf_TellDrDebug(("UltiSec - Player " + IntToString(lp_player) + " - " + IntToString(lv_sum)));
        lv_sum = ModI(lv_sum, (gv_gMGamesMinutes[lp_player] + 128));
        gf_TellDrDebug(("UltiSec - Player " + IntToString(lp_player) + " - " + IntToString(lv_sum)));
        lv_sum = (lv_sum + ModI(gv_tPThingPoints[lp_player], 543));
        gf_TellDrDebug(("UltiSec - Player " + IntToString(lp_player) + " - " + IntToString(lv_sum)));
        lv_sum = (lv_sum + ModI(gv_mPMarinePoints[lp_player], 854));
        gf_TellDrDebug(("UltiSec - Player " + IntToString(lp_player) + " - " + IntToString(lv_sum)));
        lv_sum = (lv_sum - ModI(gv_gTGamesAsThing[lp_player], 67));
        gf_TellDrDebug(("UltiSec - Player " + IntToString(lp_player) + " - " + IntToString(lv_sum)));
        lv_sum = (lv_sum + ModI(gv_lGLastGameAsThing[lp_player], 12));
        gf_TellDrDebug(("UltiSec - Player " + IntToString(lp_player) + " - " + IntToString(lv_sum)));
        lv_sum = (lv_sum + ModI(gv_tRPThingRatingPoints[lp_player], 321));
        gf_TellDrDebug(("UltiSec - Player " + IntToString(lp_player) + " - " + IntToString(lv_sum)));
        lv_sum = (lv_sum + ModI(gv_tRIThingRatingInstances[lp_player], 233));
        gf_TellDrDebug(("UltiSec - Player " + IntToString(lp_player) + " - " + IntToString(lv_sum)));
        lv_sum = (lv_sum + ModI(gv_vPVicPoints[lp_player], 432));
        gf_TellDrDebug(("UltiSec - Player " + IntToString(lp_player) + " - " + IntToString(lv_sum)));
        lv_sum = (lv_sum - ModI(gv_pCPortraitCurrent[lp_player], 6));
        gf_TellDrDebug(("UltiSec - Player " + IntToString(lp_player) + " - " + IntToString(lv_sum)));
        lv_sum = (lv_sum + StringToInt(StringSub(PlayerHandle(lp_player), (StringLength(PlayerHandle(lp_player)) - 3), StringLength(PlayerHandle(lp_player)))));
        gf_TellDrDebug(("UltiSec - Player " + IntToString(lp_player) + " - " + IntToString(lv_sum)));
        lv_sum = ModI(lv_sum, 1048576);
        gf_TellDrDebug(("UltiSec - Player " + IntToString(lp_player) + " - " + IntToString(lv_sum)));
        lv_code = gf_Hexidecimalize(lv_sum);
        gf_TellDrDebug(("UltiSec - Player " + IntToString(lp_player) + " - " + lv_code));
        return lv_code;
    }
    else {
        gf_TellDrDebug(("UltiSec - Player " + IntToString(lp_player) + " - " + "Handle does not exist."));
        return "ERROR";
    }
}

void gf_StatsUpgradetov2v3 (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if (((gv_sVStatsVersion[lp_player] == 1) || (gv_sVStatsVersion[lp_player] == 2))) {
        gv_tRIThingRatingInstances[lp_player] = 0;
        gv_tRPThingRatingPoints[lp_player] = 0;
        gv_sVStatsVersion[lp_player] = 3;
        gf_TellDrDebug(("STATS - " + "Player " + IntToString(lp_player) + " - upgraded his stats version to v3."));
    }

}

void gf_StatsUpgradetov4 (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_sVStatsVersion[lp_player] == 3)) {
        gv_gTGamesAsThing[lp_player] = (gv_gTGamesAsThing[lp_player] / 2);
        gv_sVStatsVersion[lp_player] = 4;
        gf_TellDrDebug(("STATS - " + "Player " + IntToString(lp_player) + " - upgraded his stats version to v4."));
    }

}

void gf_LoadStats () {
    int init_i;

    // Variable Declarations
    int lv_x;
    string[16] lv_string;
    string[16] lv_string2;
    string[16] lv_string3;
    string[16] lv_string4;
    playergroup lv_playergroup;
    string lv_formulatedultisec;

    // Automatic Variable Declarations
    playergroup auto81E3A5FF_g;
    int auto81E3A5FF_var;
    playergroup autoF9359805_g;
    int autoF9359805_var;
    playergroup autoB60F6602_g;
    int autoB60F6602_var;

    // Variable Initialization
    for (init_i = 0; init_i <= 15; init_i += 1) {
        lv_string[init_i] = "";
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        lv_string2[init_i] = "";
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        lv_string3[init_i] = "";
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        lv_string4[init_i] = "";
    }
    lv_playergroup = PlayerGroupActive();
    lv_formulatedultisec = "";

    // Implementation
    auto81E3A5FF_g = PlayerGroupActive();
    auto81E3A5FF_var = -1;
    while (true) {
        auto81E3A5FF_var = PlayerGroupNextPlayer(auto81E3A5FF_g, auto81E3A5FF_var);
        if (auto81E3A5FF_var < 0) { break; }
        if ((PlayerType(auto81E3A5FF_var) == c_playerTypeComputer)) {
            PlayerGroupRemove(lv_playergroup, auto81E3A5FF_var);
        }

    }
    gf_TellDrDebug(("Stats - Preloaded"));
    autoF9359805_g = lv_playergroup;
    autoF9359805_var = -1;
    while (true) {
        autoF9359805_var = PlayerGroupNextPlayer(autoF9359805_g, autoF9359805_var);
        if (autoF9359805_var < 0) { break; }
        BankLoad("TheThing", autoF9359805_var);
        gv_thingBank[autoF9359805_var] = BankLastCreated();
        gf_TellDrDebug(("Stats - " + "Player " + IntToString(autoF9359805_var) + " bank is opened."));
        gf_TellDrDebug(("Stats - " + "Player " + IntToString(autoF9359805_var) + BankValueGetAsString(BankLastCreated(), "0", "0")));
    }
    autoB60F6602_g = lv_playergroup;
    autoB60F6602_var = -1;
    while (true) {
        autoB60F6602_var = PlayerGroupNextPlayer(autoB60F6602_g, autoB60F6602_var);
        if (autoB60F6602_var < 0) { break; }
        lv_string[autoB60F6602_var] = BankValueGetAsString(gv_thingBank[autoB60F6602_var], "0", "0");
        lv_string2[autoB60F6602_var] = BankValueGetAsString(gv_thingBank[autoB60F6602_var], "1", "0");
        lv_string3[autoB60F6602_var] = BankValueGetAsString(gv_thingBank[autoB60F6602_var], "2", "0");
        lv_string4[autoB60F6602_var] = StringSub(BankValueGetAsString(gv_thingBank[autoB60F6602_var], "3", "0"), 1, 256);
        gv_uSUltiSec[autoB60F6602_var] = BankValueGetAsString(gv_thingBank[autoB60F6602_var], "4", "0");
        if ((lv_string[autoB60F6602_var] == "")) {
            gf_TellDrDebug(("Stats - Player " + IntToString(autoB60F6602_var) + " does not require savecode extraction."));
        }
        else {
            gf_TellDrDebug(("Stats - Player " + IntToString(autoB60F6602_var) + " extracted savecode."));
            lv_string[autoB60F6602_var] = gf_DecryptString(lv_string[autoB60F6602_var]);
            lv_string2[autoB60F6602_var] = gf_DecryptString(lv_string2[autoB60F6602_var]);
            lv_string3[autoB60F6602_var] = gf_DecryptString(lv_string3[autoB60F6602_var]);
            gf_TellDrDebug(("Stats - Player " + IntToString(autoB60F6602_var) + " decrypted savecode."));
            gf_TellDrDebug(("Stats - Player " + IntToString(autoB60F6602_var) + " stats are uploading."));
            gv_sVStatsVersion[autoB60F6602_var] = gf_ExtractIntegerfromSavecode("SV", lv_string[autoB60F6602_var]);
            gv_gPGamesPlayed[autoB60F6602_var] = gf_ExtractIntegerfromSavecode("GP", lv_string[autoB60F6602_var]);
            gv_gPGamesPlayedPrev[autoB60F6602_var] = gv_gPGamesPlayed[autoB60F6602_var];
            gv_gMGamesMinutes[autoB60F6602_var] = gf_ExtractIntegerfromSavecode("GM", lv_string[autoB60F6602_var]);
            gv_gMGamesMinutesPrev[autoB60F6602_var] = gv_gMGamesMinutes[autoB60F6602_var];
            gv_mPMarinePoints[autoB60F6602_var] = gf_ExtractIntegerfromSavecode("MP", lv_string[autoB60F6602_var]);
            gv_mPMarinePointsPrev[autoB60F6602_var] = gv_mPMarinePoints[autoB60F6602_var];
            gv_tPThingPoints[autoB60F6602_var] = gf_ExtractIntegerfromSavecode("TP", lv_string[autoB60F6602_var]);
            gv_tPThingPointsPrev[autoB60F6602_var] = gv_tPThingPoints[autoB60F6602_var];
            gv_gTGamesAsThing[autoB60F6602_var] = gf_ExtractIntegerfromSavecode("GT", lv_string[autoB60F6602_var]);
            gv_gTGamesAsThingPrev[autoB60F6602_var] = gv_gTGamesAsThing[autoB60F6602_var];
            gv_lGLastGameAsThing[autoB60F6602_var] = gf_ExtractIntegerfromSavecode("LG", lv_string[autoB60F6602_var]);
            gv_tRPThingRatingPoints[autoB60F6602_var] = gf_ExtractIntegerfromSavecode("TRP", lv_string[autoB60F6602_var]);
            gv_tRIThingRatingInstances[autoB60F6602_var] = gf_ExtractIntegerfromSavecode("TRI", lv_string[autoB60F6602_var]);
            gv_vPVicPoints[autoB60F6602_var] = gf_ExtractIntegerfromSavecode("VP", lv_string[autoB60F6602_var]);
            gv_pPPortraitsPurchased[autoB60F6602_var] = gf_ExtractStringfromSavecode("PP", lv_string2[autoB60F6602_var]);
            gv_pCPortraitCurrent[autoB60F6602_var] = gf_ExtractIntegerfromSavecode("PC", lv_string2[autoB60F6602_var]);
            gv_lBGPGamesPlayed[autoB60F6602_var] = gf_ExtractIntegerfromSavecode("LBGP", lv_string3[autoB60F6602_var]);
            gv_lBGMGamesMinutes[autoB60F6602_var] = gf_ExtractIntegerfromSavecode("LBGM", lv_string3[autoB60F6602_var]);
            gv_lBTPThingPoints[autoB60F6602_var] = gf_ExtractIntegerfromSavecode("LBTP", lv_string3[autoB60F6602_var]);
            gv_lBMPMarinePoints[autoB60F6602_var] = gf_ExtractIntegerfromSavecode("LBMP", lv_string3[autoB60F6602_var]);
            gv_lBGPGamesPlayedName[autoB60F6602_var] = gf_ExtractStringfromSavecode("LBGPN", lv_string3[autoB60F6602_var]);
            gv_lBGMGamesMinutesName[autoB60F6602_var] = gf_ExtractStringfromSavecode("LBGMN", lv_string3[autoB60F6602_var]);
            gv_lBTPThingPointsName[autoB60F6602_var] = gf_ExtractStringfromSavecode("LBTPN", lv_string3[autoB60F6602_var]);
            gv_lBMPMarinePointsName[autoB60F6602_var] = gf_ExtractStringfromSavecode("LBMPN", lv_string3[autoB60F6602_var]);
            gv_lBName[autoB60F6602_var] = gf_ExtractStringfromSavecode("LBN", lv_string3[autoB60F6602_var]);
            gv_pQProfileQuote[autoB60F6602_var] = lv_string4[autoB60F6602_var];
            gf_TellDrDebug(("Stats - Player " + IntToString(autoB60F6602_var) + " stats upload completed."));
        }
        lv_formulatedultisec = gf_FormulateUltiSecCode(autoB60F6602_var);
        if (((gv_uSUltiSec[autoB60F6602_var] == lv_formulatedultisec) || (gv_gPGamesPlayed[autoB60F6602_var] <= 1) || (gv_sVStatsVersion[autoB60F6602_var] < 2))) {
            gv_statsVerified[autoB60F6602_var] = true;
            gf_TellDrDebug(("UltiSec - Player " + IntToString(autoB60F6602_var) + " - " + "Stats verified."));
        }
        else {
            gv_statsVerified[autoB60F6602_var] = false;
            gf_TellDrDebug(("UltiSec - Player " + IntToString(autoB60F6602_var) + " - " + gv_uSUltiSec[autoB60F6602_var] + " != " + lv_formulatedultisec));
            gf_TellDrDebug(("UltiSec - Player " + IntToString(autoB60F6602_var) + " - " + "Stats NOT verified."));
        }
        gf_StatsUpgradetov2v3(autoB60F6602_var);
        gf_StatsUpgradetov4(autoB60F6602_var);
    }
    gf_Selfranking();
    gf_Sourceranking();
    gf_TellDrDebug(("Leaderboard - Completed."));
}

trigger auto_gf_SaveStats_Trigger = null;
int auto_gf_SaveStats_lp_player;

void gf_SaveStats (int lp_player) {
    auto_gf_SaveStats_lp_player = lp_player;

    if (auto_gf_SaveStats_Trigger == null) {
        auto_gf_SaveStats_Trigger = TriggerCreate("auto_gf_SaveStats_TriggerFunc");
    }

    TriggerExecute(auto_gf_SaveStats_Trigger, false, false);
}

bool auto_gf_SaveStats_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_SaveStats_lp_player;

    // Variable Declarations
    int lv_playerLocalized;
    string lv_string;
    string lv_string2;
    string lv_string3;
    string lv_string4;
    string lv_string5;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_playerLocalized = lp_player;
    lv_string = "";
    lv_string2 = "";
    lv_string3 = "";
    lv_string4 = "";
    lv_string5 = gf_FormulateUltiSecCode(lp_player);

    // Implementation
    if ((gv_enableSaving[lp_player] == true) && (gv_statsVerified[lp_player] == true)) {
        gf_TellDrDebug(("Stats - " + "Player " + IntToString(lv_playerLocalized) + " is saving stats."));
        lv_playerLocalized = lp_player;
        lv_string = (gf_CompileIntegertoSavecode(lv_string, "SV", gv_sVStatsVersion[lv_playerLocalized]));
        lv_string = (gf_CompileIntegertoSavecode(lv_string, "GP", gv_gPGamesPlayed[lv_playerLocalized]));
        lv_string = (gf_CompileIntegertoSavecode(lv_string, "GM", gv_gMGamesMinutes[lv_playerLocalized]));
        lv_string = (gf_CompileIntegertoSavecode(lv_string, "TP", gv_tPThingPoints[lv_playerLocalized]));
        lv_string = (gf_CompileIntegertoSavecode(lv_string, "MP", gv_mPMarinePoints[lv_playerLocalized]));
        lv_string = (gf_CompileIntegertoSavecode(lv_string, "GT", gv_gTGamesAsThing[lv_playerLocalized]));
        lv_string = (gf_CompileIntegertoSavecode(lv_string, "LG", gv_lGLastGameAsThing[lv_playerLocalized]));
        lv_string = (gf_CompileIntegertoSavecode(lv_string, "TRP", gv_tRPThingRatingPoints[lv_playerLocalized]));
        lv_string = (gf_CompileIntegertoSavecode(lv_string, "TRI", gv_tRIThingRatingInstances[lv_playerLocalized]));
        lv_string = (gf_CompileIntegertoSavecode(lv_string, "VP", gv_vPVicPoints[lv_playerLocalized]));
        lv_string2 = (gf_CompileStringtoSavecode(lv_string2, "PP", gf_GeneratePPList(lv_playerLocalized)));
        lv_string2 = (gf_CompileIntegertoSavecode(lv_string2, "PC", gv_pCPortraitCurrent[lv_playerLocalized]));
        lv_string3 = (gf_CompileIntegertoSavecode(lv_string3, "LBGP", gv_lBGPGamesPlayed[0]));
        lv_string3 = (gf_CompileIntegertoSavecode(lv_string3, "LBGM", gv_lBGMGamesMinutes[0]));
        lv_string3 = (gf_CompileIntegertoSavecode(lv_string3, "LBTP", gv_lBTPThingPoints[0]));
        lv_string3 = (gf_CompileIntegertoSavecode(lv_string3, "LBMP", gv_lBMPMarinePoints[0]));
        lv_string3 = (gf_CompileStringtoSavecode(lv_string3, "LBGPN", gv_lBGPGamesPlayedName[0]));
        lv_string3 = (gf_CompileStringtoSavecode(lv_string3, "LBGMN", gv_lBGMGamesMinutesName[0]));
        lv_string3 = (gf_CompileStringtoSavecode(lv_string3, "LBTPN", gv_lBTPThingPointsName[0]));
        lv_string3 = (gf_CompileStringtoSavecode(lv_string3, "LBMPN", gv_lBMPMarinePointsName[0]));
        lv_string3 = (gf_CompileStringtoSavecode(lv_string3, "LBN", gv_lBName[lv_playerLocalized]));
        lv_string4 = gv_pQProfileQuote[lv_playerLocalized];
        gf_TellDrDebug(("Stats - " + "Player " + IntToString(lv_playerLocalized) + " compiled a savecode."));
        lv_string = gf_EncryptString(lv_string);
        lv_string2 = gf_EncryptString(lv_string2);
        lv_string3 = gf_EncryptString(lv_string3);
        gf_TellDrDebug(("Stats - " + "Player " + IntToString(lv_playerLocalized) + " encrypted a savecode."));
        BankValueSetFromString(gv_thingBank[lv_playerLocalized], "0", "0", lv_string);
        BankValueSetFromString(gv_thingBank[lv_playerLocalized], "1", "0", lv_string2);
        BankValueSetFromString(gv_thingBank[lv_playerLocalized], "2", "0", lv_string3);
        BankValueSetFromString(gv_thingBank[lv_playerLocalized], "3", "0", lv_string4);
        BankValueSetFromString(gv_thingBank[lv_playerLocalized], "4", "0", lv_string5);
        gf_TellDrDebug(("Stats - " + "Player " + IntToString(lv_playerLocalized) + " stored savecode to bank."));
        BankSave(gv_thingBank[lv_playerLocalized]);
        gf_TellDrDebug(("Stats - " + "Player " + IntToString(lv_playerLocalized) + " has his bank file saved."));
        gf_SaveBackupStats(lp_player, lv_string, lv_string2, lv_string3, lv_string4, lv_string5, false);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_playerLocalized), c_messageAreaError, StringExternal("Param/Value/93D7C3AE"));
        gf_TellDrDebug(("Stats - " + "Player " + IntToString(lv_playerLocalized) + " has finished the game and but cannot save his stats."));
    }
    return true;
}

void gf_Selfranking () {
    // Automatic Variable Declarations
    playergroup autoBE38E2F6_g;
    int autoBE38E2F6_var;

    // Implementation
    autoBE38E2F6_g = PlayerGroupActive();
    autoBE38E2F6_var = -1;
    while (true) {
        autoBE38E2F6_var = PlayerGroupNextPlayer(autoBE38E2F6_g, autoBE38E2F6_var);
        if (autoBE38E2F6_var < 0) { break; }
        if ((gv_lBGPGamesPlayed[0] < gv_gPGamesPlayed[autoBE38E2F6_var])) {
            gv_lBGPGamesPlayed[0] = gv_gPGamesPlayed[autoBE38E2F6_var];
            gv_lBGPGamesPlayedName[0] = gv_lBName[autoBE38E2F6_var];
        }

        if ((gv_lBGMGamesMinutes[0] < gv_gMGamesMinutes[autoBE38E2F6_var])) {
            gv_lBGMGamesMinutes[0] = gv_gMGamesMinutes[autoBE38E2F6_var];
            gv_lBGMGamesMinutesName[0] = gv_lBName[autoBE38E2F6_var];
        }

        if ((gv_lBTPThingPoints[0] < gv_tPThingPoints[autoBE38E2F6_var])) {
            gv_lBTPThingPoints[0] = gv_tPThingPoints[autoBE38E2F6_var];
            gv_lBTPThingPointsName[0] = gv_lBName[autoBE38E2F6_var];
        }

        if ((gv_lBMPMarinePoints[0] < gv_mPMarinePoints[autoBE38E2F6_var])) {
            gv_lBMPMarinePoints[0] = gv_mPMarinePoints[autoBE38E2F6_var];
            gv_lBMPMarinePointsName[0] = gv_lBName[autoBE38E2F6_var];
        }

    }
}

void gf_Sourceranking () {
    // Automatic Variable Declarations
    playergroup autoBE93B616_g;
    int autoBE93B616_var;

    // Implementation
    autoBE93B616_g = PlayerGroupActive();
    autoBE93B616_var = -1;
    while (true) {
        autoBE93B616_var = PlayerGroupNextPlayer(autoBE93B616_g, autoBE93B616_var);
        if (autoBE93B616_var < 0) { break; }
        if ((gv_lBGPGamesPlayed[0] < gv_lBGPGamesPlayed[autoBE93B616_var])) {
            gv_lBGPGamesPlayed[0] = gv_lBGPGamesPlayed[autoBE93B616_var];
            gv_lBGPGamesPlayedName[0] = gv_lBGPGamesPlayedName[autoBE93B616_var];
        }

        if ((gv_lBGMGamesMinutes[0] < gv_lBGMGamesMinutes[autoBE93B616_var])) {
            gv_lBGMGamesMinutes[0] = gv_lBGMGamesMinutes[autoBE93B616_var];
            gv_lBGMGamesMinutesName[0] = gv_lBGMGamesMinutesName[autoBE93B616_var];
        }

        if ((gv_lBMPMarinePoints[0] < gv_lBMPMarinePoints[autoBE93B616_var])) {
            gv_lBMPMarinePoints[0] = gv_lBMPMarinePoints[autoBE93B616_var];
            gv_lBMPMarinePointsName[0] = gv_lBMPMarinePointsName[autoBE93B616_var];
        }

        if ((gv_lBTPThingPoints[0] < gv_lBTPThingPoints[autoBE93B616_var])) {
            gv_lBTPThingPoints[0] = gv_lBTPThingPoints[autoBE93B616_var];
            gv_lBTPThingPointsName[0] = gv_lBTPThingPointsName[autoBE93B616_var];
        }

    }
    gf_TellDrDebug(("Leaderboard - " + "Games Played = " + IntToString(gv_lBGPGamesPlayed[0]) + " by " + gv_lBGPGamesPlayedName[0]));
    gf_TellDrDebug(("Leaderboard - " + "Minutes Played = " + IntToString(gv_lBGMGamesMinutes[0]) + " by " + gv_lBGMGamesMinutesName[0]));
    gf_TellDrDebug(("Leaderboard - " + "Thing Points = " + IntToString(gv_lBTPThingPoints[0]) + " by " + gv_lBTPThingPointsName[0]));
    gf_TellDrDebug(("Leaderboard - " + "Marine Points = " + IntToString(gv_lBMPMarinePoints[0]) + " by " + gv_lBMPMarinePointsName[0]));
}

bool gf_CharacterisInteger (string lp_char) {
    // Variable Declarations
    bool lv_isInt;

    // Automatic Variable Declarations
    const int auto3D91DCEB_ae = 9;
    int auto3D91DCEB_var;

    // Variable Initialization

    // Implementation
    lv_isInt = false;
    auto3D91DCEB_var = 0;
    for ( ; auto3D91DCEB_var <= auto3D91DCEB_ae; auto3D91DCEB_var += 1 ) {
        if ((lp_char == IntToString(auto3D91DCEB_var))) {
            lv_isInt = true;
        }
    }
    return lv_isInt;
}

string gf_CompileIntegertoSavecode (string lp_string, string lp_code, int lp_integer) {
    // Automatic Variable Declarations
    // Implementation
    gf_TellDrDebug(("Stats - " + " Saved " + lp_code + " as: " + IntToString(lp_integer)));
    return (lp_string + lp_code + IntToString(lp_integer) + "!");
}

string gf_CompileStringtoSavecode (string lp_string, string lp_code, string lp_codeString) {
    // Variable Declarations
    int lv_codeStringLength;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gf_TellDrDebug(("Stats - " + " Saved " + lp_code + " as: " + lp_codeString));
    return (lp_string + lp_code + lp_codeString + "!");
}

int gf_ExtractIntegerfromSavecode (string lp_code, string lp_string) {
    // Variable Declarations
    int lv_codeStart;
    int lv_codeEnd;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_string != "")) {
        lv_codeStart = (StringFind(lp_string, lp_code, c_stringCase) + StringLength(lp_code));
        lv_codeEnd = (StringFind(lp_string, lp_code, c_stringCase) + StringLength(lp_code));
        while ((StringSub(lp_string, lv_codeEnd, lv_codeEnd) != "!")) {
            lv_codeEnd = (lv_codeEnd + 1);
        }
        lv_codeEnd = (lv_codeEnd - 1);
        gf_TellDrDebug(("Stats - " + " Loaded " + lp_code + " as: " + StringSub(lp_string, lv_codeStart, lv_codeEnd)));
        return StringToInt(StringSub(lp_string, lv_codeStart, lv_codeEnd));
    }
    else {
        return 0;
    }
}

string gf_ExtractStringfromSavecode (string lp_code, string lp_string) {
    // Variable Declarations
    int lv_codeStart;
    int lv_codeEnd;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_string != "")) {
        lv_codeStart = (StringFind(lp_string, lp_code, c_stringCase) + StringLength(lp_code));
        lv_codeEnd = (StringFind(lp_string, lp_code, c_stringCase) + StringLength(lp_code));
        while ((StringSub(lp_string, lv_codeEnd, lv_codeEnd) != "!")) {
            lv_codeEnd = (lv_codeEnd + 1);
        }
        lv_codeEnd = (lv_codeEnd - 1);
        gf_TellDrDebug(("Stats - " + " Loaded " + lp_code + " as: " + StringSub(lp_string, lv_codeStart, lv_codeEnd)));
        return StringSub(lp_string, lv_codeStart, lv_codeEnd);
    }
    else {
        return "";
    }
}

trigger auto_gf_SaveBackupStats_Trigger = null;
int auto_gf_SaveBackupStats_lp_player;
string auto_gf_SaveBackupStats_lp_string1;
string auto_gf_SaveBackupStats_lp_string2;
string auto_gf_SaveBackupStats_lp_string3;
string auto_gf_SaveBackupStats_lp_string4;
string auto_gf_SaveBackupStats_lp_string5;
bool auto_gf_SaveBackupStats_lp_force;

void gf_SaveBackupStats (int lp_player, string lp_string1, string lp_string2, string lp_string3, string lp_string4, string lp_string5, bool lp_force) {
    auto_gf_SaveBackupStats_lp_player = lp_player;
    auto_gf_SaveBackupStats_lp_string1 = lp_string1;
    auto_gf_SaveBackupStats_lp_string2 = lp_string2;
    auto_gf_SaveBackupStats_lp_string3 = lp_string3;
    auto_gf_SaveBackupStats_lp_string4 = lp_string4;
    auto_gf_SaveBackupStats_lp_string5 = lp_string5;
    auto_gf_SaveBackupStats_lp_force = lp_force;

    if (auto_gf_SaveBackupStats_Trigger == null) {
        auto_gf_SaveBackupStats_Trigger = TriggerCreate("auto_gf_SaveBackupStats_TriggerFunc");
    }

    TriggerExecute(auto_gf_SaveBackupStats_Trigger, false, false);
}

bool auto_gf_SaveBackupStats_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_SaveBackupStats_lp_player;
    string lp_string1 = auto_gf_SaveBackupStats_lp_string1;
    string lp_string2 = auto_gf_SaveBackupStats_lp_string2;
    string lp_string3 = auto_gf_SaveBackupStats_lp_string3;
    string lp_string4 = auto_gf_SaveBackupStats_lp_string4;
    string lp_string5 = auto_gf_SaveBackupStats_lp_string5;
    bool lp_force = auto_gf_SaveBackupStats_lp_force;

    // Variable Declarations
    int lv_playerLocalized;
    bank lv_backupbank;
    string lv_string;
    int lv_comparison;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_playerLocalized = lp_player;
    lv_string = "";

    // Implementation
    BankLoad("TheThingBackup", lp_player);
    lv_backupbank = BankLastCreated();
    lv_string = BankValueGetAsString(lv_backupbank, "0", "0");
    lv_string = gf_DecryptString(lv_string);
    lv_comparison = gf_ExtractIntegerfromSavecode("GP", lv_string);
    if (((lv_comparison < gv_gPGamesPlayed[lp_player]) || (lp_force == true))) {
        gf_TellDrDebug(("Stats - " + "Player " + IntToString(lv_playerLocalized) + " will backup stats."));
        BankValueSetFromString(lv_backupbank, "0", "0", lp_string1);
        BankValueSetFromString(lv_backupbank, "1", "0", lp_string2);
        BankValueSetFromString(lv_backupbank, "2", "0", lp_string3);
        BankValueSetFromString(lv_backupbank, "3", "0", lp_string4);
        BankValueSetFromString(lv_backupbank, "4", "0", lp_string5);
        BankSave(lv_backupbank);
    }
    else {
        gf_TellDrDebug(("Stats - " + "Player " + IntToString(lv_playerLocalized) + " will NOT backup stats."));
    }
    return true;
}

void gf_LoadBackupStats (int lp_player) {
    // Variable Declarations
    bank lv_backupbank;
    string lv_string;
    string lv_string2;
    string lv_string3;
    string lv_string4;
    int lv_comparison;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_string = "";
    lv_string2 = "";
    lv_string3 = "";
    lv_string4 = "";

    // Implementation
    UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaError, StringExternal("Param/Value/ECC0CE86"));
    BankLoad("TheThingBackup", lp_player);
    lv_backupbank = BankLastCreated();
    gf_TellDrDebug(("Stats - " + "Player " + IntToString(lp_player) + " backup bank is opened."));
    lv_string = BankValueGetAsString(lv_backupbank, "0", "0");
    lv_string2 = BankValueGetAsString(lv_backupbank, "1", "0");
    lv_string3 = BankValueGetAsString(lv_backupbank, "2", "0");
    lv_string4 = StringSub(BankValueGetAsString(lv_backupbank, "3", "0"), 1, 256);
    lv_string = gf_DecryptString(lv_string);
    lv_comparison = gf_ExtractIntegerfromSavecode("GP", lv_string);
    if ((lv_comparison > gv_gPGamesPlayed[lp_player])) {
        gf_TellDrDebug(("Stats - Player " + IntToString(lp_player) + " backup bank is valid for restoring."));
        if ((lv_string == "")) {
            gf_TellDrDebug(("Stats - Player " + IntToString(lp_player) + "'s backup bank is empty!"));
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaError, StringExternal("Param/Value/8A54E176"));
        }
        else {
            gf_TellDrDebug(("Stats - Player " + IntToString(lp_player) + " extracted backup data!"));
            lv_string2 = gf_DecryptString(lv_string2);
            lv_string3 = gf_DecryptString(lv_string3);
            gv_sVStatsVersion[lp_player] = gf_ExtractIntegerfromSavecode("SV", lv_string);
            gv_gPGamesPlayed[lp_player] = gf_ExtractIntegerfromSavecode("GP", lv_string);
            gv_gMGamesMinutes[lp_player] = gf_ExtractIntegerfromSavecode("GM", lv_string);
            gv_mPMarinePoints[lp_player] = gf_ExtractIntegerfromSavecode("MP", lv_string);
            gv_tPThingPoints[lp_player] = gf_ExtractIntegerfromSavecode("TP", lv_string);
            gv_gTGamesAsThing[lp_player] = gf_ExtractIntegerfromSavecode("GT", lv_string);
            gv_lGLastGameAsThing[lp_player] = gf_ExtractIntegerfromSavecode("LG", lv_string);
            gv_tRPThingRatingPoints[lp_player] = gf_ExtractIntegerfromSavecode("TRP", lv_string);
            gv_tRIThingRatingInstances[lp_player] = gf_ExtractIntegerfromSavecode("TRI", lv_string);
            gv_vPVicPoints[lp_player] = gf_ExtractIntegerfromSavecode("VP", lv_string);
            gv_pPPortraitsPurchased[lp_player] = gf_ExtractStringfromSavecode("PP", lv_string2);
            gv_pCPortraitCurrent[lp_player] = gf_ExtractIntegerfromSavecode("PC", lv_string2);
            gv_lBGPGamesPlayed[lp_player] = gf_ExtractIntegerfromSavecode("LBGP", lv_string3);
            gv_lBGMGamesMinutes[lp_player] = gf_ExtractIntegerfromSavecode("LBGM", lv_string3);
            gv_lBTPThingPoints[lp_player] = gf_ExtractIntegerfromSavecode("LBTP", lv_string3);
            gv_lBMPMarinePoints[lp_player] = gf_ExtractIntegerfromSavecode("LBMP", lv_string3);
            gv_lBGPGamesPlayedName[lp_player] = gf_ExtractStringfromSavecode("LBGPN", lv_string3);
            gv_lBGMGamesMinutesName[lp_player] = gf_ExtractStringfromSavecode("LBGMN", lv_string3);
            gv_lBTPThingPointsName[lp_player] = gf_ExtractStringfromSavecode("LBTPN", lv_string3);
            gv_lBMPMarinePointsName[lp_player] = gf_ExtractStringfromSavecode("LBMPN", lv_string3);
            gv_lBName[lp_player] = gf_ExtractStringfromSavecode("LBN", lv_string3);
            gv_pQProfileQuote[lp_player] = lv_string4;
            gf_TellDrDebug(("Stats - Player " + IntToString(lp_player) + " stats restoration completed."));
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaError, StringExternal("Param/Value/7C1C59D6"));
        }
    }
    else {
        gf_TellDrDebug(("Stats - Player " + IntToString(lp_player) + " backup bank is not valid for restoring."));
        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaError, StringExternal("Param/Value/0F11118B"));
    }
}

int gf_ConvertBitstreamtoInteger (string lp_bitstream) {
    // Variable Declarations
    int lv_integer;
    int lv_loop;
    int lv_offset;

    // Automatic Variable Declarations
    const int autoF554568A_ae = 1;
    const int autoF554568A_ai = -1;

    // Variable Initialization

    // Implementation
    lv_loop = StringLength(lp_bitstream);
    for ( ; ( (autoF554568A_ai >= 0 && lv_loop <= autoF554568A_ae) || (autoF554568A_ai < 0 && lv_loop >= autoF554568A_ae) ) ; lv_loop += autoF554568A_ai ) {
        if ((StringSub(lp_bitstream, lv_loop, lv_loop) == "1")) {
            lv_integer += Pow2I(lv_offset);
        }

        lv_offset += 1;
    }
    return lv_integer;
}

string gf_ConvertIntegertoBitstream (int lp_value) {
    // Variable Declarations
    int lv_value;
    string lv_string;
    int lv_loop;

    // Automatic Variable Declarations
    const int auto2FA9079A_ae = 19;
    const int auto2FA9079A_ai = 1;

    // Variable Initialization
    lv_value = lp_value;
    lv_string = "";

    // Implementation
    lv_loop = 1;
    for ( ; ( (auto2FA9079A_ai >= 0 && lv_loop <= auto2FA9079A_ae) || (auto2FA9079A_ai < 0 && lv_loop >= auto2FA9079A_ae) ) ; lv_loop += auto2FA9079A_ai ) {
        if ((ModI(lv_value, 2) == 1)) {
            lv_string = ("1" + lv_string);
        }
        else {
            lv_string = ("0" + lv_string);
        }
        lv_value = (lv_value / 2);
    }
    return lv_string;
}

string gf_SetaBooleantoBitstream (int lp_position, bool lp_value, string lp_bitstream) {
    // Automatic Variable Declarations
    // Implementation
    return (StringSub(lp_bitstream, 1, (lp_position - 1)) + IntToString(BoolToInt(lp_value)) + StringSub(lp_bitstream, (lp_position + 1), StringLength(lp_bitstream)));
}

bool gf_GetaBooleanfromBitstream (int lp_position, string lp_bitstream) {
    // Automatic Variable Declarations
    // Implementation
    if ((StringSub(lp_bitstream, lp_position, lp_position) == "1")) {
        return true;
    }
    else {
        return false;
    }
}

string gf_Hexidecimalize (int lp_integer) {
    // Variable Declarations
    int lv_integer;
    string lv_string;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_integer = lp_integer;
    lv_string = "";

    // Implementation
    if ((lv_integer > 1000000000)) {
        lv_string = "ERR: OVERFLOW";
    }
    else {
        if ((lv_integer != 0)) {
            while ((lv_integer != 0)) {
                if ((ModI(lv_integer, 16) > 9)) {
                    lv_string = (gf_GetHexLetter(ModI(lv_integer, 16)) + lv_string);
                }
                else {
                    lv_string = (IntToString(ModI(lv_integer, 16)) + lv_string);
                }
                lv_integer = (lv_integer / 16);
            }
        }
        else {
            lv_string = "0";
        }
    }
    return lv_string;
}

string gf_GetHexLetter (int lp_number) {
    // Automatic Variable Declarations
    int auto06377B54_val;

    // Implementation
    auto06377B54_val = lp_number;
    if (auto06377B54_val == 10) {
        return "a";
    }
    else if (auto06377B54_val == 11) {
        return "b";
    }
    else if (auto06377B54_val == 12) {
        return "c";
    }
    else if (auto06377B54_val == 13) {
        return "d";
    }
    else if (auto06377B54_val == 14) {
        return "e";
    }
    else if (auto06377B54_val == 15) {
        return "f";
    }
    else {
        return "x";
    }
}

int gf_Dehexidecimalize (string lp_hex) {
    // Variable Declarations
    int lv_integer;
    int lv_loop;
    int lv_offset;

    // Automatic Variable Declarations
    const int auto0054443E_ae = 1;
    const int auto0054443E_ai = -1;

    // Variable Initialization

    // Implementation
    lv_loop = StringLength(lp_hex);
    for ( ; ( (auto0054443E_ai >= 0 && lv_loop <= auto0054443E_ae) || (auto0054443E_ai < 0 && lv_loop >= auto0054443E_ae) ) ; lv_loop += auto0054443E_ai ) {
        lv_integer += (gf_GetHexValue(StringSub(lp_hex, lv_loop, lv_loop)) * PowI(16.0, lv_offset));
        lv_offset += 1;
    }
    return lv_integer;
}

int gf_GetHexValue (string lp_hex) {
    // Automatic Variable Declarations
    string autoB6A4D71A_val;

    // Implementation
    autoB6A4D71A_val = lp_hex;
    if (autoB6A4D71A_val == "a") {
        return 10;
    }
    else if (autoB6A4D71A_val == "b") {
        return 11;
    }
    else if (autoB6A4D71A_val == "c") {
        return 12;
    }
    else if (autoB6A4D71A_val == "d") {
        return 13;
    }
    else if (autoB6A4D71A_val == "e") {
        return 14;
    }
    else if (autoB6A4D71A_val == "f") {
        return 15;
    }
    else {
        return StringToInt(lp_hex);
    }
}

void gf_GenerateAdminCenter () {
    // Automatic Variable Declarations
    playergroup autoDD3A7EB4_g;
    int autoDD3A7EB4_var;

    // Implementation
    TriggerEnable(gt_AdminControlShow, true);
    TriggerEnable(gt_AdminControlHide, true);
    TriggerEnable(gt_AdminControlMouseEnter, true);
    TriggerEnable(gt_AdminControlMouseExit, true);
    TriggerEnable(gt_AdminControlHighlight, true);
    TriggerEnable(gt_AdminControlUnhighlight, true);
    DialogCreate(800, 1500, c_anchorTopLeft, 0, 0, true);
    DialogSetTransparency(DialogLastCreated(), 50.0);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    gv_adminDialog = DialogLastCreated();
    autoDD3A7EB4_g = PlayerGroupActive();
    autoDD3A7EB4_var = -1;
    while (true) {
        autoDD3A7EB4_var = PlayerGroupNextPlayer(autoDD3A7EB4_g, autoDD3A7EB4_var);
        if (autoDD3A7EB4_var < 0) { break; }
        libNtve_gf_CreateDialogItemButton(gv_adminDialog, 150, 25, c_anchorTopLeft, 30, (0 + (25 * autoDD3A7EB4_var)), StringToText(""), TextWithColor(PlayerName(autoDD3A7EB4_var), libNtve_gf_ConvertPlayerColorToColor(gv_thePlayerColor[autoDD3A7EB4_var])), "");
        gv_adminDialogUnitButton[autoDD3A7EB4_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(100,100,100), PlayerGroupAll());
    }
}

void gf_LoungeMusic () {
    // Variable Declarations
    fixed lv_volume;

    // Automatic Variable Declarations
    int auto6947222C_val;

    // Variable Initialization
    lv_volume = 35.0;

    // Implementation
    auto6947222C_val = RandomInt(1, 14);
    if (auto6947222C_val == 1) {
        SoundPlay(SoundLink("Jukebox_Music00", -1), PlayerGroupAll(), lv_volume, 0.0);
    }
    else if (auto6947222C_val == 2) {
        SoundPlay(SoundLink("Jukebox_Music01", -1), PlayerGroupAll(), lv_volume, 0.0);
    }
    else if (auto6947222C_val == 3) {
        SoundPlay(SoundLink("Jukebox_Music02", -1), PlayerGroupAll(), lv_volume, 0.0);
    }
    else if (auto6947222C_val == 4) {
        SoundPlay(SoundLink("Jukebox_Music03", -1), PlayerGroupAll(), lv_volume, 0.0);
    }
    else if (auto6947222C_val == 5) {
        SoundPlay(SoundLink("Jukebox_Music04", -1), PlayerGroupAll(), lv_volume, 0.0);
    }
    else if (auto6947222C_val == 6) {
        SoundPlay(SoundLink("Jukebox_Music05", -1), PlayerGroupAll(), lv_volume, 0.0);
    }
    else if (auto6947222C_val == 7) {
        SoundPlay(SoundLink("Jukebox_Music06", -1), PlayerGroupAll(), lv_volume, 0.0);
    }
    else if (auto6947222C_val == 8) {
        SoundPlay(SoundLink("Jukebox_Music07", -1), PlayerGroupAll(), lv_volume, 0.0);
    }
    else if (auto6947222C_val == 9) {
        SoundPlay(SoundLink("Jukebox_Music08", -1), PlayerGroupAll(), lv_volume, 0.0);
    }
    else if (auto6947222C_val == 10) {
        SoundPlay(SoundLink("Jukebox_Music09", -1), PlayerGroupAll(), lv_volume, 0.0);
    }
    else if (auto6947222C_val == 11) {
        SoundPlay(SoundLink("Jukebox_Music10", -1), PlayerGroupAll(), lv_volume, 0.0);
    }
    else if (auto6947222C_val == 12) {
        SoundPlay(SoundLink("Jukebox_Music11", -1), PlayerGroupAll(), lv_volume, 0.0);
    }
    else if (auto6947222C_val == 13) {
        SoundPlay(SoundLink("Jukebox_Music12", -1), PlayerGroupAll(), lv_volume, 0.0);
    }
    else if (auto6947222C_val == 14) {
        SoundPlay(SoundLink("Jukebox_Music13", -1), PlayerGroupAll(), lv_volume, 0.0);
    }
    else {
    }
    gv_music = SoundLastPlayed();
}

void gf_GenerateDeadLounge () {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(1100, 600, c_anchorBottomRight, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_perkdialog = DialogLastCreated();
    DialogSetFullscreen(DialogLastCreated(), true);
    gf_CreatePerkFrame();
    DialogCreate(1100, 600, c_anchorBottomRight, 0, 0, true);
    gv_deadDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeListBox);
    gv_deadChatItem = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 900, 275);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomRight, 0, 50);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.0, 50.0);
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringToText(""));
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeListBox);
    gv_deadAliveChatItem = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 900, 275);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomRight, 0, 50);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.0, 50.0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePulldown);
    gv_deadChatSelection = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, 0, 0);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 300, 50);
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/19EEF720"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/3CDE3366"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/1CB19F09"));
    DialogControlSelectItem(DialogControlLastCreated(), PlayerGroupAll(), 2);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20", PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeListBox);
    gv_deadChatOnlineItem = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 275);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, gv_deadChatItem, c_anchorLeft, -150, 0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.0, 50.0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeListBox);
    gv_deadAliveChatOnlineItem = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 275);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, gv_deadChatItem, c_anchorLeft, -150, 0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.0, 50.0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeCheckBox);
    gv_deadLoungeAutoFadeFollow = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 50, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, 180, 0);
    libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorBottom, 300, -5, StringExternal("Param/Value/4326C715"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize16", PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePulldown);
    gv_visualsChatDropList = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, 420, 0);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 250, 50);
    gf_AddLightingstoVisualDropList(DialogControlLastCreated());
}

void gf_GenerateHandleList () {
    // Variable Declarations
    int lv_blackbackground;

    // Automatic Variable Declarations
    playergroup auto7E261CD0_g;
    int auto7E261CD0_var;
    playergroup auto2FC9EB11_g;
    int auto2FC9EB11_var;

    // Variable Initialization
    lv_blackbackground = c_invalidDialogId;

    // Implementation
    TimerStart(gv_startTimer, 60.0, false, c_timeReal);
    DialogCreate(1200, 275, c_anchorBottomRight, 0, 0, true);
    gv_globalChatDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeListBox);
    gv_globalChatBox = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 900, 275);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomRight, 0, 10);
    gf_GlobalChatUpdate(StringExternal("Param/Value/E6D763AB"));
    gf_GlobalChatUpdate(StringExternal("Param/Value/2E9CF64B"));
    gf_GlobalChatUpdate(TextWithColor(StringExternal("Param/Value/50DD08BA"), Color(0.00, 100.00, 0.00)));
    auto7E261CD0_g = PlayerGroupAll();
    auto7E261CD0_var = -1;
    while (true) {
        auto7E261CD0_var = PlayerGroupNextPlayer(auto7E261CD0_g, auto7E261CD0_var);
        if (auto7E261CD0_var < 0) { break; }
        if ((gv_pCPortraitCurrent[auto7E261CD0_var] == 52) && (gv_vPVicPoints[auto7E261CD0_var] > 700)) {
            gf_GlobalChatUpdate((StringExternal("Param/Value/ED06DA81") + PlayerName(auto7E261CD0_var) + StringExternal("Param/Value/4156956B")));
        }

    }
    DialogSetVisible(gv_globalChatDialog, PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 300, 50, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/C446B41F"), IntToText(gv_requiredVotesKick), "");
    libNtve_gf_SaveDataTableValueDialogItem(true, "SkipButton", DialogControlLastCreated());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), gv_skipVoteRequired, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), gv_skipVoteRequired, PlayerGroupAll());
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePulldown);
    libNtve_gf_SaveDataTableValueDialogItem(true, "MapSelection", DialogControlLastCreated());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 300, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 0, 50);
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/A2A68CC1"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/15E09725"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/B85885A5"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/8B6A374E"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/AA56F018"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/6D40BB53"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/E3FB4B42"));
    DialogControlSelectItem(DialogControlLastCreated(), PlayerGroupAll(), 1);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePulldown);
    libNtve_gf_SaveDataTableValueDialogItem(true, "ThingSelection", DialogControlLastCreated());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 300, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 0, 100);
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/6DE3FE87"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/63234E75"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/B86BBA2B"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/E963A0AB"));
    DialogControlSelectItem(DialogControlLastCreated(), PlayerGroupAll(), 1);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePulldown);
    libNtve_gf_SaveDataTableValueDialogItem(true, "EvacSelection", DialogControlLastCreated());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 300, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 0, 150);
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/C2B798A5"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/FA082F13"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/D45982B6"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/665552ED"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/9671576A"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/73BB8F45"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/3FD78F0C"));
    DialogControlSelectItem(DialogControlLastCreated(), PlayerGroupAll(), 1);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePulldown);
    gv_rankingSelection = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 300, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 0, 200);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/457A4874"), PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    auto2FC9EB11_g = PlayerGroupActive();
    auto2FC9EB11_var = -1;
    while (true) {
        auto2FC9EB11_var = PlayerGroupNextPlayer(auto2FC9EB11_g, auto2FC9EB11_var);
        if (auto2FC9EB11_var < 0) { break; }
        if ((gv_gPGamesPlayed[auto2FC9EB11_var] > 0)) {
            gf_AddRankItemstoPulldownforPlayer(gv_rankingSelection, auto2FC9EB11_var, gv_ranking[auto2FC9EB11_var]);
            DialogControlSelectItem(gv_rankingSelection, PlayerGroupSingle(auto2FC9EB11_var), DialogControlGetItemCount(gv_rankingSelection, auto2FC9EB11_var));
            DialogControlSetVisible(gv_recordStatsButton, PlayerGroupSingle(auto2FC9EB11_var), false);
            gv_enableSaving[auto2FC9EB11_var] = true;
            DialogControlSetVisible(gv_rankingSelection, PlayerGroupSingle(auto2FC9EB11_var), true);
        }

    }
    gf_SkipCountdown();
}

trigger auto_gf_InitialVariables_Trigger = null;

void gf_InitialVariables () {
    if (auto_gf_InitialVariables_Trigger == null) {
        auto_gf_InitialVariables_Trigger = TriggerCreate("auto_gf_InitialVariables_TriggerFunc");
    }

    TriggerExecute(auto_gf_InitialVariables_Trigger, false, false);
}

bool auto_gf_InitialVariables_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_x;

    // Automatic Variable Declarations
    const int auto21139ADC_ae = 14;
    int auto21139ADC_var;
    playergroup autoD313D12F_g;
    int autoD313D12F_var;
    playergroup autoA340664B_g;
    int autoA340664B_var;

    // Variable Initialization

    // Implementation
    gf_InitializePlayerColorRandomization();
    gv_proximityRegion[1] = RegionFromId(10);
    gv_proximityRegion[2] = RegionFromId(11);
    gv_proximityRegion[3] = RegionFromId(12);
    gv_proximityRegion[4] = RegionFromId(13);
    gv_proximityRegion[5] = RegionFromId(14);
    gv_proximityRegion[6] = RegionFromId(15);
    gv_proximityRegion[7] = RegionFromId(16);
    gv_proximityRegion[8] = RegionFromId(17);
    gv_proximityRegion[9] = RegionFromId(18);
    gv_proximityRegion[10] = RegionFromId(19);
    gv_proximityRegion[11] = RegionFromId(20);
    gv_proximityRegion[12] = RegionFromId(21);
    gv_proximityRegion[13] = RegionFromId(22);
    gv_proximityRegion[14] = RegionFromId(23);
    auto21139ADC_var = 1;
    for ( ; auto21139ADC_var <= auto21139ADC_ae; auto21139ADC_var += 1 ) {
        RegionAddCircle(gv_proximityRegion[auto21139ADC_var], true, RegionGetCenter(gv_proximityRegion[auto21139ADC_var]), 16.0);
    }
    autoD313D12F_g = PlayerGroupActive();
    autoD313D12F_var = -1;
    while (true) {
        autoD313D12F_var = PlayerGroupNextPlayer(autoD313D12F_g, autoD313D12F_var);
        if (autoD313D12F_var < 0) { break; }
        gv_endGameState[autoD313D12F_var] = StringExternal("Param/Value/0A635B2B");
    }
    libNtve_gf_AddPlayerGroupToPlayerGroup(PlayerGroupActive(), gv_playing);
    autoA340664B_g = gv_playing;
    autoA340664B_var = -1;
    while (true) {
        autoA340664B_var = PlayerGroupNextPlayer(autoA340664B_g, autoA340664B_var);
        if (autoA340664B_var < 0) { break; }
        if (((PlayerType(autoA340664B_var) == c_playerTypeComputer) || (PlayerStatus(autoA340664B_var) == c_playerStatusLeft)) && (GameIsTestMap(false) == false)) {
            PlayerGroupRemove(gv_playing, autoA340664B_var);
        }

    }
    if ((PlayerGroupCount(gv_playing) < 7)) {
        gf_GlobalChatUpdate(TextWithColor((StringExternal("Param/Value/66D29FD8") + IntToText(PlayerGroupCount(gv_playing)) + StringExternal("Param/Value/8C8AF8D3")), Color(100.00, 50.20, 0.00)));
    }

    gv_revealregion[1] = RegionFromId(24);
    gv_revealregion[2] = RegionFromId(25);
    gv_revealregion[3] = RegionFromId(26);
    gv_revealregion[4] = RegionFromId(27);
    gv_revealregion[5] = RegionFromId(28);
    gv_revealregion[6] = RegionFromId(29);
    gv_revealregion[7] = RegionFromId(30);
    gv_revealregion[8] = RegionFromId(31);
    gv_revealregion[9] = RegionFromId(32);
    gv_revealregion[10] = RegionFromId(33);
    gv_revealregion[11] = RegionFromId(34);
    gv_revealregion[12] = RegionFromId(35);
    gv_revealregion[13] = RegionFromId(36);
    gv_revealregion[14] = RegionFromId(37);
    gv_revealregion[15] = RegionFromId(38);
    return true;
}

trigger auto_gf_InitialTweaks_Trigger = null;

void gf_InitialTweaks () {
    if (auto_gf_InitialTweaks_Trigger == null) {
        auto_gf_InitialTweaks_Trigger = TriggerCreate("auto_gf_InitialTweaks_TriggerFunc");
    }

    TriggerExecute(auto_gf_InitialTweaks_Trigger, false, false);
}

bool auto_gf_InitialTweaks_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto5A7D92AA_g;
    int auto5A7D92AA_var;

    // Implementation
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMissionTimePanel, false);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/MinimapPanel");
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, 0, 0);
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/MinimapPanel/PingButton");
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, -500, -50);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/MinimapPanel/Minimap");
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, 0, 0);
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/MinimapPanel/TerrainButton");
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, -500, -50);
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/MinimapPanel/ColorButton");
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, -500, -50);
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/MenuBar/SocialButton");
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, -500, -50);
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/MenuBar/MenuButton");
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, -500, -50);
    DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer/FullscreenUpperContainer/MenuBar/MenuBarBackgroundImage");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.01, 100.0);
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/MenuBar/HelpButton");
    UIUnitColorStyleOverride(PlayerGroupAll(), c_unitColorStyleNormal);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogPauseButton, false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnitAlly", false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnitAlly_Prot", false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnitAlly_Terr", false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnitAlly_Zerg", false);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    UISetDragSelectEnabled(PlayerGroupAll(), false);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    PingSetPlayerPingsShown(PlayerGroupAll(), false);
    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_Silence", c_soundtrackCueAny, c_soundtrackIndexAny);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 0.0, 3.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 0.0, 3.0);
    gf_DeadChatUpdate(StringExternal("Param/Value/789ADA3C"), "", 0);
    DialogControlSelectItem(gv_deadChatItem, PlayerGroupAll(), 2);
    auto5A7D92AA_g = PlayerGroupActive();
    auto5A7D92AA_var = -1;
    while (true) {
        auto5A7D92AA_var = PlayerGroupNextPlayer(auto5A7D92AA_g, auto5A7D92AA_var);
        if (auto5A7D92AA_var < 0) { break; }
        CameraLockInput(auto5A7D92AA_var, true);
        PlayerOptionOverride(auto5A7D92AA_var, "simplecommandcard", "0");
        PlayerOptionOverride(auto5A7D92AA_var, "selectuncontrolable", "0");
        PlayerOptionOverride(auto5A7D92AA_var, "teamcoloredlifestatus", "0");
        PlayerOptionOverride(auto5A7D92AA_var, "gametooltips", "1");
        VisExploreArea(auto5A7D92AA_var, RegionEntireMap(), true, false);
        PlayerSetState(auto5A7D92AA_var, c_playerStateShowWorldTip, false);
    }
    return true;
}

trigger auto_gf_InitialHandles_Trigger = null;

void gf_InitialHandles () {
    if (auto_gf_InitialHandles_Trigger == null) {
        auto_gf_InitialHandles_Trigger = TriggerCreate("auto_gf_InitialHandles_TriggerFunc");
    }

    TriggerExecute(auto_gf_InitialHandles_Trigger, false, false);
}

bool auto_gf_InitialHandles_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loadingscreen;
    int lv_loadingbar;

    // Automatic Variable Declarations
    int autoDBC5047E_ae;
    int autoDBC5047E_var;
    int auto56B2739E_ae;
    int auto56B2739E_var;
    playergroup auto8A452C72_g;
    int auto8A452C72_var;
    playergroup auto12204D65_g;
    int auto12204D65_var;

    // Variable Initialization
    lv_loadingscreen = c_invalidDialogId;
    lv_loadingbar = c_invalidDialogControlId;

    // Implementation
    DialogCreate(1600, 800, c_anchorTop, 0, 125, true);
    lv_loadingscreen = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1600, 800, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 1600, 200, c_anchorCenter, 0, 0, StringExternal("Param/Value/80B71E2E"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize64Bold", PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (10 + (50 * PlayerGroupCount(gv_playing))), 60, c_anchorBottom, 0, 95, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 0, 50, c_anchorBottom, 0, 100, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100.00, 0.00, 0.00), c_triggerBlendModeNormal);
    lv_loadingbar = DialogControlLastCreated();
    TriggerEnable(gt_PlayerCardSelection, false);
    autoDBC5047E_ae = PlayerGroupCount(gv_playing);
    autoDBC5047E_var = 1;
    for ( ; autoDBC5047E_var <= autoDBC5047E_ae; autoDBC5047E_var += 1 ) {
        DataTableSetBool(true, (IntToString(autoDBC5047E_var) + "ShowHide"), false);
        DataTableSetBool(true, (IntToString(autoDBC5047E_var) + "ShowHideA"), false);
        if ((autoDBC5047E_var <= 7)) {
            gf_GeneratePlayerCard(PlayerGroupPlayer(gv_playing, autoDBC5047E_var), false, false, ((autoDBC5047E_var - 4) * 235), 150, c_anchorTop, "handlelist");
        }
        else if ((autoDBC5047E_var >= 8)) {
            gf_GeneratePlayerCard(PlayerGroupPlayer(gv_playing, autoDBC5047E_var), false, false, ((autoDBC5047E_var - 11) * 235), 525, c_anchorTop, "handlelist");
        }
        DialogSetVisible(gv_playerCardDialog[PlayerGroupPlayer(gv_playing, autoDBC5047E_var)], PlayerGroupAll(), false);
        DialogControlSetSize(lv_loadingbar, PlayerGroupAll(), (50 * autoDBC5047E_var), 50);
        Wait(0.1, c_timeReal);
    }
    TriggerEnable(gt_PlayerCardSelection, true);
    DialogDestroy(lv_loadingscreen);
    auto56B2739E_ae = PlayerGroupCount(gv_playing);
    auto56B2739E_var = 1;
    for ( ; auto56B2739E_var <= auto56B2739E_ae; auto56B2739E_var += 1 ) {
        DialogSetVisible(gv_playerCardDialog[PlayerGroupPlayer(gv_playing, auto56B2739E_var)], PlayerGroupAll(), true);
    }
    DialogCreate(1600, 800, c_anchorTop, 0, 125, true);
    lv_loadingscreen = DialogLastCreated();
    DataTableSetDialog(true, "loadingscreen", lv_loadingscreen);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1600, 800, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 1600, 800, c_anchorCenter, 0, 0, StringExternal("Param/Value/1C13E084"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize36", PlayerGroupAll());
    DialogSetTransparency(DialogLastCreated(), 8.0);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 800, 100, c_anchorCenter, 0, 250, StringToText(""), StringExternal("Param/Value/6BAF2948"), "");
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize36", PlayerGroupAll());
    libNtve_gf_SaveDataTableValueDialogItem(true, "HandleScreenTutorialButton", DialogControlLastCreated());
    while (!((TriggerGetExecCount(gt_InitialIntro) > 0))) {
        Wait(0.1, c_timeReal);
    }
    TriggerEnable(gt_PlayerCardSelection, false);
    DialogSetVisible(lv_loadingscreen, PlayerGroupActive(), false);
    DialogSetVisible(gv_perkdialog, PlayerGroupActive(), false);
    DataTableValueRemove(true, "HandleScreenTutorialButton");
    auto8A452C72_g = PlayerGroupActive();
    auto8A452C72_var = -1;
    while (true) {
        auto8A452C72_var = PlayerGroupNextPlayer(auto8A452C72_g, auto8A452C72_var);
        if (auto8A452C72_var < 0) { break; }
        if ((gv_gPGamesPlayed[auto8A452C72_var] <= 1)) {
            DialogDestroy(DataTableGetDialog(true, ("Tutorial" + IntToString(auto8A452C72_var))));
        }

    }
    auto12204D65_g = PlayerGroupAll();
    auto12204D65_var = -1;
    while (true) {
        auto12204D65_var = PlayerGroupNextPlayer(auto12204D65_g, auto12204D65_var);
        if (auto12204D65_var < 0) { break; }
        if ((gv_playerCardDialog[auto12204D65_var] != c_invalidDialogId)) {
            DialogSetVisible(gv_playerCardDialog[auto12204D65_var], PlayerGroupAll(), false);
        }

    }
    DialogSetVisible(gv_globalChatDialog, PlayerGroupAll(), false);
    return true;
}

trigger auto_gf_InitialInfoboard_Trigger = null;

void gf_InitialInfoboard () {
    if (auto_gf_InitialInfoboard_Trigger == null) {
        auto_gf_InitialInfoboard_Trigger = TriggerCreate("auto_gf_InitialInfoboard_TriggerFunc");
    }

    TriggerExecute(auto_gf_InitialInfoboard_Trigger, false, false);
}

bool auto_gf_InitialInfoboard_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto65106660_ae = 7;
    int auto65106660_var;

    // Implementation
    DialogCreate(1024, 1024, c_anchorTopLeft, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gf_InitialAnnouncement(DialogLastCreated());
    Wait(3.5, c_timeReal);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 20, 75, c_anchorTop, 0, 50, StringToText(""), StringToText(""), "Assets\\Textures\\btn-border-protoss-transportslot-filled-8slots.dds");
    gv_optInButton = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-border-protoss-transportslot-filled-8slots.dds", PlayerGroupAll());
    auto65106660_var = 1;
    for ( ; auto65106660_var <= auto65106660_ae; auto65106660_var += 1 ) {
        Wait(0.01, c_timeReal);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), (auto65106660_var * 88), 75);
    }
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/6A538845"), PlayerGroupAll());
    TriggerEnable(gt_OptInDetect, true);
    TriggerEnable(gt_OptInDetect2, true);
    while (!((TriggerGetExecCount(gt_InitialIntro) > 0))) {
        Wait(0.25, c_timeReal);
    }
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    return true;
}

trigger auto_gf_InitialAnnouncement_Trigger = null;
int auto_gf_InitialAnnouncement_lp_infoboard;

void gf_InitialAnnouncement (int lp_infoboard) {
    auto_gf_InitialAnnouncement_lp_infoboard = lp_infoboard;

    if (auto_gf_InitialAnnouncement_Trigger == null) {
        auto_gf_InitialAnnouncement_Trigger = TriggerCreate("auto_gf_InitialAnnouncement_TriggerFunc");
    }

    TriggerExecute(auto_gf_InitialAnnouncement_Trigger, false, false);
}

bool auto_gf_InitialAnnouncement_TriggerFunc (bool testConds, bool runActions) {
    int lp_infoboard = auto_gf_InitialAnnouncement_lp_infoboard;

    // Variable Declarations
    int lv_latestplayer;
    string lv_post;
    string lv_vip;

    // Automatic Variable Declarations
    playergroup auto9B7CCA74_g;
    int auto9B7CCA74_var;
    playergroup auto73A2B286_g;
    int auto73A2B286_var;

    // Variable Initialization
    lv_latestplayer = gf_FindLatestVBIDatafromPlayers(PlayerGroupActive(), "string", "VBI");
    lv_post = gf_RetrieveVBIDataCLLforPlayerfromBank(gv_settingsBank[lv_latestplayer], "string", "VBI");
    lv_vip = "";

    // Implementation
    gf_TellDrDebug(("VBI - latestplayer: " + IntToString(lv_latestplayer)));
    gf_TellDrDebug(("VBI - post: " + lv_post));
    libNtve_gf_CreateDialogItemButton(lp_infoboard, 450, 200, c_anchorBottomLeft, 50, 50, StringToText(""), StringExternal("Param/Value/B6143005"), "");
    gf_Adddialogitemevent(gt_ShowPerkFrame, DialogControlLastCreated(), c_triggerControlEventTypeClick);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 450, 200);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, 50, 50);
    DialogControlCreate(lp_infoboard, c_triggerControlTypeListBox);
    libNtve_gf_SaveDataTableValueDialogItem(true, "Announcements", DialogControlLastCreated());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 450, 200);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, 50, 50);
    if ((lv_post == "No string found!")) {
        gf_AddmultilinetexttoListbox(DialogControlLastCreated(), "The Thing [Revival] has been merged with The Thing -Updated-! Credits: Deathbringer", 45, PlayerGroupAll());
    }
    else {
        gv_latestVBIData = lv_post;
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringToText(gf_FormatDate(gf_ExtractDateofString(lv_post))));
        gf_AddmultilinetexttoListbox(DialogControlLastCreated(), gf_ExtractSourceofString(lv_post), 45, PlayerGroupAll());
        auto9B7CCA74_g = PlayerGroupActive();
        auto9B7CCA74_var = -1;
        while (true) {
            auto9B7CCA74_var = PlayerGroupNextPlayer(auto9B7CCA74_g, auto9B7CCA74_var);
            if (auto9B7CCA74_var < 0) { break; }
            BankValueSetFromString(gv_settingsBank[auto9B7CCA74_var], "VBI", "string", BankValueGetAsString(gv_settingsBank[lv_latestplayer], "VBI", "string"));
            BankSave(gv_settingsBank[auto9B7CCA74_var]);
        }
        if ((StringContains(lv_post, "VIP: ", c_stringAnywhere, c_stringCase) == true)) {
            lv_vip = StringSub(lv_post, (StringFind(lv_post, "VIP: ", c_stringCase) + StringLength("VIP: ")), StringLength(lv_post));
            auto73A2B286_g = PlayerGroupActive();
            auto73A2B286_var = -1;
            while (true) {
                auto73A2B286_var = PlayerGroupNextPlayer(auto73A2B286_g, auto73A2B286_var);
                if (auto73A2B286_var < 0) { break; }
                if ((StringContains(lv_vip, PlayerHandle(auto73A2B286_var), c_stringAnywhere, c_stringNoCase) == true)) {
                    gv_kicked[auto73A2B286_var] = true;
                }

            }
            gf_CheckBlacklist();
        }

    }
    libNtve_gf_CreateDialogItemButton(lp_infoboard, 450, 50, c_anchorTopLeft, 50, 50, StringToText(""), StringExternal("Param/Value/105E8089"), "");
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, libNtve_gf_ValueFromDataTableDialogItem(true, "Announcements"), c_anchorTop, 0, 0);
    gf_Adddialogitemevent(gt_Showhideannouncements, DialogControlLastCreated(), c_triggerControlEventTypeClick);
    gf_TellDrDebug(("VBI - post saved."));
    return true;
}

trigger auto_gf_InitialActions_Trigger = null;

void gf_InitialActions () {
    if (auto_gf_InitialActions_Trigger == null) {
        auto_gf_InitialActions_Trigger = TriggerCreate("auto_gf_InitialActions_TriggerFunc");
    }

    TriggerExecute(auto_gf_InitialActions_Trigger, false, false);
}

bool auto_gf_InitialActions_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoF54B7834_g;
    int autoF54B7834_var;
    string auto7C848DD3_val;
    string auto4020ADD8_val;
    string auto87B23412_val;
    playergroup auto3194C3EA_g;
    int auto3194C3EA_var;

    // Implementation
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    autoF54B7834_g = PlayerGroupActive();
    autoF54B7834_var = -1;
    while (true) {
        autoF54B7834_var = PlayerGroupNextPlayer(autoF54B7834_g, autoF54B7834_var);
        if (autoF54B7834_var < 0) { break; }
        if ((gv_gPGamesPlayed[autoF54B7834_var] > 1)) {
            auto7C848DD3_val = GameAttributePlayerValue("1", autoF54B7834_var);
            if (auto7C848DD3_val == "0004") {
                DialogControlSelectItem(libNtve_gf_ValueFromDataTableDialogItem(true, "ThingSelection"), PlayerGroupSingle(autoF54B7834_var), 1);
            }
            else if (auto7C848DD3_val == "0003") {
                DialogControlSelectItem(libNtve_gf_ValueFromDataTableDialogItem(true, "ThingSelection"), PlayerGroupSingle(autoF54B7834_var), 2);
            }
            else if (auto7C848DD3_val == "0001") {
                DialogControlSelectItem(libNtve_gf_ValueFromDataTableDialogItem(true, "ThingSelection"), PlayerGroupSingle(autoF54B7834_var), 3);
            }
            else if (auto7C848DD3_val == "0002") {
                DialogControlSelectItem(libNtve_gf_ValueFromDataTableDialogItem(true, "ThingSelection"), PlayerGroupSingle(autoF54B7834_var), 4);
            }
            else {
                DialogControlSelectItem(libNtve_gf_ValueFromDataTableDialogItem(true, "ThingSelection"), PlayerGroupSingle(autoF54B7834_var), 1);
            }
        }
        else {
            DialogControlSelectItem(libNtve_gf_ValueFromDataTableDialogItem(true, "ThingSelection"), PlayerGroupSingle(autoF54B7834_var), 3);
        }
        auto4020ADD8_val = GameAttributePlayerValue("2", autoF54B7834_var);
        if (auto4020ADD8_val == "0006") {
            DialogControlSelectItem(libNtve_gf_ValueFromDataTableDialogItem(true, "MapSelection"), PlayerGroupSingle(autoF54B7834_var), 1);
        }
        else if (auto4020ADD8_val == "0001") {
            DialogControlSelectItem(libNtve_gf_ValueFromDataTableDialogItem(true, "MapSelection"), PlayerGroupSingle(autoF54B7834_var), 2);
        }
        else if (auto4020ADD8_val == "0002") {
            DialogControlSelectItem(libNtve_gf_ValueFromDataTableDialogItem(true, "MapSelection"), PlayerGroupSingle(autoF54B7834_var), 3);
        }
        else if (auto4020ADD8_val == "0003") {
            DialogControlSelectItem(libNtve_gf_ValueFromDataTableDialogItem(true, "MapSelection"), PlayerGroupSingle(autoF54B7834_var), 4);
        }
        else if (auto4020ADD8_val == "0004") {
            DialogControlSelectItem(libNtve_gf_ValueFromDataTableDialogItem(true, "MapSelection"), PlayerGroupSingle(autoF54B7834_var), 5);
        }
        else if (auto4020ADD8_val == "0005") {
            DialogControlSelectItem(libNtve_gf_ValueFromDataTableDialogItem(true, "MapSelection"), PlayerGroupSingle(autoF54B7834_var), 6);
        }
        else if (auto4020ADD8_val == "0007") {
            DialogControlSelectItem(libNtve_gf_ValueFromDataTableDialogItem(true, "MapSelection"), PlayerGroupSingle(autoF54B7834_var), 7);
        }
        else {
            DialogControlSelectItem(libNtve_gf_ValueFromDataTableDialogItem(true, "MapSelection"), PlayerGroupSingle(autoF54B7834_var), 1);
        }
        auto87B23412_val = GameAttributePlayerValue("4", autoF54B7834_var);
        if (auto87B23412_val == "0007") {
            DialogControlSelectItem(libNtve_gf_ValueFromDataTableDialogItem(true, "EvacSelection"), PlayerGroupSingle(autoF54B7834_var), 1);
        }
        else if (auto87B23412_val == "0004") {
            DialogControlSelectItem(libNtve_gf_ValueFromDataTableDialogItem(true, "EvacSelection"), PlayerGroupSingle(autoF54B7834_var), 2);
        }
        else if (auto87B23412_val == "0005") {
            DialogControlSelectItem(libNtve_gf_ValueFromDataTableDialogItem(true, "EvacSelection"), PlayerGroupSingle(autoF54B7834_var), 3);
        }
        else if (auto87B23412_val == "0003") {
            DialogControlSelectItem(libNtve_gf_ValueFromDataTableDialogItem(true, "EvacSelection"), PlayerGroupSingle(autoF54B7834_var), 4);
        }
        else if (auto87B23412_val == "0002") {
            DialogControlSelectItem(libNtve_gf_ValueFromDataTableDialogItem(true, "EvacSelection"), PlayerGroupSingle(autoF54B7834_var), 5);
        }
        else if (auto87B23412_val == "0001") {
            DialogControlSelectItem(libNtve_gf_ValueFromDataTableDialogItem(true, "EvacSelection"), PlayerGroupSingle(autoF54B7834_var), 6);
        }
        else if (auto87B23412_val == "0006") {
            DialogControlSelectItem(libNtve_gf_ValueFromDataTableDialogItem(true, "EvacSelection"), PlayerGroupSingle(autoF54B7834_var), 7);
        }
        else {
            DialogControlSelectItem(libNtve_gf_ValueFromDataTableDialogItem(true, "EvacSelection"), PlayerGroupSingle(autoF54B7834_var), 1);
        }
    }
    TriggerEnable(gt_SelectLightingVisuals, false);
    auto3194C3EA_g = PlayerGroupActive();
    auto3194C3EA_var = -1;
    while (true) {
        auto3194C3EA_var = PlayerGroupNextPlayer(auto3194C3EA_g, auto3194C3EA_var);
        if (auto3194C3EA_var < 0) { break; }
        DialogControlSelectItem(gv_visualsChatDropList, PlayerGroupSingle(auto3194C3EA_var), gv_visualsSelection[auto3194C3EA_var]);
    }
    return true;
}

void gf_InitialFunctionRooms () {
    // Variable Declarations
    int[4] lv_taken;
    int lv_rand;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_rand = RandomInt(1, 5);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "FusionCore", c_unitCreateIgnorePlacement, 0, gf_GetFunctionRoomfromIndex(lv_rand, gv_currentStation, ge_FacilityType_Generator));
    gv_fusionCore = UnitLastCreated();
    lv_taken[1] = lv_rand;
    while ((lv_taken[1] == lv_rand)) {
        lv_rand = RandomInt(1, 5);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "HiveMindEmulator", c_unitCreateIgnorePlacement, 0, gf_GetFunctionRoomfromIndex(lv_rand, gv_currentStation, ge_FacilityType_CommunicationsTower));
    gv_commsLink = UnitLastCreated();
    lv_taken[2] = lv_rand;
    while (((lv_taken[1] == lv_rand) || (lv_taken[2] == lv_rand))) {
        lv_rand = RandomInt(1, 5);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "BeaconRelay", c_unitCreateIgnorePlacement, 0, gf_GetFunctionRoomfromIndex(lv_rand, gv_currentStation, ge_FacilityType_BeaconRelay));
    gv_beaconRelay = UnitLastCreated();
    TriggerEnable(gt_BeaconRelayBoost, true);
    lv_taken[3] = lv_rand;
    while (((lv_taken[1] == lv_rand) || (lv_taken[2] == lv_rand) || (lv_taken[3] == lv_rand))) {
        lv_rand = RandomInt(1, 5);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "FuelStation", c_unitCreateIgnorePlacement, 0, gf_GetFunctionRoomfromIndex(lv_rand, gv_currentStation, ge_FacilityType_FuelStation));
    gv_fuelStation = UnitLastCreated();
    TriggerEnable(gt_FuelStationProvision, true);
}

void gf_CreateMarineforPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    gf_ClearPlayerPerks(lp_player);
    gf_PlayerPerkUpgrade(lp_player);
    PlayerModifyPropertyInt(lp_player, c_playerPropVespene, c_playerPropOperSetTo, 300);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine2", 0, lp_player, gf_FindProperRandomPointforSpawninRegion(gv_selectedRegion));
    gv_unit[lp_player] = UnitLastCreated();
    UnitSelect(UnitLastCreated(), lp_player, true);
    UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
    PlayerGroupAdd(gv_marines, lp_player);
    TextTagCreate(StringToText(""), 24, UnitGetPosition(gv_unit[lp_player]), 1.0, true, false, PlayerGroupAll());
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 100.00));
    TextTagAttachToUnit(TextTagLastCreated(), UnitLastCreated(), 1.0);
    TextTagSetTextShadow(TextTagLastCreated(), true);
    TextTagSetMaxSize(TextTagLastCreated(), 60.0, 2.0);
    gv_chatTextLabel[lp_player] = TextTagLastCreated();
    gv_unitPlayerColor[lp_player] = libNtve_gf_ConvertPlayerColorToColor(gv_thePlayerColor[lp_player]);
    UnitSetTeamColorIndex(UnitLastCreated(), gv_thePlayerColor[lp_player]);
    UnitAbilityShow(UnitLastCreated(), "LockDoor2", false);
    UnitAbilityShow(UnitLastCreated(), "ToggleFlamethrower", false);
    UnitAbilityShow(UnitLastCreated(), "PsiStorm2", false);
    UnitAbilityShow(UnitLastCreated(), "ThrowMolotov", false);
    RegionAttachToUnit(gv_proximityRegion[lp_player], UnitLastCreated(), Point(0.0, 0.0));
    gf_GenerateUnitTagforPlayer(lp_player);
    gf_CreateVicBlipforPlayer(UnitLastCreated());
}

void gf_ConvertMarinetoThingforPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    gv_gTGamesAsThing[lp_player] = (gv_gTGamesAsThing[lp_player] + 1);
    gv_consumedByThing[lp_player] = true;
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "Isthing", 1);
    gv_unit[lp_player] = gv_unit[lp_player];
    TextTagAttachToUnit(gv_chatTextLabel[lp_player], gv_unit[lp_player], 1.0);
    TextTagAttachToUnit(gv_unitTag[lp_player], gv_unit[lp_player], 0.0);
    UnitSetTeamColorIndex(gv_unit[lp_player], gv_thePlayerColor[lp_player]);
    UnitSelect(gv_unit[lp_player], lp_player, true);
    UnitSetState(gv_unit[lp_player], c_unitStateSelectable, false);
    UnitAbilityShow(gv_unit[lp_player], "LockDoor2", false);
    UnitAbilityShow(gv_unit[lp_player], "ToggleFlamethrower", false);
    UnitAbilityShow(gv_unit[lp_player], "PsiStorm2", false);
    UnitAbilityShow(gv_unit[lp_player], "ThrowMolotov", false);
    UnitAbilityShow(gv_unit[lp_player], "TransformtoThing", true);
    gf_CreateVicBlipforPlayer(gv_unit[lp_player]);
    RegionAttachToUnit(gv_proximityRegion[lp_player], gv_unit[lp_player], Point(0.0, 0.0));
    PlayerGroupAdd(gv_things, lp_player);
    PlayerGroupRemove(gv_marines, lp_player);
    gv_theThingMaxLife = (gv_theThingMaxLife * (1.0 + (0.13 * IntToFixed(PlayerGroupCount(gv_marines)))));
    gv_lastConsumedPlayer = lp_player;
    gv_lastUsedColorPlayer = lp_player;
    TechTreeBehaviorAllow(lp_player, "Frenzy2", false);
    gf_LastStandFrenzy(lp_player);
}

void gf_RemoveAIandLeftPlayersfromPlayerGroup (playergroup lp_playerGroup) {
    // Automatic Variable Declarations
    playergroup autoC72661A9_g;
    int autoC72661A9_var;

    // Implementation
    autoC72661A9_g = lp_playerGroup;
    autoC72661A9_var = -1;
    while (true) {
        autoC72661A9_var = PlayerGroupNextPlayer(autoC72661A9_g, autoC72661A9_var);
        if (autoC72661A9_var < 0) { break; }
        if ((PlayerStatus(autoC72661A9_var) == c_playerStatusLeft)) {
            PlayerGroupRemove(lp_playerGroup, autoC72661A9_var);
            PlayerGroupRemove(gv_optedIn, autoC72661A9_var);
            PlayerGroupAdd(gv_left, autoC72661A9_var);
        }

    }
}

int gf_RandomPlayerfromPlayers (playergroup lp_playerGroup) {
    // Automatic Variable Declarations
    // Implementation
    return PlayerGroupPlayer(lp_playerGroup, RandomInt(1, PlayerGroupCount(lp_playerGroup)));
}

string gf_ConvertPlayerColortoString (int lp_playerColor) {
    // Variable Declarations
    string lv_color;

    // Automatic Variable Declarations
    int auto2CD68025_val;

    // Variable Initialization
    lv_color = "";

    // Implementation
    auto2CD68025_val = lp_playerColor;
    if (auto2CD68025_val == 0) {
        lv_color = "White";
    }
    else if (auto2CD68025_val == 1) {
        lv_color = "Blue";
    }
    else if (auto2CD68025_val == 2) {
        lv_color = "Green";
    }
    else if (auto2CD68025_val == 3) {
        lv_color = "Red";
    }
    else if (auto2CD68025_val == 4) {
        lv_color = "Light Blue";
    }
    else if (auto2CD68025_val == 5) {
        lv_color = "Light Green";
    }
    else if (auto2CD68025_val == 6) {
        lv_color = "Light Red";
    }
    else if (auto2CD68025_val == 7) {
        lv_color = "Dark Blue";
    }
    else if (auto2CD68025_val == 8) {
        lv_color = "Dark Green";
    }
    else if (auto2CD68025_val == 9) {
        lv_color = "Dark Red";
    }
    else if (auto2CD68025_val == 10) {
        lv_color = "Yellow";
    }
    else if (auto2CD68025_val == 11) {
        lv_color = "Light Yellow";
    }
    else if (auto2CD68025_val == 12) {
        lv_color = "Dark Yellow";
    }
    else if (auto2CD68025_val == 13) {
        lv_color = "Purple";
    }
    else if (auto2CD68025_val == 14) {
        lv_color = "Gray";
    }
    else if (auto2CD68025_val == 15) {
        lv_color = "Black";
    }
    else {
    }
    return lv_color;
}

void gf_InitializePlayerColorRandomization () {
    // Automatic Variable Declarations
    // Implementation
    gf_RandomizePlayerColors();
    gf_UpdateAbilityButtonColors();
}

void gf_RandomizePlayerColors () {
    // Variable Declarations
    int lv_pickedplayer;
    playergroup lv_playerpool;
    playergroup lv_colorpool;
    int lv_randomplayer;

    // Automatic Variable Declarations
    playergroup auto0DDEFF3E_g;

    // Variable Initialization
    lv_playerpool = PlayerGroupAll();
    lv_colorpool = PlayerGroupAll();

    // Implementation
    PlayerGroupRemove(lv_playerpool, 0);
    PlayerGroupRemove(lv_playerpool, 15);
    PlayerGroupRemove(lv_colorpool, 0);
    PlayerGroupRemove(lv_colorpool, 15);
    auto0DDEFF3E_g = lv_playerpool;
    lv_pickedplayer = -1;
    while (true) {
        lv_pickedplayer = PlayerGroupNextPlayer(auto0DDEFF3E_g, lv_pickedplayer);
        if (lv_pickedplayer < 0) { break; }
        lv_randomplayer = gf_RandomPlayerfromPlayers(lv_colorpool);
        gv_thePlayerColor[lv_pickedplayer] = PlayerGetColorIndex(lv_randomplayer, true);
        PlayerGroupRemove(lv_colorpool, lv_randomplayer);
    }
}

trigger auto_gf_MapSelection_Trigger = null;

void gf_MapSelection () {
    if (auto_gf_MapSelection_Trigger == null) {
        auto_gf_MapSelection_Trigger = TriggerCreate("auto_gf_MapSelection_TriggerFunc");
    }

    TriggerExecute(auto_gf_MapSelection_Trigger, false, false);
}

bool auto_gf_MapSelection_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int[6] lv_station;
    int lv_pickedStation;
    int lv_highestValue;

    // Automatic Variable Declarations
    playergroup autoC19FCE16_g;
    int autoC19FCE16_var;
    int auto30A4BB24_val;
    const int auto1A2B044A_ae = 5;
    int auto1A2B044A_var;

    // Variable Initialization

    // Implementation
    autoC19FCE16_g = gv_playing;
    autoC19FCE16_var = -1;
    while (true) {
        autoC19FCE16_var = PlayerGroupNextPlayer(autoC19FCE16_g, autoC19FCE16_var);
        if (autoC19FCE16_var < 0) { break; }
        auto30A4BB24_val = DialogControlGetSelectedItem(libNtve_gf_ValueFromDataTableDialogItem(true, "MapSelection"), autoC19FCE16_var);
        if (auto30A4BB24_val == 2) {
            lv_station[0] += 1;
        }
        else if (auto30A4BB24_val == 3) {
            lv_station[1] += 1;
        }
        else if (auto30A4BB24_val == 4) {
            lv_station[2] += 1;
        }
        else if (auto30A4BB24_val == 5) {
            lv_station[3] += 1;
        }
        else if (auto30A4BB24_val == 6) {
            lv_station[4] += 1;
        }
        else if (auto30A4BB24_val == 7) {
            lv_station[5] += 1;
        }
        else {
        }
    }
    auto1A2B044A_var = 0;
    for ( ; auto1A2B044A_var <= auto1A2B044A_ae; auto1A2B044A_var += 1 ) {
        if ((lv_highestValue < lv_station[auto1A2B044A_var])) {
            lv_highestValue = lv_station[auto1A2B044A_var];
            lv_pickedStation = auto1A2B044A_var;
        }

    }
    if ((lv_pickedStation == 0)) {
        lv_pickedStation = RandomInt(1, 5);
    }

    if ((lv_pickedStation == 1)) {
        RegionPlayableMapSet(RegionRect(0.0, 0.0, 128.0, 64.0));
        gv_selectedRegion = RegionFromId(1);
        gv_evacRegion = RegionFromId(43);
        gv_mapName = "Baguio Station";
        gv_mapPlanet = ge_Planets_MarSara;
        gv_currentStation = ge_Station_Baguio;
    }

    if ((lv_pickedStation == 2)) {
        RegionPlayableMapSet(RegionRect(128.0, 0.0, 256.0, 128.0));
        gv_selectedRegion = RegionFromId(2);
        gv_evacRegion = RegionFromId(2);
        gv_mapName = "Ragnov Station";
        gv_mapPlanet = ge_Planets_Avernus;
        gv_currentStation = ge_Station_Ragnov;
    }

    if ((lv_pickedStation == 3)) {
        RegionPlayableMapSet(RegionRect(128.0, 128.0, 256.0, 256.0));
        gv_selectedRegion = RegionFromId(6);
        gv_evacRegion = RegionFromId(7);
        gv_mapName = "Aquilon Station";
        gv_mapPlanet = ge_Planets_Albion;
        gv_currentStation = ge_Station_Aquilon;
    }

    if ((lv_pickedStation == 4)) {
        RegionPlayableMapSet(RegionRect(0.0, 128.0, 128.0, 256.0));
        gv_selectedRegion = RegionFromId(8);
        gv_evacRegion = RegionFromId(9);
        gv_mapName = "Liberty Station";
        gv_mapPlanet = ge_Planets_Haven;
        gv_currentStation = ge_Station_Liberty;
    }

    if ((lv_pickedStation == 5)) {
        RegionPlayableMapSet(RegionRect(0.0, 64.0, 128.0, 128.0));
        gv_selectedRegion = RegionFromId(44);
        gv_evacRegion = RegionFromId(45);
        gv_mapName = "Sahara Station";
        gv_mapPlanet = ge_Planets_ZhakulDas;
        gv_currentStation = ge_Station_Sahara;
    }

    CameraSetBounds(PlayerGroupActive(), RegionPlayableMap(), true);
    return true;
}

int gf_SelectedOptStyle () {
    // Variable Declarations
    int lv_proOptInCount;
    int lv_randomOptInCount;
    int lv_overDueOptInCount;

    // Automatic Variable Declarations
    playergroup auto034E0FB6_g;
    int auto034E0FB6_var;
    int autoD0D7B060_val;

    // Variable Initialization

    // Implementation
    auto034E0FB6_g = gv_playing;
    auto034E0FB6_var = -1;
    while (true) {
        auto034E0FB6_var = PlayerGroupNextPlayer(auto034E0FB6_g, auto034E0FB6_var);
        if (auto034E0FB6_var < 0) { break; }
        autoD0D7B060_val = DialogControlGetSelectedItem(libNtve_gf_ValueFromDataTableDialogItem(true, "ThingSelection"), auto034E0FB6_var);
        if (autoD0D7B060_val == 2) {
            lv_overDueOptInCount += 1;
        }
        else if (autoD0D7B060_val == 3) {
            lv_proOptInCount += 1;
        }
        else if (autoD0D7B060_val == 4) {
            lv_randomOptInCount += 1;
        }
        else {
        }
    }
    if ((lv_overDueOptInCount > lv_proOptInCount) && (lv_overDueOptInCount > lv_randomOptInCount)) {
        return gf_OverdueOpter();
    }
    else {
        if ((lv_randomOptInCount > lv_proOptInCount) && (lv_randomOptInCount > lv_overDueOptInCount)) {
            return gf_RandomOpter();
        }
        else {
            if ((lv_proOptInCount > lv_randomOptInCount) && (lv_proOptInCount > lv_overDueOptInCount)) {
                return gf_ProOpter();
            }
            else {
                return gf_OverdueOpter();
            }
        }
    }
}

int gf_ProOpter () {
    // Variable Declarations
    fixed[16] lv_averagePoints;
    fixed lv_highestPoints;
    int lv_pickedPlayer;

    // Automatic Variable Declarations
    playergroup autoC8A49929_g;
    int autoC8A49929_var;
    playergroup auto832518A7_g;
    int auto832518A7_var;

    // Variable Initialization

    // Implementation
    autoC8A49929_g = gv_optedIn;
    autoC8A49929_var = -1;
    while (true) {
        autoC8A49929_var = PlayerGroupNextPlayer(autoC8A49929_g, autoC8A49929_var);
        if (autoC8A49929_var < 0) { break; }
        if (((gv_kicked[autoC8A49929_var] == true) || (gv_gPGamesPlayed[autoC8A49929_var] <= 1))) {
            PlayerGroupRemove(gv_optedIn, autoC8A49929_var);
        }

        if ((gv_gTGamesAsThing[autoC8A49929_var] == 0)) {
            lv_averagePoints[autoC8A49929_var] = 0.0;
        }
        else {
            lv_averagePoints[autoC8A49929_var] = (gv_tPThingPoints[autoC8A49929_var] / gv_gTGamesAsThing[autoC8A49929_var]);
        }
    }
    auto832518A7_g = gv_optedIn;
    auto832518A7_var = -1;
    while (true) {
        auto832518A7_var = PlayerGroupNextPlayer(auto832518A7_g, auto832518A7_var);
        if (auto832518A7_var < 0) { break; }
        if ((lv_highestPoints < lv_averagePoints[auto832518A7_var])) {
            lv_highestPoints = lv_averagePoints[auto832518A7_var];
            lv_pickedPlayer = auto832518A7_var;
        }

    }
    if ((lv_highestPoints == 0.0)) {
        lv_pickedPlayer = PlayerGroupPlayer(gv_optedIn, RandomInt(1, PlayerGroupCount(gv_optedIn)));
    }

    return lv_pickedPlayer;
}

int gf_RandomOpter () {
    // Variable Declarations
    int lv_pickedPlayer;

    // Automatic Variable Declarations
    playergroup auto423A1304_g;
    int auto423A1304_var;

    // Variable Initialization

    // Implementation
    auto423A1304_g = gv_optedIn;
    auto423A1304_var = -1;
    while (true) {
        auto423A1304_var = PlayerGroupNextPlayer(auto423A1304_g, auto423A1304_var);
        if (auto423A1304_var < 0) { break; }
        if (((gv_kicked[auto423A1304_var] == true) || (gv_gPGamesPlayed[auto423A1304_var] <= 1))) {
            PlayerGroupRemove(gv_optedIn, auto423A1304_var);
        }

    }
    lv_pickedPlayer = PlayerGroupPlayer(gv_optedIn, RandomInt(1, PlayerGroupCount(gv_optedIn)));
    return lv_pickedPlayer;
}

int gf_OverdueOpter () {
    // Variable Declarations
    fixed[16] lv_points;
    fixed lv_highestPoints;
    int lv_pickedPlayer;

    // Automatic Variable Declarations
    playergroup autoBFC13D1E_g;
    int autoBFC13D1E_var;
    playergroup auto8BA2DC84_g;
    int auto8BA2DC84_var;

    // Variable Initialization

    // Implementation
    autoBFC13D1E_g = gv_optedIn;
    autoBFC13D1E_var = -1;
    while (true) {
        autoBFC13D1E_var = PlayerGroupNextPlayer(autoBFC13D1E_g, autoBFC13D1E_var);
        if (autoBFC13D1E_var < 0) { break; }
        if (((gv_kicked[autoBFC13D1E_var] == true) || (gv_gPGamesPlayed[autoBFC13D1E_var] <= 1))) {
            PlayerGroupRemove(gv_optedIn, autoBFC13D1E_var);
        }

        lv_points[autoBFC13D1E_var] = gv_lGLastGameAsThing[autoBFC13D1E_var];
    }
    auto8BA2DC84_g = gv_optedIn;
    auto8BA2DC84_var = -1;
    while (true) {
        auto8BA2DC84_var = PlayerGroupNextPlayer(auto8BA2DC84_g, auto8BA2DC84_var);
        if (auto8BA2DC84_var < 0) { break; }
        if ((lv_highestPoints < lv_points[auto8BA2DC84_var])) {
            lv_highestPoints = lv_points[auto8BA2DC84_var];
            lv_pickedPlayer = auto8BA2DC84_var;
        }

    }
    if ((lv_highestPoints == 0.0)) {
        lv_pickedPlayer = PlayerGroupPlayer(gv_optedIn, RandomInt(1, PlayerGroupCount(gv_optedIn)));
    }

    return lv_pickedPlayer;
}

void gf_PlayerPerkUpgrade (int lp_player) {
    // Variable Declarations
    int lv_x;

    // Automatic Variable Declarations
    const int autoDF7642D9_ae = gv_maxAmountofmarineperks;
    const int autoDF7642D9_ai = 1;

    // Variable Initialization

    // Implementation
    lv_x = 1;
    for ( ; ( (autoDF7642D9_ai >= 0 && lv_x <= autoDF7642D9_ae) || (autoDF7642D9_ai < 0 && lv_x >= autoDF7642D9_ae) ) ; lv_x += autoDF7642D9_ai ) {
        if (((PlayerHandle(lp_player) == "00"))) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, UserDataGetUpgrade("MarinePerks", gv_playersPerks[lp_player][lv_x], "Perk", 1), CatalogFieldValueGetAsInt(c_gameCatalogUpgrade, UserDataGetUpgrade("MarinePerks", UserDataInstance("MarinePerks", lv_x), "Perk", 1), "MaxLevel", c_playerAny));
        }
        else {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, UserDataGetUpgrade("MarinePerks", gv_playersPerks[lp_player][lv_x], "Perk", 1), 1);
        }
    }
}

void gf_ClearPlayerPerks (int lp_player) {
    // Variable Declarations
    int lv_x;

    // Automatic Variable Declarations
    int auto829C96FE_ae;
    const int auto829C96FE_ai = 1;

    // Variable Initialization

    // Implementation
    auto829C96FE_ae = UserDataInstanceCount("MarinePerks");
    lv_x = 1;
    for ( ; ( (auto829C96FE_ai >= 0 && lv_x <= auto829C96FE_ae) || (auto829C96FE_ai < 0 && lv_x >= auto829C96FE_ae) ) ; lv_x += auto829C96FE_ai ) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, UserDataGetUpgrade("MarinePerks", UserDataInstance("MarinePerks", lv_x), "Perk", 1), 0);
    }
}

void gf_CreatePerkFrame () {
    // Variable Declarations
    int lv_buttonsize;
    int lv_imagesize;
    int lv_selectionColumns;
    int lv_x;
    int lv_y;
    int lv_z;

    // Automatic Variable Declarations
    const int autoD24ED02A_ae = gv_maxAmountofmarineperks;
    const int autoD24ED02A_ai = 1;
    int autoB3945368_ae;
    const int autoB3945368_ai = 1;

    // Variable Initialization
    lv_buttonsize = 76;
    lv_imagesize = 74;
    lv_selectionColumns = 3;
    lv_y = 1;
    lv_z = 1;

    // Implementation
    DialogControlCreateFromTemplate(gv_perkdialog, c_triggerControlTypePanel, "PerkFrame/PlayerInfoFrame");
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    gv_perkFrame = DialogControlLastCreated();
    DialogControlHookup(gv_perkFrame, c_triggerControlTypePanel, "PlayerPerkFrame");
    gv_perkPlayerFrame[1] = DialogControlLastCreated();
    DialogControlHookup(gv_perkFrame, c_triggerControlTypeImage, "PlayerPerkbackground");
    gv_perkPlayerFrame[0] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), false, PlayerGroupAll());
    DialogControlHookup(gv_perkFrame, c_triggerControlTypePanel, "PerkSelectionFrame");
    gv_perkSelectionFrame[1] = DialogControlLastCreated();
    DialogControlHookup(gv_perkFrame, c_triggerControlTypeImage, "PerkSelectionBackground");
    gv_perkSelectionFrame[0] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), false, PlayerGroupAll());
    lv_x = 1;
    for ( ; ( (autoD24ED02A_ai >= 0 && lv_x <= autoD24ED02A_ae) || (autoD24ED02A_ai < 0 && lv_x >= autoD24ED02A_ae) ) ; lv_x += autoD24ED02A_ai ) {
        DialogControlCreateInPanel(gv_perkPlayerFrame[1], c_triggerControlTypeButton);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_buttonsize, lv_buttonsize);
        libNtve_gf_SaveDataTableValueDialogItem(true, ("Perk" + IntToString(lv_x)), DialogControlLastCreated());
        gf_Adddialogitemevent(gt_SelectPerkButtonClicked, DialogControlLastCreated(), c_triggerControlEventTypeClick);
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/8E1DDED1"), PlayerGroupAll());
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, ((lv_buttonsize * (lv_x - 1)) + 1), 0);
        DialogControlCreateInPanel(gv_perkPlayerFrame[1], c_triggerControlTypeImage);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_imagesize, lv_imagesize);
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, libNtve_gf_ValueFromDataTableDialogItem(true, ("Perk" + IntToString(lv_x))), c_anchorCenter, 0, 0);
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\talent-raynor-level14-infantryattackspeed.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), false, PlayerGroupAll());
        libNtve_gf_SaveDataTableValueDialogItem(true, ("Perkimage" + IntToString(lv_x)), DialogControlLastCreated());
        DialogControlSetSize(gv_perkPlayerFrame[1], PlayerGroupAll(), (((lv_buttonsize + 1) * lv_x) + 1), (lv_buttonsize + 2));
        DialogControlSetPositionRelative(gv_perkPlayerFrame[1], PlayerGroupAll(), c_anchorCenter, gv_perkFrame, c_anchorCenter, 0, 200);
    }
    autoB3945368_ae = UserDataInstanceCount("MarinePerks");
    lv_x = 1;
    for ( ; ( (autoB3945368_ai >= 0 && lv_x <= autoB3945368_ae) || (autoB3945368_ai < 0 && lv_x >= autoB3945368_ae) ) ; lv_x += autoB3945368_ai ) {
        DialogControlCreateInPanel(gv_perkSelectionFrame[1], c_triggerControlTypeButton);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_buttonsize, lv_buttonsize);
        libNtve_gf_SaveDataTableValueDialogItem(true, ("Perkselection" + IntToString(lv_x)), DialogControlLastCreated());
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Param/Value/02B6E3C5") + StringToText(UserDataGetString("MarinePerks", UserDataInstance("MarinePerks", lv_x), "Perk name", 1)) + StringExternal("Param/Value/5609E5CA") + StringToText(UserDataGetString("MarinePerks", UserDataInstance("MarinePerks", lv_x), "Perk Tooltip", 1))), PlayerGroupAll());
        gf_Adddialogitemevent(gt_PerkSelected, DialogControlLastCreated(), c_triggerControlEventTypeClick);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, ((lv_buttonsize * (lv_y - 1)) + 1), ((lv_buttonsize * (lv_z - 1)) + 1));
        DialogControlCreateInPanel(gv_perkSelectionFrame[1], c_triggerControlTypeImage);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_imagesize, lv_imagesize);
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, libNtve_gf_ValueFromDataTableDialogItem(true, ("Perkselection" + IntToString(lv_x))), c_anchorCenter, 0, 0);
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), UserDataGetImagePath("MarinePerks", UserDataInstance("MarinePerks", lv_x), "Perk Image", 1), PlayerGroupAll());
        libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), false, PlayerGroupAll());
        libNtve_gf_SaveDataTableValueDialogItem(true, ("Perkselectionimage" + IntToString(lv_x)), DialogControlLastCreated());
        DialogControlSetSize(gv_perkSelectionFrame[1], PlayerGroupAll(), (((lv_buttonsize + 1) * lv_selectionColumns) + 1), (((lv_buttonsize + 1) * lv_z) + 1));
        if ((lv_y < lv_selectionColumns)) {
            lv_y += 1;
        }
        else {
            lv_y = 1;
            lv_z += 1;
        }
    }
    DialogControlSetPositionRelative(gv_perkSelectionFrame[1], PlayerGroupAll(), c_anchorBottom, gv_perkPlayerFrame[0], c_anchorTop, 0, 0);
    DialogControlSetVisible(gv_perkSelectionFrame[0], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_perkSelectionFrame[1], PlayerGroupAll(), false);
}

void gf_Adddialogitemevent (trigger lp_trigger, int lp_item, int lp_event) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventDialogControl (lp_trigger, c_playerAny, lp_item, lp_event);
}

bool gf_Reverseofbool (bool lp_bool) {
    // Variable Declarations
    bool lv_return;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_bool == true)) {
        lv_return = false;
    }
    else {
        lv_return = true;
    }
    return lv_return;
}

bool gf_playerhasselectedperk (int lp_player, string lp_perk) {
    // Variable Declarations
    int lv_x;
    bool lv_return;

    // Automatic Variable Declarations
    const int auto306056F5_ae = gv_maxAmountofmarineperks;
    const int auto306056F5_ai = 1;

    // Variable Initialization

    // Implementation
    lv_x = 1;
    for ( ; ( (auto306056F5_ai >= 0 && lv_x <= auto306056F5_ae) || (auto306056F5_ai < 0 && lv_x >= auto306056F5_ae) ) ; lv_x += auto306056F5_ai ) {
        if ((lp_perk == gv_playersPerks[lp_player][lv_x])) {
            lv_return = true;
        }

    }
    return lv_return;
}

void gf_QuickTipsforString (string lp_string, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_string == "Sandstorm") && (gv_quickTipSeen[lp_player][10] == false)) {
        HelpPanelAddTip(PlayerGroupSingle(lp_player), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/343C76FE"), libNtve_ge_TipType_NewAbility), StringExternal("Param/Value/1193C0B8"), StringExternal("Param/Value/503FE240"), "Assets\\Textures\\marsara_dark_sandnormal.dds");
        gv_quickTipSeen[lp_player][10] = true;
    }
    else if ((lp_string == "The Cold") && (gv_quickTipSeen[lp_player][14] == false)) {
        HelpPanelAddTip(PlayerGroupSingle(EventPlayer()), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/05F0F6CC"), libNtve_ge_TipType_NewAbility), StringExternal("Param/Value/B5395F14"), StringExternal("Param/Value/DA380F47"), "Assets\\Textures\\marsara_dark_sandnormal.dds");
        gv_quickTipSeen[lp_player][14] = true;
    }
}

fixed gf_GetEVACShipMultiplier (int lp_vote) {
    // Automatic Variable Declarations
    int auto45A277D2_val;

    // Implementation
    auto45A277D2_val = lp_vote;
    if (auto45A277D2_val == 1) {
        return 0.5;
    }
    else if (auto45A277D2_val == 2) {
        return 0.75;
    }
    else if (auto45A277D2_val == 3) {
        return 1.0;
    }
    else if (auto45A277D2_val == 4) {
        return 1.25;
    }
    else if (auto45A277D2_val == 5) {
        return 1.5;
    }
    else if (auto45A277D2_val == 6) {
        return 2.0;
    }
    else {
        return 1.0;
    }
}

trigger auto_gf_EvacShipSelection_Trigger = null;

void gf_EvacShipSelection () {
    if (auto_gf_EvacShipSelection_Trigger == null) {
        auto_gf_EvacShipSelection_Trigger = TriggerCreate("auto_gf_EvacShipSelection_TriggerFunc");
    }

    TriggerExecute(auto_gf_EvacShipSelection_Trigger, false, false);
}

bool auto_gf_EvacShipSelection_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_highestvote;
    int[7] lv_vote;

    // Automatic Variable Declarations
    playergroup auto1CB7EA66_g;
    int auto1CB7EA66_var;
    int auto32700A9B_val;
    const int auto8D89949F_ae = 6;
    int auto8D89949F_var;

    // Variable Initialization

    // Implementation
    auto1CB7EA66_g = gv_playing;
    auto1CB7EA66_var = -1;
    while (true) {
        auto1CB7EA66_var = PlayerGroupNextPlayer(auto1CB7EA66_g, auto1CB7EA66_var);
        if (auto1CB7EA66_var < 0) { break; }
        auto32700A9B_val = DialogControlGetSelectedItem(libNtve_gf_ValueFromDataTableDialogItem(true, "EvacSelection"), auto1CB7EA66_var);
        if (auto32700A9B_val == 2) {
            lv_vote[1] += 1;
        }
        else if (auto32700A9B_val == 3) {
            lv_vote[2] += 1;
        }
        else if (auto32700A9B_val == 4) {
            lv_vote[3] += 1;
        }
        else if (auto32700A9B_val == 5) {
            lv_vote[4] += 1;
        }
        else if (auto32700A9B_val == 6) {
            lv_vote[5] += 1;
        }
        else if (auto32700A9B_val == 7) {
            lv_vote[6] += 1;
        }
        else {
        }
    }
    auto8D89949F_var = 1;
    for ( ; auto8D89949F_var <= auto8D89949F_ae; auto8D89949F_var += 1 ) {
        if ((lv_highestvote < lv_vote[auto8D89949F_var])) {
            lv_highestvote = lv_vote[auto8D89949F_var];
        }

    }
    if ((lv_highestvote == 0)) {
        lv_highestvote = 3;
    }

    gv_evacShipTimerMultiplier = lv_highestvote;
    gf_InitialEvacShip();
    return true;
}

void gf_InitialEvacShip () {
    int init_i;
    int init_j;

    // Variable Declarations
    point lv_evacpoint;
    int lv_departuretime;
    fixed lv_arrivaltime;
    int[16][7] lv_dialogitemchange;

    // Automatic Variable Declarations
    playergroup autoD5A5BE3D_g;
    int autoD5A5BE3D_var;
    playergroup autoC02BEE68_g;
    int autoC02BEE68_var;
    playergroup autoE6DD366B_g;
    int autoE6DD366B_var;

    // Variable Initialization
    lv_evacpoint = gf_FindProperRandomPointforSpawninRegion(gv_selectedRegion);
    lv_departuretime = 90;
    lv_arrivaltime = (gf_GetEVACShipMultiplier(gv_evacShipTimerMultiplier) * (60.0 * IntToFixed(PlayerGroupCount(gv_playing))));
    for (init_i = 0; init_i <= 15; init_i += 1) {
        for (init_j = 0; init_j <= 6; init_j += 1) {
            lv_dialogitemchange[init_i][init_j] = c_invalidDialogControlId;
        }
    }

    // Implementation
    UnitSetPropertyFixed(UnitFromId(659), c_unitPropLifeMax, 2500.0);
    UnitSetPropertyFixed(UnitFromId(659), c_unitPropLife, 2500.0);
    TimerWindowCreate(gv_timer, StringExternal("Param/Value/445C2E9A"), true, false);
    TimerWindowSetFormat(TimerWindowLastCreated(), StringToText("<min2/>:<sec2/>"));
    TimerWindowSetColor(TimerWindowLastCreated(), c_timerWindowColorBackground, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 100.0);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/TriggerWindowPanel/TimerWindowTemplate");
    DialogControlSendAnimationEvent(DialogControlLastCreated(), PlayerGroupAll(), "HighlightStop");
    TimerWindowShowBorder(TimerWindowLastCreated(), true);
    TimerStart(gv_timer, lv_arrivaltime, false, c_timeReal);
    libNtve_gf_WaitForTimer(gv_timer, 0.0, false);
    gf_GenerateEVACStatusDialog();
    if (((gv_currentStation == ge_Station_Liberty) || (gv_currentStation == ge_Station_Aquilon) || (gv_currentStation == ge_Station_Baguio) || (gv_currentStation == ge_Station_Sahara))) {
        lv_evacpoint = gf_FindProperRandomPointforSpawninRegion(gv_evacRegion);
        libNtve_gf_CreateModelAtPoint("Battlecruiser", lv_evacpoint);
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetHeight(2.0));
        SoundPlay(SoundLink("OrbitalCommand_CalldownMuleDrop", 0), PlayerGroupActive(), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/18ABA9A8"));
    }
    else {
        lv_evacpoint = gf_FindProperRandomPointforSpawninRegion(gv_selectedRegion);
        libNtve_gf_CreateActorAtPoint("SpacePlatformHatch", lv_evacpoint);
        SoundPlay(SoundLink("ColonistShip_Load", 1), PlayerGroupActive(), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/5CC6B87C"));
    }
    TriggerEnable(gt_EvacShipEnter, true);
    RegionSetCenter(RegionFromId(4), lv_evacpoint);
    RegionPlayableMapSet(RegionRect(0.0, 0.0, 254.0, 254.0));
    CameraSetBounds(gv_playing, gv_selectedRegion, true);
    autoD5A5BE3D_g = gv_dead;
    autoD5A5BE3D_var = -1;
    while (true) {
        autoD5A5BE3D_var = PlayerGroupNextPlayer(autoD5A5BE3D_g, autoD5A5BE3D_var);
        if (autoD5A5BE3D_var < 0) { break; }
        VisRevealerCreate(autoD5A5BE3D_var, RegionFromId(5));
    }
    TimerWindowSetTitle(TimerWindowLastCreated(), StringExternal("Param/Value/7C3A05CF"));
    TimerStart(gv_timer, lv_departuretime, false, c_timeReal);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "MinimapPing", lv_evacpoint, Color(100.00, 0.00, 0.00), 180.0, 270.0);
    libNtve_gf_WaitForTimer(gv_timer, 0.0, false);
    SoundPlay(SoundLink("ArmoryDropShip_Work", 0), PlayerGroupActive(), 100.0, 0.0);
    autoC02BEE68_g = PlayerGroupAll();
    autoC02BEE68_var = -1;
    while (true) {
        autoC02BEE68_var = PlayerGroupNextPlayer(autoC02BEE68_g, autoC02BEE68_var);
        if (autoC02BEE68_var < 0) { break; }
        CameraShake(autoC02BEE68_var, "Massive", "Earthquake", 1.0, 8.0, 23.0);
    }
    PingDestroy(PingLastCreated());
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    TriggerEnable(gt_EvacShipEnter, false);
    TimerWindowDestroy(TimerWindowLastCreated());
    Wait(3.0, c_timeReal);
    autoE6DD366B_g = gv_marines;
    autoE6DD366B_var = -1;
    while (true) {
        autoE6DD366B_var = PlayerGroupNextPlayer(autoE6DD366B_g, autoE6DD366B_var);
        if (autoE6DD366B_var < 0) { break; }
        if ((UnitIsAlive(gv_unit[autoE6DD366B_var]) == true) && (libNtve_gf_UnitInRegion(gv_unit[autoE6DD366B_var], RegionFromId(5)) == false)) {
            gf_KilledbyTrigger(gv_unit[autoE6DD366B_var], autoE6DD366B_var, 0, StringExternal("Param/Value/B9456521"), "Ram", 1);
            CameraSetBounds(PlayerGroupSingle(autoE6DD366B_var), RegionFromId(5), false);
            UISetFrameVisible(PlayerGroupSingle(autoE6DD366B_var), c_syncFrameTypeMinimapPanel, false);
        }

    }
    if ((libNtve_gf_UnitInRegion(gv_unit[PlayerGroupPlayer(gv_things, 1)], RegionFromId(5)) == false)) {
        gf_KilledbyTrigger(gv_unit[PlayerGroupPlayer(gv_things, 1)], PlayerGroupPlayer(gv_things, 1), 0, StringExternal("Param/Value/175E7707"), "Ram", 15);
        CameraSetBounds(PlayerGroupSingle(PlayerGroupPlayer(gv_things, 1)), RegionFromId(5), false);
        UISetFrameVisible(PlayerGroupSingle(PlayerGroupPlayer(gv_things, 1)), c_syncFrameTypeMinimapPanel, false);
    }

    gf_InitialLaunchOff();
    SoundPlay(SoundLink("ArmoryDropship_Engines", -1), PlayerGroupActive(), 100.0, 0.0);
    Wait(20.0, c_timeReal);
    SoundSetVolume(SoundLastPlayed(), 30.0);
}

trigger auto_gf_LaunchOffProcess_Trigger = null;

void gf_LaunchOffProcess () {
    if (auto_gf_LaunchOffProcess_Trigger == null) {
        auto_gf_LaunchOffProcess_Trigger = TriggerCreate("auto_gf_LaunchOffProcess_TriggerFunc");
    }

    TriggerExecute(auto_gf_LaunchOffProcess_Trigger, false, false);
}

bool auto_gf_LaunchOffProcess_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    while ((gv_heading != 230.0)) {
        gv_heading -= 1.0;
        gv_acceleration += 0.01;
        Wait(0.1, c_timeGame);
    }
    while ((gv_heading != 200.0)) {
        gv_heading -= 0.5;
        gv_acceleration += 0.015;
        Wait(0.1, c_timeGame);
    }
    while ((gv_heading != 180.0)) {
        gv_heading -= 1.0;
        gv_acceleration += 0.01;
        Wait(0.1, c_timeGame);
    }
    while ((gv_acceleration > 0.0)) {
        gv_acceleration -= 1.0;
        Wait(0.1, c_timeGame);
    }
    gv_acceleration = 0.0;
    gv_launchedOff = true;
    return true;
}

trigger auto_gf_EVACStatus_Trigger = null;

void gf_EVACStatus () {
    if (auto_gf_EVACStatus_Trigger == null) {
        auto_gf_EVACStatus_Trigger = TriggerCreate("auto_gf_EVACStatus_TriggerFunc");
    }

    TriggerExecute(auto_gf_EVACStatus_Trigger, false, false);
}

bool auto_gf_EVACStatus_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_a;
    int lv_b;

    // Automatic Variable Declarations
    playergroup autoD625AB0A_g;
    int autoD625AB0A_var;
    int auto2BB1B592_ae;
    const int auto2BB1B592_ai = 1;
    int auto337D2BCB_ae;
    const int auto337D2BCB_ai = 1;
    playergroup autoDE5B8B53_g;
    int autoDE5B8B53_var;
    playergroup auto72C1CE71_g;
    int auto72C1CE71_var;
    playergroup auto4EC6DD0A_g;
    int auto4EC6DD0A_var;

    // Variable Initialization

    // Implementation
    while (((gv_distance <= 30000.0) && (gv_distance >= 0.0) && ((PlayerGroupCount(gv_marines) > 0) || (gv_launchedOff == false)))) {
        libNtve_gf_SetDialogItemRotation(gv_eVACStatusArrow, FixedToInt((FixedToInt(gv_heading) - 180)), PlayerGroupAll());
        DialogControlSetSize(gv_eVACStatusArrow, PlayerGroupAll(), libNtve_gf_ArithmeticIntClamp((10 * FixedToInt(gv_speed)), 64, 256), libNtve_gf_ArithmeticIntClamp((10 * FixedToInt(gv_speed)), 64, 256));
        DialogSetTransparency(gv_eVACStatusDialog, libNtve_gf_ArithmeticRealClamp((1000.0 * gv_acceleration), 0.0, 70.0));
        libNtve_gf_SetDialogItemCurrentValue(gv_eVACStatusBar, gv_distance, PlayerGroupAll());
        DialogControlSetSize(gv_eVACStatusBar, PlayerGroupAll(), libNtve_gf_ArithmeticIntClamp((FixedToInt(gv_distance) / 12), 32, 256), 25);
        gv_acceleration = (gv_acceleration * 0.9);
        gv_speed = libNtve_gf_ArithmeticRealClamp((gv_speed + gv_acceleration), 0.0, 15.0);
        gv_distance += (Sin((gv_heading - 90.0)) * gv_speed);
        Wait(0.1, c_timeGame);
    }
    autoD625AB0A_g = gv_playing;
    autoD625AB0A_var = -1;
    while (true) {
        autoD625AB0A_var = PlayerGroupNextPlayer(autoD625AB0A_g, autoD625AB0A_var);
        if (autoD625AB0A_var < 0) { break; }
        libNtve_gf_PauseUnit(gv_unit[autoD625AB0A_var], true);
        libNtve_gf_MakeUnitInvulnerable(gv_unit[autoD625AB0A_var], true);
    }
    if ((PlayerGroupCount(gv_marines) > 0)) {
        if ((gv_distance >= 30000.0)) {
            auto4EC6DD0A_g = gv_marines;
            auto4EC6DD0A_var = -1;
            while (true) {
                auto4EC6DD0A_var = PlayerGroupNextPlayer(auto4EC6DD0A_g, auto4EC6DD0A_var);
                if (auto4EC6DD0A_var < 0) { break; }
                gf_KilledbyTrigger(gv_unit[auto4EC6DD0A_var], auto4EC6DD0A_var, 0, StringExternal("Param/Value/B880B907"), "Ram", 4);
            }
        }
        else {
            auto2BB1B592_ae = RandomInt(30, 50);
            lv_a = 1;
            for ( ; ( (auto2BB1B592_ai >= 0 && lv_a <= auto2BB1B592_ae) || (auto2BB1B592_ai < 0 && lv_a >= auto2BB1B592_ae) ) ; lv_a += auto2BB1B592_ai ) {
                auto337D2BCB_ae = RandomInt(1, 5);
                lv_b = 1;
                for ( ; ( (auto337D2BCB_ai >= 0 && lv_b <= auto337D2BCB_ae) || (auto337D2BCB_ai < 0 && lv_b >= auto337D2BCB_ae) ) ; lv_b += auto337D2BCB_ai ) {
                    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, RegionRandomPoint(RegionFromId(5)));
                }
                Wait(RandomFixed(0.01, 0.2), c_timeGame);
            }
            autoDE5B8B53_g = gv_playing;
            autoDE5B8B53_var = -1;
            while (true) {
                autoDE5B8B53_var = PlayerGroupNextPlayer(autoDE5B8B53_g, autoDE5B8B53_var);
                if (autoDE5B8B53_var < 0) { break; }
                libNtve_gf_MakeUnitInvulnerable(gv_unit[autoDE5B8B53_var], false);
            }
            gf_KilledbyTrigger(gv_unit[PlayerGroupPlayer(gv_things, 1)], PlayerGroupPlayer(gv_things, 1), 0, StringExternal("Param/Value/A6DBCC44"), "Ram", 20);
            auto72C1CE71_g = gv_marines;
            auto72C1CE71_var = -1;
            while (true) {
                auto72C1CE71_var = PlayerGroupNextPlayer(auto72C1CE71_g, auto72C1CE71_var);
                if (auto72C1CE71_var < 0) { break; }
                gf_KilledbyTrigger(gv_unit[auto72C1CE71_var], auto72C1CE71_var, 0, StringExternal("Param/Value/1595FE40"), "Ram", 4);
            }
        }
    }

    DialogDestroy(gv_eVACStatusDialog);
    return true;
}

void gf_GenerateEVACStatusDialog () {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(256, 256, c_anchorTopRight, 50, 150, true);
    gv_eVACStatusDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 256, 50, c_anchorTop, 0, 0, StringExternal("Param/Value/3DE4E2C9"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20Bold", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 256, 75, c_anchorBottom, 0, 50, StringExternal("Param/Value/ACB2951C"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 128, 128, c_anchorCenter, 0, -30, StringToText(""), "Assets\\Textures\\ui_arrowwhite.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/6D8B94B9"), PlayerGroupAll());
    gv_eVACStatusArrow = DialogControlLastCreated();
    libNtve_gf_SetDialogItemRotation(gv_eVACStatusArrow, FixedToInt((270 - 180)), PlayerGroupAll());
    DialogControlSetSize(gv_eVACStatusArrow, PlayerGroupAll(), libNtve_gf_ArithmeticIntClamp((10 * FixedToInt(gv_speed)), 64, 256), libNtve_gf_ArithmeticIntClamp((10 * FixedToInt(gv_speed)), 64, 256));
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeProgressBar);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/F2A1F57C"), PlayerGroupAll());
    gv_eVACStatusBar = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 256, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, 0, 25);
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 30000.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\white32.dds", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 256, 25, c_anchorBottom, 0, 25, StringExternal("Param/Value/48C78000"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
    DialogSetImageVisible(DialogLastCreated(), false);
}

void gf_InitialLaunchOff () {
    // Automatic Variable Declarations
    // Implementation
    gv_launchedOff = false;
    gv_heading = 270.0;
    gv_speed = 0.0;
    gv_speed = 0.0;
    gv_distance = 0.0;
    DialogSetVisible(gv_eVACStatusDialog, PlayerGroupAll(), true);
    gf_LaunchOffProcess();
    gf_EVACStatus();
}

text gf_QuitTip (int lp_index) {
    // Automatic Variable Declarations
    int auto822D9696_val;

    // Implementation
    auto822D9696_val = lp_index;
    if (auto822D9696_val == 1) {
        return StringExternal("Param/Value/CC412C99");
    }
    else if (auto822D9696_val == 2) {
        return StringExternal("Param/Value/4AB9B85F");
    }
    else if (auto822D9696_val == 3) {
        return StringExternal("Param/Value/A0E7CB97");
    }
    else if (auto822D9696_val == 4) {
        return StringExternal("Param/Value/C53AF64F");
    }
    else if (auto822D9696_val == 5) {
        return StringExternal("Param/Value/BC4D8FE9");
    }
    else if (auto822D9696_val == 6) {
        return StringExternal("Param/Value/51599373");
    }
    else if (auto822D9696_val == 7) {
        return StringExternal("Param/Value/A628C0D6");
    }
    else if (auto822D9696_val == 8) {
        return StringExternal("Param/Value/2D6AF7FF");
    }
    else if (auto822D9696_val == 9) {
        return StringExternal("Param/Value/4AAF52DF");
    }
    else if (auto822D9696_val == 10) {
        return StringExternal("Param/Value/26173565");
    }
    else if (auto822D9696_val == 11) {
        return StringExternal("Param/Value/A644A9EA");
    }
    else if (auto822D9696_val == 12) {
        return StringExternal("Param/Value/6DBDAC4F");
    }
    else if (auto822D9696_val == 13) {
        return StringExternal("Param/Value/7AD41A3D");
    }
    else if (auto822D9696_val == 14) {
        return StringExternal("Param/Value/73928B54");
    }
    else if (auto822D9696_val == 15) {
        return StringExternal("Param/Value/18F38F3A");
    }
    else if (auto822D9696_val == 16) {
        return StringExternal("Param/Value/CFAFA853");
    }
    else if (auto822D9696_val == 17) {
        return StringExternal("Param/Value/6B470482");
    }
    else if (auto822D9696_val == 18) {
        return StringExternal("Param/Value/C0A2FA0C");
    }
    else if (auto822D9696_val == 19) {
        return StringExternal("Param/Value/36E3543A");
    }
    else if (auto822D9696_val == 20) {
        return StringExternal("Param/Value/7DE3E3AD");
    }
    else if (auto822D9696_val == 21) {
        return StringExternal("Param/Value/7450A8D7");
    }
    else if (auto822D9696_val == 22) {
        return StringExternal("Param/Value/ACD54963");
    }
    else if (auto822D9696_val == 23) {
        return StringExternal("Param/Value/3A50587E");
    }
    else if (auto822D9696_val == 24) {
        return StringExternal("Param/Value/C092B419");
    }
    else if (auto822D9696_val == 25) {
        return StringExternal("Param/Value/482AB18F");
    }
    else if (auto822D9696_val == 26) {
        return StringExternal("Param/Value/B8C73DC7");
    }
    else if (auto822D9696_val == 27) {
        return StringExternal("Param/Value/7ED7D496");
    }
    else if (auto822D9696_val == 28) {
        return StringExternal("Param/Value/65557D6C");
    }
    else if (auto822D9696_val == 29) {
        return StringExternal("Param/Value/BEE4B81B");
    }
    else if (auto822D9696_val == 30) {
        return StringExternal("Param/Value/2AF852D9");
    }
    else if (auto822D9696_val == 31) {
        return StringExternal("Param/Value/B210D186");
    }
    else if (auto822D9696_val == 32) {
        return StringExternal("Param/Value/F6AA5A09");
    }
    else if (auto822D9696_val == 33) {
        return StringExternal("Param/Value/A82B389E");
    }
    else {
        return StringToText("");
    }
}

trigger auto_gf_InitializeSplashScreen_Trigger = null;

void gf_InitializeSplashScreen () {
    if (auto_gf_InitializeSplashScreen_Trigger == null) {
        auto_gf_InitializeSplashScreen_Trigger = TriggerCreate("auto_gf_InitializeSplashScreen_TriggerFunc");
    }

    TriggerExecute(auto_gf_InitializeSplashScreen_Trigger, false, false);
}

bool auto_gf_InitializeSplashScreen_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(800, 600, c_anchorCenter, 0, 0, true);
    gv_splashScreenDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 800, 600, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(0.00, 0.00, 0.00), c_triggerBlendModeNormal);
    gv_splashScreenDialogItem = DialogControlLastCreated();
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    return true;
}

trigger auto_gf_UseSplashScreenonPlayers_Trigger = null;
fixed auto_gf_UseSplashScreenonPlayers_lp_growthDelay;
fixed auto_gf_UseSplashScreenonPlayers_lp_decay;
fixed auto_gf_UseSplashScreenonPlayers_lp_decayDelay;
fixed auto_gf_UseSplashScreenonPlayers_lp_growth;
playergroup auto_gf_UseSplashScreenonPlayers_lp_playerGroup;
fixed auto_gf_UseSplashScreenonPlayers_lp_initialTransparency;
fixed auto_gf_UseSplashScreenonPlayers_lp_finalTransparency;
color auto_gf_UseSplashScreenonPlayers_lp_color;

void gf_UseSplashScreenonPlayers (fixed lp_growthDelay, fixed lp_decay, fixed lp_decayDelay, fixed lp_growth, playergroup lp_playerGroup, fixed lp_initialTransparency, fixed lp_finalTransparency, color lp_color) {
    auto_gf_UseSplashScreenonPlayers_lp_growthDelay = lp_growthDelay;
    auto_gf_UseSplashScreenonPlayers_lp_decay = lp_decay;
    auto_gf_UseSplashScreenonPlayers_lp_decayDelay = lp_decayDelay;
    auto_gf_UseSplashScreenonPlayers_lp_growth = lp_growth;
    auto_gf_UseSplashScreenonPlayers_lp_playerGroup = lp_playerGroup;
    auto_gf_UseSplashScreenonPlayers_lp_initialTransparency = lp_initialTransparency;
    auto_gf_UseSplashScreenonPlayers_lp_finalTransparency = lp_finalTransparency;
    auto_gf_UseSplashScreenonPlayers_lp_color = lp_color;

    if (auto_gf_UseSplashScreenonPlayers_Trigger == null) {
        auto_gf_UseSplashScreenonPlayers_Trigger = TriggerCreate("auto_gf_UseSplashScreenonPlayers_TriggerFunc");
    }

    TriggerExecute(auto_gf_UseSplashScreenonPlayers_Trigger, false, false);
}

bool auto_gf_UseSplashScreenonPlayers_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_growthDelay = auto_gf_UseSplashScreenonPlayers_lp_growthDelay;
    fixed lp_decay = auto_gf_UseSplashScreenonPlayers_lp_decay;
    fixed lp_decayDelay = auto_gf_UseSplashScreenonPlayers_lp_decayDelay;
    fixed lp_growth = auto_gf_UseSplashScreenonPlayers_lp_growth;
    playergroup lp_playerGroup = auto_gf_UseSplashScreenonPlayers_lp_playerGroup;
    fixed lp_initialTransparency = auto_gf_UseSplashScreenonPlayers_lp_initialTransparency;
    fixed lp_finalTransparency = auto_gf_UseSplashScreenonPlayers_lp_finalTransparency;
    color lp_color = auto_gf_UseSplashScreenonPlayers_lp_color;

    // Automatic Variable Declarations
    // Implementation
    DialogControlFadeTransparency(gv_splashScreenDialogItem, lp_playerGroup, 0.0, 100.0);
    Wait(lp_growthDelay, c_timeReal);
    DialogControlFadeTransparency(gv_splashScreenDialogItem, lp_playerGroup, lp_growth, lp_initialTransparency);
    Wait(lp_growth, c_timeReal);
    Wait(lp_decayDelay, c_timeReal);
    DialogControlFadeTransparency(gv_splashScreenDialogItem, lp_playerGroup, lp_decay, lp_finalTransparency);
    return true;
}

trigger auto_gf_FlashScreen_Trigger = null;
fixed auto_gf_FlashScreen_lp_growthDelay;
fixed auto_gf_FlashScreen_lp_decay;
fixed auto_gf_FlashScreen_lp_decayDelay;
fixed auto_gf_FlashScreen_lp_growth;
playergroup auto_gf_FlashScreen_lp_playerGroup;
fixed auto_gf_FlashScreen_lp_initialTransparency;
fixed auto_gf_FlashScreen_lp_finalTransparency;
color auto_gf_FlashScreen_lp_color;
string auto_gf_FlashScreen_lp_image;

void gf_FlashScreen (fixed lp_growthDelay, fixed lp_decay, fixed lp_decayDelay, fixed lp_growth, playergroup lp_playerGroup, fixed lp_initialTransparency, fixed lp_finalTransparency, color lp_color, string lp_image) {
    auto_gf_FlashScreen_lp_growthDelay = lp_growthDelay;
    auto_gf_FlashScreen_lp_decay = lp_decay;
    auto_gf_FlashScreen_lp_decayDelay = lp_decayDelay;
    auto_gf_FlashScreen_lp_growth = lp_growth;
    auto_gf_FlashScreen_lp_playerGroup = lp_playerGroup;
    auto_gf_FlashScreen_lp_initialTransparency = lp_initialTransparency;
    auto_gf_FlashScreen_lp_finalTransparency = lp_finalTransparency;
    auto_gf_FlashScreen_lp_color = lp_color;
    auto_gf_FlashScreen_lp_image = lp_image;

    if (auto_gf_FlashScreen_Trigger == null) {
        auto_gf_FlashScreen_Trigger = TriggerCreate("auto_gf_FlashScreen_TriggerFunc");
    }

    TriggerExecute(auto_gf_FlashScreen_Trigger, false, false);
}

bool auto_gf_FlashScreen_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_growthDelay = auto_gf_FlashScreen_lp_growthDelay;
    fixed lp_decay = auto_gf_FlashScreen_lp_decay;
    fixed lp_decayDelay = auto_gf_FlashScreen_lp_decayDelay;
    fixed lp_growth = auto_gf_FlashScreen_lp_growth;
    playergroup lp_playerGroup = auto_gf_FlashScreen_lp_playerGroup;
    fixed lp_initialTransparency = auto_gf_FlashScreen_lp_initialTransparency;
    fixed lp_finalTransparency = auto_gf_FlashScreen_lp_finalTransparency;
    color lp_color = auto_gf_FlashScreen_lp_color;
    string lp_image = auto_gf_FlashScreen_lp_image;

    // Variable Declarations
    int lv_dialog;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dialog = c_invalidDialogId;

    // Implementation
    DialogCreate(800, 600, c_anchorCenter, 0, 0, true);
    lv_dialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    DialogSetVisible(DialogLastCreated(), lp_playerGroup, true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 800, 600, c_anchorCenter, 0, 0, StringToText(""), lp_image, c_triggerImageTypeNormal, true, lp_color, c_triggerBlendModeNormal);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    Wait(lp_growthDelay, c_timeReal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), lp_growth, lp_initialTransparency);
    Wait(lp_growth, c_timeReal);
    Wait(lp_decayDelay, c_timeReal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), lp_decay, lp_finalTransparency);
    Wait(lp_decay, c_timeReal);
    DialogDestroy(DialogLastCreated());
    return true;
}

void gf_EnableDisableButton (int lp_button, bool lp_state, playergroup lp_players) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_state == false)) {
        libNtve_gf_SetDialogItemDesaturated(lp_button, true, lp_players);
        libNtve_gf_SetDialogItemAcceptMouse(lp_button, false, lp_players);
    }
    else {
        libNtve_gf_SetDialogItemDesaturated(lp_button, false, lp_players);
        libNtve_gf_SetDialogItemAcceptMouse(lp_button, true, lp_players);
    }
}

void gf_SetAllChannelVolume (fixed lp_duration, fixed lp_target, playergroup lp_playerGroup) {
    // Automatic Variable Declarations
    // Implementation
    SoundChannelSetVolume(lp_playerGroup, c_soundCategoryAlert, lp_target, lp_duration);
    SoundChannelSetVolume(lp_playerGroup, c_soundCategoryAmbient, lp_target, lp_duration);
    SoundChannelSetVolume(lp_playerGroup, c_soundCategoryBuild, lp_target, lp_duration);
    SoundChannelSetVolume(lp_playerGroup, c_soundCategoryCombat, lp_target, lp_duration);
    SoundChannelSetVolume(lp_playerGroup, c_soundCategoryDeath, lp_target, lp_duration);
    SoundChannelSetVolume(lp_playerGroup, c_soundCategoryDialogue, lp_target, lp_duration);
    SoundChannelSetVolume(lp_playerGroup, c_soundCategoryDoodad, lp_target, lp_duration);
    SoundChannelSetVolume(lp_playerGroup, c_soundCategoryFlames, lp_target, lp_duration);
    SoundChannelSetVolume(lp_playerGroup, c_soundCategoryFoley, lp_target, lp_duration);
    SoundChannelSetVolume(lp_playerGroup, c_soundCategoryGather, lp_target, lp_duration);
    SoundChannelSetVolume(lp_playerGroup, c_soundCategoryME, lp_target, lp_duration);
    SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMission, lp_target, lp_duration);
    SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMovement, lp_target, lp_duration);
    SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMovie, lp_target, lp_duration);
    SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMusic, lp_target, lp_duration);
    SoundChannelSetVolume(lp_playerGroup, c_soundCategoryOther, lp_target, lp_duration);
    SoundChannelSetVolume(lp_playerGroup, c_soundCategoryReady, lp_target, lp_duration);
    SoundChannelSetVolume(lp_playerGroup, c_soundCategorySAmbient, lp_target, lp_duration);
    SoundChannelSetVolume(lp_playerGroup, c_soundCategorySEmitters, lp_target, lp_duration);
    SoundChannelSetVolume(lp_playerGroup, c_soundCategorySPieces, lp_target, lp_duration);
    SoundChannelSetVolume(lp_playerGroup, c_soundCategorySpell, lp_target, lp_duration);
    SoundChannelSetVolume(lp_playerGroup, c_soundCategoryTV, lp_target, lp_duration);
    SoundChannelSetVolume(lp_playerGroup, c_soundCategoryUI, lp_target, lp_duration);
    SoundChannelSetVolume(lp_playerGroup, c_soundCategoryVoice, lp_target, lp_duration);
}

trigger auto_gf_WarningSystem_Trigger = null;
int auto_gf_WarningSystem_lp_player;
text auto_gf_WarningSystem_lp_description;

void gf_WarningSystem (int lp_player, text lp_description) {
    auto_gf_WarningSystem_lp_player = lp_player;
    auto_gf_WarningSystem_lp_description = lp_description;

    if (auto_gf_WarningSystem_Trigger == null) {
        auto_gf_WarningSystem_Trigger = TriggerCreate("auto_gf_WarningSystem_TriggerFunc");
    }

    TriggerExecute(auto_gf_WarningSystem_Trigger, false, false);
}

bool auto_gf_WarningSystem_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_WarningSystem_lp_player;
    text lp_description = auto_gf_WarningSystem_lp_description;

    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(gv_warningItems[0], lp_description, PlayerGroupSingle(lp_player));
    DialogSetVisible(gv_warning, PlayerGroupSingle(lp_player), true);
    Wait(5.0, c_timeReal);
    DialogControlSetEnabled(gv_warningItems[1], PlayerGroupSingle(lp_player), true);
    return true;
}

trigger auto_gf_AnnouncementSystem_Trigger = null;
text auto_gf_AnnouncementSystem_lp_description;

void gf_AnnouncementSystem (text lp_description) {
    auto_gf_AnnouncementSystem_lp_description = lp_description;

    if (auto_gf_AnnouncementSystem_Trigger == null) {
        auto_gf_AnnouncementSystem_Trigger = TriggerCreate("auto_gf_AnnouncementSystem_TriggerFunc");
    }

    TriggerExecute(auto_gf_AnnouncementSystem_Trigger, false, false);
}

bool auto_gf_AnnouncementSystem_TriggerFunc (bool testConds, bool runActions) {
    text lp_description = auto_gf_AnnouncementSystem_lp_description;

    // Automatic Variable Declarations
    playergroup auto063E33C6_g;
    int auto063E33C6_var;

    // Implementation
    auto063E33C6_g = PlayerGroupAll();
    auto063E33C6_var = -1;
    while (true) {
        auto063E33C6_var = PlayerGroupNextPlayer(auto063E33C6_g, auto063E33C6_var);
        if (auto063E33C6_var < 0) { break; }
        libNtve_gf_SetDialogItemText(gv_announceItems[0], lp_description, PlayerGroupSingle(auto063E33C6_var));
        DialogSetVisible(gv_announce, PlayerGroupSingle(auto063E33C6_var), true);
    }
    return true;
}

void gf_CheckBlacklist () {
    // Automatic Variable Declarations
    playergroup autoFAAE5D15_g;
    int autoFAAE5D15_var;

    // Implementation
    autoFAAE5D15_g = PlayerGroupActive();
    autoFAAE5D15_var = -1;
    while (true) {
        autoFAAE5D15_var = PlayerGroupNextPlayer(autoFAAE5D15_g, autoFAAE5D15_var);
        if (autoFAAE5D15_var < 0) { break; }
        if ((gv_kicked[autoFAAE5D15_var] == true)) {
            DialogControlSetEnabled(gv_kickButton[autoFAAE5D15_var], PlayerGroupAll(), false);
            libNtve_gf_SetDialogItemText(gv_kickButton[autoFAAE5D15_var], StringExternal("Param/Value/A13240DD"), PlayerGroupAll());
            libNtve_gf_CreateDialogItemImage(gv_playerCardDialog[autoFAAE5D15_var], 100, 100, c_anchorTop, 0, 15, StringToText(""), "Assets\\Textures\\btn-command-cancel.dds", c_triggerImageTypeNormal, false, Color(100.00, 0.00, 0.00), c_triggerBlendModeNormal);
            SoundPlay(SoundLink("UI_GenericError", 0), PlayerGroupAll(), 100.0, 0.0);
        }

    }
}

trigger auto_gf_SkipCountdown_Trigger = null;

void gf_SkipCountdown () {
    if (auto_gf_SkipCountdown_Trigger == null) {
        auto_gf_SkipCountdown_Trigger = TriggerCreate("auto_gf_SkipCountdown_TriggerFunc");
    }

    TriggerExecute(auto_gf_SkipCountdown_Trigger, false, false);
}

bool auto_gf_SkipCountdown_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_hasplayed;
    bool lv_braxis;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((TimerGetRemaining(gv_startTimer) > 0.0)) {
        if ((ModF(TimerGetRemaining(gv_startTimer), 2.0) < 1.0)) {
            libNtve_gf_SetDialogItemText(gv_recordStatsButton, StringExternal("Param/Value/7BF60D51"), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemText(gv_recordStatsButton, StringExternal("Param/Value/23025840"), PlayerGroupAll());
        }
        if ((TimerGetRemaining(gv_startTimer) > 5.0)) {
            libNtve_gf_SetDialogItemText(libNtve_gf_ValueFromDataTableDialogItem(true, "SkipButton"), (StringExternal("Param/Value/C5F8AC12") + IntToText(gv_skipVoteRequired) + StringExternal("Param/Value/A17970D5") + FixedToText(TimerGetRemaining(gv_startTimer), 1) + StringExternal("Param/Value/B82C5A13")), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemText(libNtve_gf_ValueFromDataTableDialogItem(true, "SkipButton"), (StringExternal("Param/Value/701917E5") + IntToText(gv_skipVoteRequired) + StringExternal("Param/Value/561C5547") + FixedToText(TimerGetRemaining(gv_startTimer), 1) + StringExternal("Param/Value/50996F65")), PlayerGroupAll());
            if ((lv_hasplayed == false)) {
                SoundPlay(SoundLink("Alert_BaseUnderAttackKlaxon", 0), PlayerGroupAll(), 100.0, 0.0);
                lv_hasplayed = true;
            }

        }
        Wait(0.1, c_timeReal);
    }
    return true;
}

void gf_GenerateProfileBox (int lp_player) {
    // Variable Declarations
    int lv_dialogWidth;
    int lv_dialogHeight;
    int lv_xMinSeparation;
    int lv_buttonXSize;
    int lv_buttonYSize;
    int lv_buttonInitialYOffset;
    string lv_identifier;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dialogWidth = 220;
    lv_dialogHeight = 400;
    lv_xMinSeparation = 10;
    lv_buttonXSize = 200;
    lv_buttonYSize = 50;
    lv_buttonInitialYOffset = 25;
    lv_identifier = ("ProfileBox" + IntToString(lp_player));

    // Implementation
    DialogDestroy(DataTableGetDialog(true, lv_identifier));
    DialogCreate(lv_dialogWidth, lv_dialogHeight, c_anchorCenter, 0, 0, true);
    DataTableSetDialog(true, lv_identifier, DialogLastCreated());
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(lp_player), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gf_GenerateWindowTab(DialogLastCreated(), true, true, true, true, 5, 5, c_anchorTopLeft, c_anchorTopRight, StringExternal("Param/Value/38AC43B9"));
    gf_GenerateWindowUI(DialogLastCreated(), Color(100.00, 100.00, 100.00), Color(9.80, 9.80, 9.80));
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_buttonXSize, lv_buttonYSize, c_anchorTopLeft, lv_xMinSeparation, (lv_buttonInitialYOffset + (lv_buttonYSize * 0)), StringToText(""), StringExternal("Param/Value/B75FA42C"), "");
    libNtve_gf_SaveDataTableValueDialogItem(true, ("ProfileRefresh" + IntToString(lp_player)), DialogControlLastCreated());
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_buttonXSize, lv_buttonYSize, c_anchorTopLeft, lv_xMinSeparation, (lv_buttonInitialYOffset + (lv_buttonYSize * 1)), StringToText(""), StringExternal("Param/Value/90063BB5"), "");
    gv_playerCardStore[lp_player] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_buttonXSize, lv_buttonYSize, c_anchorTopLeft, lv_xMinSeparation, (lv_buttonInitialYOffset + (lv_buttonYSize * 2)), StringToText(""), StringExternal("Param/Value/2BDAA614"), "");
    libNtve_gf_SaveDataTableValueDialogItem(true, ("ProfileQuoteButton" + IntToString(lp_player)), DialogControlLastCreated());
    gf_GeneratePlayerCard(lp_player, true, false, 0, 0, c_anchorCenter, "profile");
    DialogSetVisible(gv_playerCardDialog[lp_player], PlayerGroupAll(), false);
    DialogSetVisible(gv_playerCardDialog[lp_player], PlayerGroupSingle(lp_player), true);
    DialogSetPositionRelative(gv_playerCardDialog[lp_player], c_anchorTopLeft, DataTableGetDialog(true, ("ProfileBox" + IntToString(EventPlayer()))), c_anchorTopRight, 0, 0);
}

void gf_GenerateProfileQuoteBox (int lp_player) {
    // Variable Declarations
    int lv_dialogWidth;
    int lv_dialogHeight;
    int lv_buttonXSize;
    int lv_buttonYSize;
    int lv_buttonInitialYOffset;
    string lv_identifier;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dialogWidth = 500;
    lv_dialogHeight = 150;
    lv_buttonXSize = 200;
    lv_buttonYSize = 50;
    lv_buttonInitialYOffset = 25;
    lv_identifier = ("ProfileQuoteBox" + IntToString(lp_player));

    // Implementation
    DialogDestroy(DataTableGetDialog(true, lv_identifier));
    DialogCreate(lv_dialogWidth, lv_dialogHeight, c_anchorCenter, 0, 0, true);
    DataTableSetDialog(true, lv_identifier, DialogLastCreated());
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(lp_player), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gf_GenerateWindowTab(DialogLastCreated(), true, true, true, true, 5, 5, c_anchorTopLeft, c_anchorTopRight, StringExternal("Param/Value/18E66FB3"));
    gf_GenerateWindowUI(DialogLastCreated(), Color(100.00, 100.00, 100.00), Color(9.80, 9.80, 9.80));
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    libNtve_gf_SaveDataTableValueDialogItem(true, ("ProfileQuoteEditBox" + IntToString(lp_player)), DialogControlLastCreated());
    libNtve_gf_SetDialogItemEditorValue(DialogControlLastCreated(), gv_pQProfileQuote[lp_player], PlayerGroupSingle(lp_player));
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 450, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, lv_buttonInitialYOffset);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_buttonXSize, lv_buttonYSize, c_anchorBottom, 0, lv_buttonInitialYOffset, StringToText(""), StringExternal("Param/Value/60532683"), "");
    libNtve_gf_SaveDataTableValueDialogItem(true, ("ProfileQuoteDone" + IntToString(lp_player)), DialogControlLastCreated());
}

void gf_GenerateWindowTab (int lp_dialog, bool lp_showLiquify, bool lp_showMinimize, bool lp_showClose, bool lp_allowMove, int lp_xOffset, int lp_yOffset, int lp_leftTabAnchor, int lp_rightTabAnchor, text lp_tabName) {
    // Variable Declarations
    int lv_freeblock;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_freeblock = 3;

    // Implementation
    if ((lp_showClose == true)) {
        libNtve_gf_CreateDialogItemButton(lp_dialog, 25, 20, lp_rightTabAnchor, (lp_xOffset + (25 * (3 - lv_freeblock))), lp_yOffset, StringExternal("Param/Value/CAD39978"), StringToText(""), "");
        libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 111.0, PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(100.00, 0.00, 0.00), PlayerGroupAll());
        lv_freeblock -= 1;
    }

    if ((lp_showMinimize == true)) {
        libNtve_gf_CreateDialogItemButton(lp_dialog, 25, 20, lp_rightTabAnchor, (lp_xOffset + (25 * (3 - lv_freeblock))), lp_yOffset, StringExternal("Param/Value/F1078139"), StringToText(""), "");
        libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), DialogGetHeight(lp_dialog), PlayerGroupAll());
        libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 222.0, PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(254*100/255,138*100/255,14*100/255), PlayerGroupAll());
        lv_freeblock -= 1;
    }

    if ((lp_showLiquify == true)) {
        libNtve_gf_CreateDialogItemButton(lp_dialog, 25, 20, lp_rightTabAnchor, (lp_xOffset + (25 * (3 - lv_freeblock))), lp_yOffset, StringExternal("Param/Value/302DE32D"), StringToText(""), "");
        libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 333.0, PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(22*100/255,128*100/255,0), PlayerGroupAll());
        lv_freeblock -= 1;
    }

    libNtve_gf_CreateDialogItemButton(lp_dialog, ((DialogGetWidth(lp_dialog) - 85) + (25 * lv_freeblock)), 20, lp_leftTabAnchor, lp_xOffset, lp_yOffset, StringExternal("Param/Value/3DA97BCD"), lp_tabName, "");
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 444.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize12Bold", PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(100,100,100), PlayerGroupAll());
    if ((lp_allowMove == false)) {
        gf_EnableDisableButton(DialogControlLastCreated(), false, PlayerGroupAll());
    }

}

void gf_GenerateWindowUI (int lp_dialog, color lp_borderColor, color lp_backgroundColor) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateDialogItemImage(lp_dialog, DialogGetWidth(lp_dialog), DialogGetHeight(lp_dialog), c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\border-transportslot-filled.dds", c_triggerImageTypeBorder, true, lp_borderColor, c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(lp_dialog, DialogGetWidth(lp_dialog), DialogGetHeight(lp_dialog), c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, lp_backgroundColor, c_triggerBlendModeAdd);
}

void gf_GenerateVicOS (int lp_player) {
    // Variable Declarations
    int lv_dialogWidth;
    int lv_dialogHeight;
    int lv_xMinSeparation;
    int lv_buttonXSize;
    int lv_buttonYSize;
    int lv_buttonInitialYOffset;
    int lv_textInitialYOffset;
    int lv_secondColumnOffset;
    string lv_identifier;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dialogWidth = 220;
    lv_dialogHeight = 400;
    lv_xMinSeparation = 10;
    lv_buttonXSize = 200;
    lv_buttonYSize = 50;
    lv_buttonInitialYOffset = 25;
    lv_textInitialYOffset = 40;
    lv_secondColumnOffset = 250;
    lv_identifier = ("VicOS" + IntToString(lp_player));

    // Implementation
    DialogDestroy(DataTableGetDialog(true, lv_identifier));
    DialogCreate(lv_dialogWidth, lv_dialogHeight, c_anchorLeft, 0, 0, true);
    DataTableSetDialog(true, lv_identifier, DialogLastCreated());
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(lp_player), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gf_GenerateWindowTab(DialogLastCreated(), true, true, true, true, 5, 5, c_anchorTopLeft, c_anchorTopRight, StringExternal("Param/Value/A73EE59B"));
    gf_GenerateWindowUI(DialogLastCreated(), Color(100.00, 100.00, 100.00), Color(9.80, 9.80, 9.80));
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, lv_buttonYSize, c_anchorTopLeft, lv_xMinSeparation, (lv_buttonInitialYOffset + (lv_buttonYSize * 0)), StringToText(""), StringExternal("Param/Value/B09BC977"), "");
    libNtve_gf_SaveDataTableValueDialogItem(true, ("SettingsButton" + IntToString(lp_player)), DialogControlLastCreated());
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, lv_buttonYSize, c_anchorTopLeft, lv_xMinSeparation, (lv_buttonInitialYOffset + (lv_buttonYSize * 1)), StringToText(""), StringExternal("Param/Value/0D4FDBB6"), "");
    libNtve_gf_SaveDataTableValueDialogItem(true, ("ProfileButton" + IntToString(lp_player)), DialogControlLastCreated());
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, lv_buttonYSize, c_anchorTopLeft, lv_xMinSeparation, (lv_buttonInitialYOffset + (lv_buttonYSize * 2)), StringToText(""), StringExternal("Param/Value/064F4FEE"), "");
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_SaveDataTableValueDialogItem(true, ("TutorialButton" + IntToString(lp_player)), DialogControlLastCreated());
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, lv_buttonYSize, c_anchorTopLeft, lv_xMinSeparation, (lv_buttonInitialYOffset + (lv_buttonYSize * 3)), StringExternal("Param/Value/C153BE4E"), StringExternal("Param/Value/227338C5"), "");
    libNtve_gf_SaveDataTableValueDialogItem(true, ("MarketButton" + IntToString(lp_player)), DialogControlLastCreated());
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, lv_buttonYSize, c_anchorTopLeft, lv_xMinSeparation, (lv_buttonInitialYOffset + (lv_buttonYSize * 5)), StringExternal("Param/Value/701F5517"), StringExternal("Param/Value/5ABA216F"), "");
    libNtve_gf_SaveDataTableValueDialogItem(true, ("RestoreStatsButton" + IntToString(lp_player)), DialogControlLastCreated());
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, lv_buttonYSize, c_anchorTopLeft, lv_xMinSeparation, (lv_buttonInitialYOffset + (lv_buttonYSize * 6)), StringExternal("Param/Value/43BB1C5C"), StringExternal("Param/Value/C969CE2A"), "");
    libNtve_gf_SaveDataTableValueDialogItem(true, ("SaveButton" + IntToString(lp_player)), DialogControlLastCreated());
    if ((UnitIsAlive(gv_unit[lp_player]) == true)) {
        DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    }

}

string gf_Keytostring (int lp_key) {
    // Variable Declarations
    string lv_key;

    // Automatic Variable Declarations
    int auto89517E36_val;

    // Variable Initialization
    lv_key = "";

    // Implementation
    auto89517E36_val = lp_key;
    if (auto89517E36_val == c_key0) {
        lv_key = "0";
    }
    else if (auto89517E36_val == c_key1) {
        lv_key = "1";
    }
    else if (auto89517E36_val == c_key2) {
        lv_key = "2";
    }
    else if (auto89517E36_val == c_key3) {
        lv_key = "3";
    }
    else if (auto89517E36_val == c_key4) {
        lv_key = "4";
    }
    else if (auto89517E36_val == c_key5) {
        lv_key = "5";
    }
    else if (auto89517E36_val == c_key6) {
        lv_key = "6";
    }
    else if (auto89517E36_val == c_key7) {
        lv_key = "7";
    }
    else if (auto89517E36_val == c_key8) {
        lv_key = "8";
    }
    else if (auto89517E36_val == c_key9) {
        lv_key = "9";
    }
    else if (auto89517E36_val == c_keyA) {
        lv_key = "A";
    }
    else if (auto89517E36_val == c_keyAlt) {
        lv_key = "ALT";
    }
    else if (auto89517E36_val == c_keyApostrophe) {
        lv_key = "'";
    }
    else if (auto89517E36_val == c_keyB) {
        lv_key = "B";
    }
    else if (auto89517E36_val == c_keyBackSlash) {
        lv_key = "\\";
    }
    else if (auto89517E36_val == c_keyBackSpace) {
        lv_key = "BSPC";
    }
    else if (auto89517E36_val == c_keyBracketClose) {
        lv_key = "]";
    }
    else if (auto89517E36_val == c_keyBracketOpen) {
        lv_key = "[";
    }
    else if (auto89517E36_val == c_keyC) {
        lv_key = "C";
    }
    else if (auto89517E36_val == c_keyCapsLock) {
        lv_key = "CAPS";
    }
    else if (auto89517E36_val == c_keyComma) {
        lv_key = ",";
    }
    else if (auto89517E36_val == c_keyControl) {
        lv_key = "CTRL";
    }
    else if (auto89517E36_val == c_keyD) {
        lv_key = "D";
    }
    else if (auto89517E36_val == c_keyDelete) {
        lv_key = "DLT";
    }
    else if (auto89517E36_val == c_keyDown) {
        lv_key = "DOWN";
    }
    else if (auto89517E36_val == c_keyE) {
        lv_key = "E";
    }
    else if (auto89517E36_val == c_keyEnd) {
        lv_key = "End";
    }
    else if (auto89517E36_val == c_keyEnter) {
        lv_key = "ENTR";
    }
    else if (auto89517E36_val == c_keyEquals) {
        lv_key = "=";
    }
    else if (auto89517E36_val == c_keyEscape) {
        lv_key = "ESC";
    }
    else if (auto89517E36_val == c_keyF) {
        lv_key = "F";
    }
    else if (auto89517E36_val == c_keyF1) {
        lv_key = "F1";
    }
    else if (auto89517E36_val == c_keyF10) {
        lv_key = "F10";
    }
    else if (auto89517E36_val == c_keyF11) {
        lv_key = "F11";
    }
    else if (auto89517E36_val == c_keyF12) {
        lv_key = "F12";
    }
    else if (auto89517E36_val == c_keyF2) {
        lv_key = "F2";
    }
    else if (auto89517E36_val == c_keyF3) {
        lv_key = "F3";
    }
    else if (auto89517E36_val == c_keyF4) {
        lv_key = "F4";
    }
    else if (auto89517E36_val == c_keyF5) {
        lv_key = "F5";
    }
    else if (auto89517E36_val == c_keyF6) {
        lv_key = "F6";
    }
    else if (auto89517E36_val == c_keyF7) {
        lv_key = "F7";
    }
    else if (auto89517E36_val == c_keyF8) {
        lv_key = "F8";
    }
    else if (auto89517E36_val == c_keyF9) {
        lv_key = "F9";
    }
    else if (auto89517E36_val == c_keyG) {
        lv_key = "G";
    }
    else if (auto89517E36_val == c_keyGrave) {
        lv_key = "`";
    }
    else if (auto89517E36_val == c_keyH) {
        lv_key = "H";
    }
    else if (auto89517E36_val == c_keyHome) {
        lv_key = "HOME";
    }
    else if (auto89517E36_val == c_keyI) {
        lv_key = "I";
    }
    else if (auto89517E36_val == c_keyInsert) {
        lv_key = "INSERT";
    }
    else if (auto89517E36_val == c_keyJ) {
        lv_key = "J";
    }
    else if (auto89517E36_val == c_keyK) {
        lv_key = "K";
    }
    else if (auto89517E36_val == c_keyL) {
        lv_key = "L";
    }
    else if (auto89517E36_val == c_keyLeft) {
        lv_key = "LEFT";
    }
    else if (auto89517E36_val == c_keyM) {
        lv_key = "M";
    }
    else if (auto89517E36_val == c_keyMinus) {
        lv_key = "-";
    }
    else if (auto89517E36_val == c_keyN) {
        lv_key = "N";
    }
    else if (auto89517E36_val == c_keyNextTrack) {
        lv_key = "NEXT TRACK";
    }
    else if (auto89517E36_val == c_keyNone) {
        lv_key = "NONE";
    }
    else if (auto89517E36_val == c_keyNumLock) {
        lv_key = "NUMLOCK";
    }
    else if (auto89517E36_val == c_keyNumPad0) {
        lv_key = "NUM 0";
    }
    else if (auto89517E36_val == c_keyNumPad1) {
        lv_key = "NUM 1";
    }
    else if (auto89517E36_val == c_keyNumPad2) {
        lv_key = "NUM 2";
    }
    else if (auto89517E36_val == c_keyNumPad3) {
        lv_key = "NUM 3";
    }
    else if (auto89517E36_val == c_keyNumPad4) {
        lv_key = "NUM 4";
    }
    else if (auto89517E36_val == c_keyNumPad5) {
        lv_key = "NUM 5";
    }
    else if (auto89517E36_val == c_keyNumPad6) {
        lv_key = "NUM 6";
    }
    else if (auto89517E36_val == c_keyNumPad7) {
        lv_key = "NUM 7";
    }
    else if (auto89517E36_val == c_keyNumPad8) {
        lv_key = "NUM 8";
    }
    else if (auto89517E36_val == c_keyNumPad9) {
        lv_key = "NUM 9";
    }
    else if (auto89517E36_val == c_keyNumPadDecimal) {
        lv_key = "NUM .";
    }
    else if (auto89517E36_val == c_keyNumPadDivide) {
        lv_key = "NUM /";
    }
    else if (auto89517E36_val == c_keyNumPadMinus) {
        lv_key = "NUM -";
    }
    else if (auto89517E36_val == c_keyNumPadMultiply) {
        lv_key = "NUM *";
    }
    else if (auto89517E36_val == c_keyNumPadPlus) {
        lv_key = "NUM +";
    }
    else if (auto89517E36_val == c_keyO) {
        lv_key = "O";
    }
    else if (auto89517E36_val == c_keyP) {
        lv_key = "P";
    }
    else if (auto89517E36_val == c_keyPageDown) {
        lv_key = "PGDWN";
    }
    else if (auto89517E36_val == c_keyPageUp) {
        lv_key = "PGUP";
    }
    else if (auto89517E36_val == c_keyPause) {
        lv_key = "PAUSE";
    }
    else if (auto89517E36_val == c_keyPeriod) {
        lv_key = ".";
    }
    else if (auto89517E36_val == c_keyPrevTrack) {
        lv_key = "PREVTRACK";
    }
    else if (auto89517E36_val == c_keyPrintScreen) {
        lv_key = "PRT SC";
    }
    else if (auto89517E36_val == c_keyQ) {
        lv_key = "Q";
    }
    else if (auto89517E36_val == c_keyR) {
        lv_key = "R";
    }
    else if (auto89517E36_val == c_keyRight) {
        lv_key = "RIGHT";
    }
    else if (auto89517E36_val == c_keyS) {
        lv_key = "S";
    }
    else if (auto89517E36_val == c_keyScrollLock) {
        lv_key = "SCROLL LOCK";
    }
    else if (auto89517E36_val == c_keySemiColon) {
        lv_key = ";";
    }
    else if (auto89517E36_val == c_keyShift) {
        lv_key = "SHIFT";
    }
    else if (auto89517E36_val == c_keySlash) {
        lv_key = "/";
    }
    else if (auto89517E36_val == c_keySpace) {
        lv_key = "SPACE";
    }
    else if (auto89517E36_val == c_keyT) {
        lv_key = "T";
    }
    else if (auto89517E36_val == c_keyTab) {
        lv_key = "TAB";
    }
    else if (auto89517E36_val == c_keyU) {
        lv_key = "U";
    }
    else if (auto89517E36_val == c_keyUp) {
        lv_key = "UP";
    }
    else if (auto89517E36_val == c_keyV) {
        lv_key = "V";
    }
    else if (auto89517E36_val == c_keyW) {
        lv_key = "W";
    }
    else if (auto89517E36_val == c_keyX) {
        lv_key = "X";
    }
    else if (auto89517E36_val == c_keyY) {
        lv_key = "Y";
    }
    else if (auto89517E36_val == c_keyZ) {
        lv_key = "Z";
    }
    else {
    }
    return lv_key;
}

int gf_Stringtokey (string lp_string) {
    // Variable Declarations
    int lv_string;

    // Automatic Variable Declarations
    string auto0319D383_val;

    // Variable Initialization

    // Implementation
    auto0319D383_val = lp_string;
    if (auto0319D383_val == "0") {
        lv_string = c_key0;
    }
    else if (auto0319D383_val == "1") {
        lv_string = c_key1;
    }
    else if (auto0319D383_val == "2") {
        lv_string = c_key2;
    }
    else if (auto0319D383_val == "3") {
        lv_string = c_key3;
    }
    else if (auto0319D383_val == "4") {
        lv_string = c_key4;
    }
    else if (auto0319D383_val == "5") {
        lv_string = c_key5;
    }
    else if (auto0319D383_val == "6") {
        lv_string = c_key6;
    }
    else if (auto0319D383_val == "7") {
        lv_string = c_key7;
    }
    else if (auto0319D383_val == "8") {
        lv_string = c_key8;
    }
    else if (auto0319D383_val == "9") {
        lv_string = c_key9;
    }
    else if (auto0319D383_val == "A") {
        lv_string = c_keyA;
    }
    else if (auto0319D383_val == "ALT") {
        lv_string = c_keyAlt;
    }
    else if (auto0319D383_val == "'") {
        lv_string = c_keyApostrophe;
    }
    else if (auto0319D383_val == "B") {
        lv_string = c_keyB;
    }
    else if (auto0319D383_val == "\\") {
        lv_string = c_keyBackSlash;
    }
    else if (auto0319D383_val == "BSPC") {
        lv_string = c_keyBackSpace;
    }
    else if (auto0319D383_val == "]") {
        lv_string = c_keyBracketClose;
    }
    else if (auto0319D383_val == "[") {
        lv_string = c_keyBracketOpen;
    }
    else if (auto0319D383_val == "C") {
        lv_string = c_keyC;
    }
    else if (auto0319D383_val == "CAPS") {
        lv_string = c_keyCapsLock;
    }
    else if (auto0319D383_val == ",") {
        lv_string = c_keyComma;
    }
    else if (auto0319D383_val == "CTRL") {
        lv_string = c_keyControl;
    }
    else if (auto0319D383_val == "D") {
        lv_string = c_keyD;
    }
    else if (auto0319D383_val == "DLT") {
        lv_string = c_keyDelete;
    }
    else if (auto0319D383_val == "DOWN") {
        lv_string = c_keyDown;
    }
    else if (auto0319D383_val == "E") {
        lv_string = c_keyE;
    }
    else if (auto0319D383_val == "END") {
        lv_string = c_keyEnd;
    }
    else if (auto0319D383_val == "ENTR") {
        lv_string = c_keyEnter;
    }
    else if (auto0319D383_val == "=") {
        lv_string = c_keyEquals;
    }
    else if (auto0319D383_val == "ESC") {
        lv_string = c_keyEscape;
    }
    else if (auto0319D383_val == "F") {
        lv_string = c_keyF;
    }
    else if (auto0319D383_val == "F1") {
        lv_string = c_keyF1;
    }
    else if (auto0319D383_val == "F10") {
        lv_string = c_keyF10;
    }
    else if (auto0319D383_val == "F11") {
        lv_string = c_keyF11;
    }
    else if (auto0319D383_val == "F12") {
        lv_string = c_keyF12;
    }
    else if (auto0319D383_val == "F2") {
        lv_string = c_keyF2;
    }
    else if (auto0319D383_val == "F3") {
        lv_string = c_keyF3;
    }
    else if (auto0319D383_val == "F4") {
        lv_string = c_keyF4;
    }
    else if (auto0319D383_val == "F5") {
        lv_string = c_keyF5;
    }
    else if (auto0319D383_val == "F6") {
        lv_string = c_keyF6;
    }
    else if (auto0319D383_val == "F7") {
        lv_string = c_keyF7;
    }
    else if (auto0319D383_val == "F8") {
        lv_string = c_keyF8;
    }
    else if (auto0319D383_val == "F9") {
        lv_string = c_keyF9;
    }
    else if (auto0319D383_val == "G") {
        lv_string = c_keyG;
    }
    else if (auto0319D383_val == "`") {
        lv_string = c_keyGrave;
    }
    else if (auto0319D383_val == "H") {
        lv_string = c_keyH;
    }
    else if (auto0319D383_val == "HOME") {
        lv_string = c_keyHome;
    }
    else if (auto0319D383_val == "I") {
        lv_string = c_keyI;
    }
    else if (auto0319D383_val == "INSERT") {
        lv_string = c_keyInsert;
    }
    else if (auto0319D383_val == "J") {
        lv_string = c_keyJ;
    }
    else if (auto0319D383_val == "K") {
        lv_string = c_keyK;
    }
    else if (auto0319D383_val == "L") {
        lv_string = c_keyL;
    }
    else if (auto0319D383_val == "LEFT") {
        lv_string = c_keyLeft;
    }
    else if (auto0319D383_val == "M") {
        lv_string = c_keyM;
    }
    else if (auto0319D383_val == "-") {
        lv_string = c_keyMinus;
    }
    else if (auto0319D383_val == "N") {
        lv_string = c_keyN;
    }
    else if (auto0319D383_val == "NEXT TRACK") {
        lv_string = c_keyNextTrack;
    }
    else if (auto0319D383_val == "NONE") {
        lv_string = c_keyNone;
    }
    else if (auto0319D383_val == "NUMLOCK") {
        lv_string = c_keyNumLock;
    }
    else if (auto0319D383_val == "NUM 0") {
        lv_string = c_keyNumPad0;
    }
    else if (auto0319D383_val == "NUM 1") {
        lv_string = c_keyNumPad1;
    }
    else if (auto0319D383_val == "NUM 2") {
        lv_string = c_keyNumPad2;
    }
    else if (auto0319D383_val == "NUM 3") {
        lv_string = c_keyNumPad3;
    }
    else if (auto0319D383_val == "NUM 4") {
        lv_string = c_keyNumPad4;
    }
    else if (auto0319D383_val == "NUM 5") {
        lv_string = c_keyNumPad5;
    }
    else if (auto0319D383_val == "NUM 6") {
        lv_string = c_keyNumPad6;
    }
    else if (auto0319D383_val == "NUM 7") {
        lv_string = c_keyNumPad7;
    }
    else if (auto0319D383_val == "NUM 8") {
        lv_string = c_keyNumPad8;
    }
    else if (auto0319D383_val == "NUM 9") {
        lv_string = c_keyNumPad9;
    }
    else if (auto0319D383_val == "NUM .") {
        lv_string = c_keyNumPadDecimal;
    }
    else if (auto0319D383_val == "NUM /") {
        lv_string = c_keyNumPadDivide;
    }
    else if (auto0319D383_val == "NUM -") {
        lv_string = c_keyNumPadMinus;
    }
    else if (auto0319D383_val == "NUM *") {
        lv_string = c_keyNumPadMultiply;
    }
    else if (auto0319D383_val == "NUM +") {
        lv_string = c_keyNumPadPlus;
    }
    else if (auto0319D383_val == "O") {
        lv_string = c_keyO;
    }
    else if (auto0319D383_val == "P") {
        lv_string = c_keyP;
    }
    else if (auto0319D383_val == "PGDWN") {
        lv_string = c_keyPageDown;
    }
    else if (auto0319D383_val == "PGUP") {
        lv_string = c_keyPageUp;
    }
    else if (auto0319D383_val == "PAUSE") {
        lv_string = c_keyPause;
    }
    else if (auto0319D383_val == ".") {
        lv_string = c_keyPeriod;
    }
    else if (auto0319D383_val == "PREVTRACK") {
        lv_string = c_keyPrevTrack;
    }
    else if (auto0319D383_val == "PRT SC") {
        lv_string = c_keyPrintScreen;
    }
    else if (auto0319D383_val == "Q") {
        lv_string = c_keyQ;
    }
    else if (auto0319D383_val == "R") {
        lv_string = c_keyR;
    }
    else if (auto0319D383_val == "RIGHT") {
        lv_string = c_keyRight;
    }
    else if (auto0319D383_val == "S") {
        lv_string = c_keyS;
    }
    else if (auto0319D383_val == "SCROLL LOCK") {
        lv_string = c_keyScrollLock;
    }
    else if (auto0319D383_val == ";") {
        lv_string = c_keySemiColon;
    }
    else if (auto0319D383_val == "SHIFT") {
        lv_string = c_keyShift;
    }
    else if (auto0319D383_val == "/") {
        lv_string = c_keySlash;
    }
    else if (auto0319D383_val == "SPACE") {
        lv_string = c_keySpace;
    }
    else if (auto0319D383_val == "T") {
        lv_string = c_keyT;
    }
    else if (auto0319D383_val == "TAB") {
        lv_string = c_keyTab;
    }
    else if (auto0319D383_val == "UP") {
        lv_string = c_keyUp;
    }
    else if (auto0319D383_val == "V") {
        lv_string = c_keyV;
    }
    else if (auto0319D383_val == "W") {
        lv_string = c_keyW;
    }
    else if (auto0319D383_val == "X") {
        lv_string = c_keyX;
    }
    else if (auto0319D383_val == "Y") {
        lv_string = c_keyY;
    }
    else if (auto0319D383_val == "Z") {
        lv_string = c_keyZ;
    }
    else {
    }
    return lv_string;
}

trigger auto_gf_Movement_Trigger = null;
int auto_gf_Movement_lp_player;
unit auto_gf_Movement_lp_unit;

void gf_Movement (int lp_player, unit lp_unit) {
    auto_gf_Movement_lp_player = lp_player;
    auto_gf_Movement_lp_unit = lp_unit;

    if (auto_gf_Movement_Trigger == null) {
        auto_gf_Movement_Trigger = TriggerCreate("auto_gf_Movement_TriggerFunc");
    }

    TriggerExecute(auto_gf_Movement_Trigger, false, false);
}

bool auto_gf_Movement_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_Movement_lp_player;
    unit lp_unit = auto_gf_Movement_lp_unit;

    // Variable Declarations
    int lv_player;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = lp_player;
    lv_unit = lp_unit;

    // Implementation
    gv_alreadyRunning[lv_player] = true;
    while ((UnitIsAlive(lv_unit) == true) && ((gv_moving[lp_player][1] == true) || (gv_moving[lp_player][2] == true) || (gv_moving[lp_player][3] == true) || (gv_moving[lp_player][4] == true) || (gv_moving[lp_player][5] == true) || (gv_moving[lp_player][6] == true) || (gv_moving[lp_player][7] == true) || (gv_moving[lp_player][8] == true))) {
        if ((gv_silentHillControlScheme[EventPlayer()] == true)) {
            UnitSetState(lv_unit, c_unitStateTurnSuppressed, false);
            UnitSetState(lv_unit, c_unitStateFidget, false);
        }

        if ((gv_moving[lp_player][6] == true)) {
            UnitSetFacing(lv_unit, (UnitGetFacing(lv_unit) + 2.0), 0.0);
        }

        if ((gv_moving[lp_player][8] == true)) {
            UnitSetFacing(lv_unit, (UnitGetFacing(lv_unit) - 2.0), 0.0);
        }

        if ((gv_cameraFollowsFacing[lv_player] == true)) {
            gf_RotateCamera(lv_player, UnitGetFacing(gv_unit[lv_player]), 0.4);
        }

        if ((gv_moving[lp_player][1] == false) && (gv_moving[lp_player][2] == false) && (gv_moving[lp_player][3] == false) && (gv_moving[lp_player][4] == false) && (gv_moving[lp_player][5] == false) && (gv_moving[lp_player][7] == false)) {
        }
        else {
            UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_unit), 0.2, gf_GetDirection(lv_player))), c_orderQueueReplace);
        }
        Wait(0.0, c_timeGame);
    }
    gv_alreadyRunning[lv_player] = false;
    UnitSetState(lv_unit, c_unitStateTurnSuppressed, true);
    UnitSetState(lv_unit, c_unitStateFidget, true);
    return true;
}

fixed gf_GetDirection (int lp_player) {
    // Variable Declarations
    int lv_player;
    fixed lv_direction;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = lp_player;
    lv_direction = gv_currentRotation[lv_player];

    // Implementation
    if ((gv_moving[lv_player][1] == false) && (gv_moving[lv_player][2] == false) && (gv_moving[lv_player][3] == false) && (gv_moving[lv_player][4] == true)) {
        lv_direction -= 90.0;
    }

    if ((gv_moving[lv_player][1] == true) && (gv_moving[lv_player][2] == false) && (gv_moving[lv_player][3] == false) && (gv_moving[lv_player][4] == true)) {
        lv_direction -= 45.0;
    }

    if ((gv_moving[lv_player][1] == true) && (gv_moving[lv_player][2] == false) && (gv_moving[lv_player][3] == false) && (gv_moving[lv_player][4] == false)) {
        lv_direction -= 0.0;
    }

    if ((gv_moving[lv_player][1] == true) && (gv_moving[lv_player][2] == true) && (gv_moving[lv_player][3] == false) && (gv_moving[lv_player][4] == false)) {
        lv_direction += 45.0;
    }

    if ((gv_moving[lv_player][1] == false) && (gv_moving[lv_player][2] == true) && (gv_moving[lv_player][3] == false) && (gv_moving[lv_player][4] == false)) {
        lv_direction += 90.0;
    }

    if ((gv_moving[lv_player][1] == false) && (gv_moving[lv_player][2] == true) && (gv_moving[lv_player][3] == true) && (gv_moving[lv_player][4] == false)) {
        lv_direction += 135.0;
    }

    if ((gv_moving[lv_player][1] == false) && (gv_moving[lv_player][2] == false) && (gv_moving[lv_player][3] == true) && (gv_moving[lv_player][4] == false)) {
        lv_direction += 180.0;
    }

    if ((gv_moving[lv_player][1] == false) && (gv_moving[lv_player][2] == false) && (gv_moving[lv_player][3] == true) && (gv_moving[lv_player][4] == true)) {
        lv_direction += 225.0;
    }

    if ((gv_moving[lv_player][5] == true)) {
        lv_direction = UnitGetFacing(gv_unit[lp_player]);
    }

    if ((gv_moving[lv_player][7] == true)) {
        lv_direction = UnitGetFacing(gv_unit[lp_player]);
        lv_direction -= 180.0;
    }

    return lv_direction;
}

void gf_RestoreRotation (int lp_player) {
    // Variable Declarations
    bool lv_picked;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_currentRotation[lp_player] > -45.0) && (gv_currentRotation[lp_player] <= 45.0)) {
        gf_RotateCamera(lp_player, 0.0, 1.5);
    }
    else if ((gv_currentRotation[lp_player] > 45.0) && (gv_currentRotation[lp_player] <= 135.0)) {
        gf_RotateCamera(lp_player, 90.0, 1.5);
    }
    else if ((gv_currentRotation[lp_player] > -135.0) && (gv_currentRotation[lp_player] <= -45.0)) {
        gf_RotateCamera(lp_player, 270.0, 1.5);
    }
    else if (((gv_currentRotation[lp_player] > 135.0) || (gv_currentRotation[lp_player] <= -135.0))) {
        gf_RotateCamera(lp_player, 180.0, 1.5);
    }
}

void gf_RotateCamera (int lp_player, fixed lp_rotation, fixed lp_time) {
    // Variable Declarations
    int lv_player;
    fixed lv_rotation;
    fixed lv_time;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = lp_player;
    lv_rotation = lp_rotation;
    lv_time = lp_time;

    // Implementation
    gv_currentRotation[lv_player] = lv_rotation;
    CameraSetValue(lv_player, c_cameraValueYaw, gv_currentRotation[lv_player], lv_time, -1, 10.0);
}

string gf_GetLightingfromIndex (int lp_index) {
    // Automatic Variable Declarations
    int auto7B9C1272_val;

    // Implementation
    auto7B9C1272_val = lp_index;
    if (auto7B9C1272_val == 1) {
        return "BraxisAlpha";
    }
    else if (auto7B9C1272_val == 2) {
        return "EnhancedXoXVisuals";
    }
    else if (auto7B9C1272_val == 3) {
        return "Gritty";
    }
    else if (auto7B9C1272_val == 4) {
        return "Flat";
    }
    else {
        return "BraxisAlpha";
    }
}

void gf_AddLightingstoVisualDropList (int lp_dialogItem) {
    // Variable Declarations
    int lv_pickedinteger;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pickedinteger = 1;

    // Implementation
    libNtve_gf_SetDialogItemTooltip(lp_dialogItem, StringExternal("Param/Value/D51620C7"), PlayerGroupAll());
    while ((((lv_pickedinteger == 1) && (gf_GetLightingfromIndex(lv_pickedinteger) == "BraxisAlpha")) || (gf_GetLightingfromIndex(lv_pickedinteger) != "BraxisAlpha"))) {
        DialogControlAddItem(lp_dialogItem, PlayerGroupAll(), StringToText(StringReplaceWord((gf_GetLightingfromIndex(lv_pickedinteger)), "XoX", " ", c_stringReplaceAll, c_stringNoCase)));
        lv_pickedinteger += 1;
    }
}

void gf_GenerateVicOSButton () {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(500, 435, c_anchorBottomLeft, 0, 0, true);
    gv_settingsContainerDialog = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 125, 50, c_anchorTopLeft, 0, 103, StringToText(""), StringExternal("Param/Value/A29FF70A"), "");
    libNtve_gf_SaveDataTableValueDialogItem(true, "SettingsButton", DialogControlLastCreated());
}

void gf_InitialSettings () {
    // Variable Declarations
    bool lv_keyboardmovement;

    // Automatic Variable Declarations
    playergroup auto97FC0989_g;
    int auto97FC0989_var;
    playergroup auto1B4F95D9_g;
    int auto1B4F95D9_var;

    // Variable Initialization

    // Implementation
    auto97FC0989_g = gv_playing;
    auto97FC0989_var = -1;
    while (true) {
        auto97FC0989_var = PlayerGroupNextPlayer(auto97FC0989_g, auto97FC0989_var);
        if (auto97FC0989_var < 0) { break; }
        BankLoad("TheThingSettings1", auto97FC0989_var);
        gv_settingsBank[auto97FC0989_var] = BankLastCreated();
    }
    auto1B4F95D9_g = gv_playing;
    auto1B4F95D9_var = -1;
    while (true) {
        auto1B4F95D9_var = PlayerGroupNextPlayer(auto1B4F95D9_g, auto1B4F95D9_var);
        if (auto1B4F95D9_var < 0) { break; }
        gv_colorTagAlwaysShow[auto1B4F95D9_var] = BankValueGetAsFlag(gv_settingsBank[auto1B4F95D9_var], "Visuals", "ColorTagAlways");
        gv_visualsSelection[auto1B4F95D9_var] = MaxI(1, BankValueGetAsInt(gv_settingsBank[auto1B4F95D9_var], "Visuals", "Lighting"));
        lv_keyboardmovement = BankValueGetAsFlag(gv_settingsBank[auto1B4F95D9_var], "Controls", "KeyboardMovement");
        if ((lv_keyboardmovement == true)) {
            PlayerGroupAdd(gv_keyboardMovingPlayers, auto1B4F95D9_var);
        }

        gv_silentHillControlScheme[auto1B4F95D9_var] = BankValueGetAsFlag(gv_settingsBank[auto1B4F95D9_var], "Controls", "SilentHillScheme");
        gv_cameraFollowsFacing[auto1B4F95D9_var] = BankValueGetAsFlag(gv_settingsBank[auto1B4F95D9_var], "Visuals", "FollowFacing");
        if ((BankKeyExists(gv_settingsBank[auto1B4F95D9_var], "Controls", "Upkey") == true)) {
            gv_keyboardMovement[auto1B4F95D9_var].lv_upKey = gf_Stringtokey(BankValueGetAsString(gv_settingsBank[auto1B4F95D9_var], "Controls", "Upkey"));
        }

        if ((BankKeyExists(gv_settingsBank[auto1B4F95D9_var], "Controls", "Downkey") == true)) {
            gv_keyboardMovement[auto1B4F95D9_var].lv_downKey = gf_Stringtokey(BankValueGetAsString(gv_settingsBank[auto1B4F95D9_var], "Controls", "Downkey"));
        }

        if ((BankKeyExists(gv_settingsBank[auto1B4F95D9_var], "Controls", "Leftkey") == true)) {
            gv_keyboardMovement[auto1B4F95D9_var].lv_leftKey = gf_Stringtokey(BankValueGetAsString(gv_settingsBank[auto1B4F95D9_var], "Controls", "Leftkey"));
        }

        if ((BankKeyExists(gv_settingsBank[auto1B4F95D9_var], "Controls", "Rightkey") == true)) {
            gv_keyboardMovement[auto1B4F95D9_var].lv_rightKey = gf_Stringtokey(BankValueGetAsString(gv_settingsBank[auto1B4F95D9_var], "Controls", "Rightkey"));
        }

        if ((BankKeyExists(gv_settingsBank[auto1B4F95D9_var], "Controls", "Pickupkey") == true)) {
            gv_keyboardMovement[auto1B4F95D9_var].lv_pickupKey = gf_Stringtokey(BankValueGetAsString(gv_settingsBank[auto1B4F95D9_var], "Controls", "Pickupkey"));
        }

    }
}

void gf_GenerateSettingsBox (int lp_player) {
    // Variable Declarations
    int lv_dialogWidth;
    int lv_dialogHeight;
    int lv_xMinSeparation;
    int lv_checkboxSize;
    int lv_checkboxInitialYOffset;
    int lv_textInitialYOffset;
    int lv_secondColumnOffset;
    string lv_identifier;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dialogWidth = 500;
    lv_dialogHeight = 400;
    lv_xMinSeparation = 25;
    lv_checkboxSize = 50;
    lv_checkboxInitialYOffset = 25;
    lv_textInitialYOffset = 40;
    lv_secondColumnOffset = 250;
    lv_identifier = ("SettingsBox" + IntToString(lp_player));

    // Implementation
    while (gv_generatingPlayersSetting[lp_player]) {
        Wait(1.0, c_timeGame);
    }
    gv_generatingPlayersSetting[lp_player] = true;
    DialogDestroy(DataTableGetDialog(true, lv_identifier));
    DialogCreate(lv_dialogWidth, lv_dialogHeight, c_anchorCenter, 0, 0, true);
    DataTableSetDialog(true, lv_identifier, DialogLastCreated());
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(lp_player), true);
    gf_GenerateWindowTab(DialogLastCreated(), true, true, true, true, 5, 5, c_anchorTopLeft, c_anchorTopRight, StringExternal("Param/Value/977EDE0A"));
    gf_GenerateWindowUI(DialogLastCreated(), Color(100.00, 100.00, 100.00), Color(9.80, 9.80, 9.80));
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), (lv_secondColumnOffset - (lv_checkboxSize + lv_xMinSeparation)), lv_checkboxSize, c_anchorTopLeft, (lv_checkboxSize + lv_xMinSeparation), (lv_textInitialYOffset + (lv_checkboxSize * 1)), StringExternal("Param/Value/65009E3F"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), (lv_secondColumnOffset - (lv_checkboxSize + lv_xMinSeparation)), lv_checkboxSize, c_anchorTopLeft, (lv_checkboxSize + lv_xMinSeparation), (lv_textInitialYOffset + (lv_checkboxSize * 2)), StringExternal("Param/Value/5E76C258"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), (lv_secondColumnOffset - (lv_checkboxSize + lv_xMinSeparation)), lv_checkboxSize, c_anchorTopLeft, (lv_checkboxSize + lv_xMinSeparation), (lv_textInitialYOffset + (lv_checkboxSize * 3)), StringExternal("Param/Value/19046BA4"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), (lv_secondColumnOffset - (lv_checkboxSize + lv_xMinSeparation)), lv_checkboxSize, c_anchorTopLeft, (lv_checkboxSize + lv_xMinSeparation), (lv_textInitialYOffset + (lv_checkboxSize * 4)), StringExternal("Param/Value/51FD64CE"), Color(100,100,100), false, 2.0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePulldown);
    gv_visualsSettingsDropList[lp_player] = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_xMinSeparation, (lv_checkboxInitialYOffset + (lv_checkboxSize * 0)));
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 250, 50);
    gf_AddLightingstoVisualDropList(DialogControlLastCreated());
    DialogControlSelectItem(DialogControlLastCreated(), PlayerGroupAll(), gv_visualsSelection[lp_player]);
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), lv_checkboxSize, lv_checkboxSize, c_anchorTopLeft, lv_xMinSeparation, (lv_checkboxInitialYOffset + (lv_checkboxSize * 1)), StringExternal("Param/Value/19A09388"), false);
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), true, PlayerGroupAll());
    if ((gv_colorTagAlwaysShow[lp_player] == true)) {
        libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), true, PlayerGroupSingle(lp_player));
    }
    else {
        libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), false, PlayerGroupSingle(lp_player));
    }
    gv_colorTagAlwaysCheckBox[lp_player] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), lv_checkboxSize, lv_checkboxSize, c_anchorTopLeft, lv_xMinSeparation, (lv_checkboxInitialYOffset + (lv_checkboxSize * 4)), StringExternal("Param/Value/726AEB09"), false);
    if ((gv_cameraFollowsFacing[lp_player] == true)) {
        libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), true, PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), false, PlayerGroupAll());
    }
    gv_cameraFollowsFacingCheckBox[lp_player] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), lv_checkboxSize, lv_checkboxSize, c_anchorTopLeft, lv_xMinSeparation, (lv_checkboxInitialYOffset + (lv_checkboxSize * 3)), StringExternal("Param/Value/529EC304"), false);
    if ((gv_silentHillControlScheme[lp_player] == true)) {
        libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), true, PlayerGroupAll());
        DialogControlSetEnabled(gv_cameraFollowsFacingCheckBox[lp_player], PlayerGroupAll(), true);
    }
    else {
        libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), false, PlayerGroupAll());
        DialogControlSetEnabled(gv_cameraFollowsFacingCheckBox[lp_player], PlayerGroupAll(), false);
    }
    gv_silentHillControlSchemeCheckBox[lp_player] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), lv_checkboxSize, lv_checkboxSize, c_anchorTopLeft, lv_xMinSeparation, (lv_checkboxInitialYOffset + (lv_checkboxSize * 2)), StringExternal("Param/Value/74AAFA81"), false);
    if ((PlayerGroupHasPlayer(gv_keyboardMovingPlayers, lp_player) == true)) {
        libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), true, PlayerGroupAll());
        DialogControlSetEnabled(gv_silentHillControlSchemeCheckBox[lp_player], PlayerGroupAll(), true);
    }
    else {
        libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), false, PlayerGroupAll());
        DialogControlSetEnabled(gv_cameraFollowsFacingCheckBox[lp_player], PlayerGroupAll(), false);
        DialogControlSetEnabled(gv_silentHillControlSchemeCheckBox[lp_player], PlayerGroupAll(), false);
    }
    gv_keyboardMovementCheckBox[lp_player] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 150, lv_checkboxSize, c_anchorTopLeft, (lv_secondColumnOffset + lv_xMinSeparation), (lv_checkboxInitialYOffset + (lv_checkboxSize * 2)), StringExternal("Param/Value/EDB91C23"), StringExternal("Param/Value/27E0FB2C"), "");
    gv_keyboardMovementButton = DialogControlLastCreated();
    gv_generatingPlayersSetting[lp_player] = false;
}

void gf_ApplySettings () {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    playergroup auto87652B22_g;
    int auto87652B22_var;
    playergroup auto05B43E7F_g;
    playergroup auto1C8C09BB_g;
    const int auto8EE6253B_ae = 14;
    const int auto8EE6253B_ai = 1;

    // Variable Initialization

    // Implementation
    auto87652B22_g = gv_playing;
    auto87652B22_var = -1;
    while (true) {
        auto87652B22_var = PlayerGroupNextPlayer(auto87652B22_g, auto87652B22_var);
        if (auto87652B22_var < 0) { break; }
        PlayerSetLighting(auto87652B22_var, gf_GetLightingfromIndex(gv_visualsSelection[auto87652B22_var]), 10.0);
        if ((gv_colorTagAlwaysShow[auto87652B22_var] == true)) {
            auto05B43E7F_g = gv_playing;
            lv_p = -1;
            while (true) {
                lv_p = PlayerGroupNextPlayer(auto05B43E7F_g, lv_p);
                if (lv_p < 0) { break; }
                TextTagShow(gv_unitTag[lv_p], PlayerGroupSingle(auto87652B22_var), true);
            }
        }
        else {
            auto1C8C09BB_g = gv_playing;
            lv_p = -1;
            while (true) {
                lv_p = PlayerGroupNextPlayer(auto1C8C09BB_g, lv_p);
                if (lv_p < 0) { break; }
                TextTagShow(gv_unitTag[lv_p], PlayerGroupSingle(auto87652B22_var), false);
            }
        }
    }
    lv_p = 1;
    for ( ; ( (auto8EE6253B_ai >= 0 && lv_p <= auto8EE6253B_ae) || (auto8EE6253B_ai < 0 && lv_p >= auto8EE6253B_ae) ) ; lv_p += auto8EE6253B_ai ) {
        if ((PlayerGroupHasPlayer(gv_playing, lv_p) == true)) {
            if ((gv_silentHillControlScheme[lv_p] == true) && (PlayerGroupHasPlayer(gv_keyboardMovingPlayers, lv_p) == true)) {
                gv_moving[lv_p][1] = false;
                gv_moving[lv_p][2] = false;
                gv_moving[lv_p][3] = false;
                gv_moving[lv_p][4] = false;
                if ((gv_cameraFollowsFacing[lv_p] == true)) {
                    gf_RotateCamera(lv_p, UnitGetFacing(gv_unit[lv_p]), 1.5);
                }

            }

        }

    }
}

trigger auto_gf_FlashSettingsButton_Trigger = null;

void gf_FlashSettingsButton () {
    if (auto_gf_FlashSettingsButton_Trigger == null) {
        auto_gf_FlashSettingsButton_Trigger = TriggerCreate("auto_gf_FlashSettingsButton_TriggerFunc");
    }

    TriggerExecute(auto_gf_FlashSettingsButton_Trigger, false, false);
}

bool auto_gf_FlashSettingsButton_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto1DD255AC_ae = 25;
    int auto1DD255AC_var;

    // Implementation
    libNtve_gf_SetDialogItemDesaturated(libNtve_gf_ValueFromDataTableDialogItem(true, "SettingsButton"), true, PlayerGroupAll());
    auto1DD255AC_var = 1;
    for ( ; auto1DD255AC_var <= auto1DD255AC_ae; auto1DD255AC_var += 1 ) {
        Wait(1.0, c_timeReal);
        libNtve_gf_SetDialogItemDesaturationColor(libNtve_gf_ValueFromDataTableDialogItem(true, "SettingsButton"), Color(150*100/255,150*100/255,30*100/255), PlayerGroupAll());
        Wait(1.0, c_timeReal);
        libNtve_gf_SetDialogItemDesaturationColor(libNtve_gf_ValueFromDataTableDialogItem(true, "SettingsButton"), Color(22*100/255,128*100/255,0), PlayerGroupAll());
    }
    libNtve_gf_SetDialogItemDesaturated(libNtve_gf_ValueFromDataTableDialogItem(true, "SettingsButton"), false, PlayerGroupAll());
    return true;
}

trigger auto_gf_PortraitSetup_Trigger = null;

void gf_PortraitSetup () {
    if (auto_gf_PortraitSetup_Trigger == null) {
        auto_gf_PortraitSetup_Trigger = TriggerCreate("auto_gf_PortraitSetup_TriggerFunc");
    }

    TriggerExecute(auto_gf_PortraitSetup_Trigger, false, false);
}

bool auto_gf_PortraitSetup_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_x;

    // Automatic Variable Declarations
    playergroup auto5175113C_g;
    int auto5175113C_var;
    const int autoAF850D21_ae = 98;
    int autoAF850D21_var;

    // Variable Initialization

    // Implementation
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "AdjutantPortrait";
    gv_portrait[lv_x].lv_portraitCost = 2800;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "BansheeMercenaryPortrait";
    gv_portrait[lv_x].lv_portraitCost = 2000;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "BansheePortrait";
    gv_portrait[lv_x].lv_portraitCost = 1800;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "BattlecruiserMercanaryPortrait";
    gv_portrait[lv_x].lv_portraitCost = 999999;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "BattlecruiserPortrait";
    gv_portrait[lv_x].lv_portraitCost = 2500;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "BonesPortrait";
    gv_portrait[lv_x].lv_portraitCost = 400;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "CivilianBlurredPortrait";
    gv_portrait[lv_x].lv_portraitCost = 2750;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "ConfederateAdjutantPortrait";
    gv_portrait[lv_x].lv_portraitCost = 2800;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "DiamondbackPortrait";
    gv_portrait[lv_x].lv_portraitCost = 2000;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "DominionMarauderPortrait";
    gv_portrait[lv_x].lv_portraitCost = 3200;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "DominionMarine1Portrait";
    gv_portrait[lv_x].lv_portraitCost = 500;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "DominionMarine2Portrait";
    gv_portrait[lv_x].lv_portraitCost = 800;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "DominionMarine3Portrait";
    gv_portrait[lv_x].lv_portraitCost = 500;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "DominionMarine4Portrait";
    gv_portrait[lv_x].lv_portraitCost = 1500;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "DominionMarine5Portrait";
    gv_portrait[lv_x].lv_portraitCost = 1500;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "DominionMarine6Portrait";
    gv_portrait[lv_x].lv_portraitCost = 1500;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "DominionMarine7Portrait";
    gv_portrait[lv_x].lv_portraitCost = 500;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "DominionMarine8Portrait";
    gv_portrait[lv_x].lv_portraitCost = 900;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "DominionMarine9Portrait";
    gv_portrait[lv_x].lv_portraitCost = 500;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "DominionOfficer1Portrait";
    gv_portrait[lv_x].lv_portraitCost = 1800;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "FemaleCivilian1Portrait";
    gv_portrait[lv_x].lv_portraitCost = 400;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "FemaleCivilian2Portrait";
    gv_portrait[lv_x].lv_portraitCost = 400;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "FemaleCivilian3Portrait";
    gv_portrait[lv_x].lv_portraitCost = 400;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "FemaleCivilian4Portrait";
    gv_portrait[lv_x].lv_portraitCost = 400;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "FemaleCivilian5Portrait";
    gv_portrait[lv_x].lv_portraitCost = 400;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "FemaleDominionOfficer1Portrait";
    gv_portrait[lv_x].lv_portraitCost = 1600;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "FirebatMercenaryPortrait";
    gv_portrait[lv_x].lv_portraitCost = 3000;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "FirebatPortrait";
    gv_portrait[lv_x].lv_portraitCost = 3000;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "GoliathMercenaryPortrait";
    gv_portrait[lv_x].lv_portraitCost = 1000;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "GoliathPortrait";
    gv_portrait[lv_x].lv_portraitCost = 1200;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "HanPortrait";
    gv_portrait[lv_x].lv_portraitCost = 1300;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "HansonDistressPortrait";
    gv_portrait[lv_x].lv_portraitCost = 2500;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "HansonPortrait";
    gv_portrait[lv_x].lv_portraitCost = 2000;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "HellionPortrait";
    gv_portrait[lv_x].lv_portraitCost = 1200;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "HerculesPortrait";
    gv_portrait[lv_x].lv_portraitCost = 1000;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "HornerPortrait";
    gv_portrait[lv_x].lv_portraitCost = 2800;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "LockwellPortrait";
    gv_portrait[lv_x].lv_portraitCost = 2500;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "MaleCivilian1Portrait";
    gv_portrait[lv_x].lv_portraitCost = 500;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "MaleCivilian2Portrait";
    gv_portrait[lv_x].lv_portraitCost = 500;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "MaleCivilian3Portrait";
    gv_portrait[lv_x].lv_portraitCost = 500;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "MaleCivilian4Portrait";
    gv_portrait[lv_x].lv_portraitCost = 500;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "MaleCivilian5Portrait";
    gv_portrait[lv_x].lv_portraitCost = 500;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "MaleCivilian6Portrait";
    gv_portrait[lv_x].lv_portraitCost = 500;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "MaleCivilian7Portrait";
    gv_portrait[lv_x].lv_portraitCost = 500;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "MaleCivilian8Portrait";
    gv_portrait[lv_x].lv_portraitCost = 500;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "MaleCivilian9Portrait";
    gv_portrait[lv_x].lv_portraitCost = 500;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "MaleCivilian10Portrait";
    gv_portrait[lv_x].lv_portraitCost = 500;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "MaleCivilian11Portrait";
    gv_portrait[lv_x].lv_portraitCost = 500;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "MarauderPortrait";
    gv_portrait[lv_x].lv_portraitCost = 1500;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "MarauderKillSquadPortrait";
    gv_portrait[lv_x].lv_portraitCost = 1800;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "MarauderMercenaryPortrait";
    gv_portrait[lv_x].lv_portraitCost = 1600;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "MarinePortrait";
    gv_portrait[lv_x].lv_portraitCost = 0;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "Marine1Portrait";
    gv_portrait[lv_x].lv_portraitCost = 1000;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "Marine2Portrait";
    gv_portrait[lv_x].lv_portraitCost = 1300;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "Marine3Portrait";
    gv_portrait[lv_x].lv_portraitCost = 1200;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "Marine4Portrait";
    gv_portrait[lv_x].lv_portraitCost = 1200;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "Marine5Portrait";
    gv_portrait[lv_x].lv_portraitCost = 1200;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "Marine6Portrait";
    gv_portrait[lv_x].lv_portraitCost = 1200;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "Marine7Portrait";
    gv_portrait[lv_x].lv_portraitCost = 500;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "Marine8Portrait";
    gv_portrait[lv_x].lv_portraitCost = 900;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "Marine9Portrait";
    gv_portrait[lv_x].lv_portraitCost = 700;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "Marine10Portrait";
    gv_portrait[lv_x].lv_portraitCost = 1000;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "Marine11Portrait";
    gv_portrait[lv_x].lv_portraitCost = 1100;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "MarineMercenaryPortrait";
    gv_portrait[lv_x].lv_portraitCost = 1300;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "MedicPortrait";
    gv_portrait[lv_x].lv_portraitCost = 400;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "MedivacPortrait";
    gv_portrait[lv_x].lv_portraitCost = 500;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "MengskHologramPortrait";
    gv_portrait[lv_x].lv_portraitCost = 2400;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "NarudPortrait";
    gv_portrait[lv_x].lv_portraitCost = 1800;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "NovaPortrait";
    gv_portrait[lv_x].lv_portraitCost = 2400;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "OrlanPortrait";
    gv_portrait[lv_x].lv_portraitCost = 1100;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "RavenPortrait";
    gv_portrait[lv_x].lv_portraitCost = 1800;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "RaynorCommanderPortrait";
    gv_portrait[lv_x].lv_portraitCost = 2000;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "RaynorMarinePortrait";
    gv_portrait[lv_x].lv_portraitCost = 1800;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "ReaperPortrait";
    gv_portrait[lv_x].lv_portraitCost = 900;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "SarahPortrait";
    gv_portrait[lv_x].lv_portraitCost = 2500;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "ScienceVesselPortrait";
    gv_portrait[lv_x].lv_portraitCost = 1200;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "Scientist1Portrait";
    gv_portrait[lv_x].lv_portraitCost = 700;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "Scientist2Portrait";
    gv_portrait[lv_x].lv_portraitCost = 700;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "ScientistFemalePortrait";
    gv_portrait[lv_x].lv_portraitCost = 700;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "SCVPortrait";
    gv_portrait[lv_x].lv_portraitCost = 800;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "SiegeTankPortrait";
    gv_portrait[lv_x].lv_portraitCost = 1500;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "SiegeTankMercenaryPortrait";
    gv_portrait[lv_x].lv_portraitCost = 1500;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "StetmannPortrait";
    gv_portrait[lv_x].lv_portraitCost = 1400;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "StetmannMedicPortrait";
    gv_portrait[lv_x].lv_portraitCost = 1400;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "SwannPortrait";
    gv_portrait[lv_x].lv_portraitCost = 1500;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "SwannMarauderPortrait";
    gv_portrait[lv_x].lv_portraitCost = 1600;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "TaurenMarinePortrait";
    gv_portrait[lv_x].lv_portraitCost = 7500;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "ThorPortrait";
    gv_portrait[lv_x].lv_portraitCost = 1200;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "ToshPortrait";
    gv_portrait[lv_x].lv_portraitCost = 1700;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "TychusPortrait";
    gv_portrait[lv_x].lv_portraitCost = 1300;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "ValerianPortrait";
    gv_portrait[lv_x].lv_portraitCost = 1300;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "VermillionPortrait";
    gv_portrait[lv_x].lv_portraitCost = 1400;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "VikingMercenaryAssaultPortrait";
    gv_portrait[lv_x].lv_portraitCost = 1200;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "VikingMercenaryFighterPortrait";
    gv_portrait[lv_x].lv_portraitCost = 1000;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "VulturePortrait";
    gv_portrait[lv_x].lv_portraitCost = 1000;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "WarfieldPortrait";
    gv_portrait[lv_x].lv_portraitCost = 1800;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "WraithPortrait";
    gv_portrait[lv_x].lv_portraitCost = 1600;
    lv_x += 1;
    gv_portrait[lv_x].lv_portraitID = lv_x;
    gv_portrait[lv_x].lv_portraitPath = "GhostPortrait";
    gv_portrait[lv_x].lv_portraitCost = 1200;
    lv_x += 1;
    auto5175113C_g = gv_playing;
    auto5175113C_var = -1;
    while (true) {
        auto5175113C_var = PlayerGroupNextPlayer(auto5175113C_g, auto5175113C_var);
        if (auto5175113C_var < 0) { break; }
        autoAF850D21_var = 1;
        for ( ; autoAF850D21_var <= autoAF850D21_ae; autoAF850D21_var += 1 ) {
            if ((StringSub(gv_pPPortraitsPurchased[auto5175113C_var], autoAF850D21_var, autoAF850D21_var) == "1")) {
                gv_portraitPaid[auto5175113C_var][autoAF850D21_var] = true;
            }
            else {
                gv_portraitPaid[auto5175113C_var][autoAF850D21_var] = false;
            }
        }
        if ((gv_pCPortraitCurrent[auto5175113C_var] == 0)) {
            gv_pCPortraitCurrent[auto5175113C_var] = 52;
            gv_portraitPaid[auto5175113C_var][52] = true;
        }

        gv_portraitPaid[auto5175113C_var][52] = true;
    }
    return true;
}

string gf_GeneratePPList (int lp_player) {
    // Variable Declarations
    string lv_list;

    // Automatic Variable Declarations
    const int autoA8C60C60_ae = 97;
    int autoA8C60C60_var;

    // Variable Initialization
    lv_list = "";

    // Implementation
    autoA8C60C60_var = 1;
    for ( ; autoA8C60C60_var <= autoA8C60C60_ae; autoA8C60C60_var += 1 ) {
        if ((gv_portraitPaid[lp_player][autoA8C60C60_var] == true)) {
            lv_list = (lv_list + "1");
        }
        else {
            lv_list = (lv_list + "0");
        }
    }
    return lv_list;
}

trigger auto_gf_GeneratePlayerCard_Trigger = null;
int auto_gf_GeneratePlayerCard_lp_player;
bool auto_gf_GeneratePlayerCard_lp_showPlayerColor;
bool auto_gf_GeneratePlayerCard_lp_animate;
int auto_gf_GeneratePlayerCard_lp_dialogOffsetX;
int auto_gf_GeneratePlayerCard_lp_dialogOffsetY;
int auto_gf_GeneratePlayerCard_lp_anchor;
string auto_gf_GeneratePlayerCard_lp_mode;

void gf_GeneratePlayerCard (int lp_player, bool lp_showPlayerColor, bool lp_animate, int lp_dialogOffsetX, int lp_dialogOffsetY, int lp_anchor, string lp_mode) {
    auto_gf_GeneratePlayerCard_lp_player = lp_player;
    auto_gf_GeneratePlayerCard_lp_showPlayerColor = lp_showPlayerColor;
    auto_gf_GeneratePlayerCard_lp_animate = lp_animate;
    auto_gf_GeneratePlayerCard_lp_dialogOffsetX = lp_dialogOffsetX;
    auto_gf_GeneratePlayerCard_lp_dialogOffsetY = lp_dialogOffsetY;
    auto_gf_GeneratePlayerCard_lp_anchor = lp_anchor;
    auto_gf_GeneratePlayerCard_lp_mode = lp_mode;

    if (auto_gf_GeneratePlayerCard_Trigger == null) {
        auto_gf_GeneratePlayerCard_Trigger = TriggerCreate("auto_gf_GeneratePlayerCard_TriggerFunc");
    }

    TriggerExecute(auto_gf_GeneratePlayerCard_Trigger, false, false);
}

bool auto_gf_GeneratePlayerCard_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_GeneratePlayerCard_lp_player;
    bool lp_showPlayerColor = auto_gf_GeneratePlayerCard_lp_showPlayerColor;
    bool lp_animate = auto_gf_GeneratePlayerCard_lp_animate;
    int lp_dialogOffsetX = auto_gf_GeneratePlayerCard_lp_dialogOffsetX;
    int lp_dialogOffsetY = auto_gf_GeneratePlayerCard_lp_dialogOffsetY;
    int lp_anchor = auto_gf_GeneratePlayerCard_lp_anchor;
    string lp_mode = auto_gf_GeneratePlayerCard_lp_mode;

    // Variable Declarations
    fixed lv_thingrating;
    text lv_thingratingtxt;
    text lv_marinepoints;
    text lv_marinepointsprev;
    text lv_thingpoints;
    text lv_gamesplayed;
    text lv_thingpointsprev;
    int lv_thinglevel;
    int lv_marinelevel;

    // Automatic Variable Declarations
    const int autoC8213DA6_ae = 5;
    int autoC8213DA6_var;
    const int auto19580388_ae = 5;
    int auto19580388_var;
    int autoB03099F5_val;

    // Variable Initialization
    lv_thingrating = (gv_tRPThingRatingPoints[lp_player] / MaxF(gv_tRIThingRatingInstances[lp_player], 1.0));
    lv_thingratingtxt = (FixedToText(lv_thingrating, 2) + StringExternal("Param/Value/475DB8A0") + IntToText(gv_tRIThingRatingInstances[lp_player]) + StringExternal("Param/Value/FAE66CA4"));
    lv_marinepoints = (StringExternal("Param/Value/BB996264") + IntToText(gv_mPMarinePoints[lp_player]));
    lv_marinepointsprev = (StringExternal("Param/Value/1B466682") + IntToText((gv_mPMarinePoints[lp_player] - gv_mPMarinePointsPrev[lp_player])));
    lv_thingpoints = (StringExternal("Param/Value/FBF8D515") + IntToText(gv_tPThingPoints[lp_player]));
    lv_gamesplayed = (StringExternal("Param/Value/6DEF9A4C") + IntToText(gv_gPGamesPlayed[lp_player]));
    lv_thingpointsprev = (StringExternal("Param/Value/4A3329EE") + IntToText((gv_tPThingPoints[lp_player] - gv_tPThingPointsPrev[lp_player])));
    lv_thinglevel = gf_FindLevelfromPoints(gv_tPThingPoints[lp_player]);
    lv_marinelevel = gf_FindLevelfromPoints(gv_mPMarinePoints[lp_player]);

    // Implementation
    DialogDestroy(gv_playerCardDialog[lp_player]);
    SoundPlay(SoundLink("UI_PushButtonSelect", 0), PlayerGroupActive(), 100.0, 0.1);
    DialogCreate(220, 350, lp_anchor, lp_dialogOffsetX, lp_dialogOffsetY, true);
    gv_playerCardDialog[lp_player] = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 0, 20, c_anchorTop, 0, 0, StringToText(""), "Assets\\Textures\\btn-border-protoss-transportslot-filled-8slots.dds", c_triggerImageTypeNormal, false, libNtve_gf_ConvertPlayerColorToColor(gv_thePlayerColor[lp_player]), c_triggerBlendModeAdd);
    if ((lp_mode == "handlelist")) {
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100,100,100), PlayerGroupAll());
    }

    if ((lp_animate == true)) {
        autoC8213DA6_var = 1;
        for ( ; autoC8213DA6_var <= autoC8213DA6_ae; autoC8213DA6_var += 1 ) {
            Wait(0.01, c_timeReal);
            DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), (autoC8213DA6_var * 44), 20);
        }
        auto19580388_var = 1;
        for ( ; auto19580388_var <= auto19580388_ae; auto19580388_var += 1 ) {
            Wait(0.01, c_timeReal);
            DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 220, FixedToInt((auto19580388_var * 70.0)));
        }
    }
    else {
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 220, 350);
    }
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePortrait);
    gv_playerCardPortrait[lp_player] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 210, 150);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 12);
    PortraitSetOffscreen(PortraitLastCreated(), true);
    PortraitSetBorderVisible(PortraitGetTriggerControl(DialogControlLastCreated()), false);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(gv_pQProfileQuote[lp_player]), PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 210, 220, c_anchorTopLeft, 5, 125, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(0,0,0), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 40.0);
    if ((lp_mode == "scorescreen")) {
        DialogDestroy(DataTableGetDialog(true, ("ProfileBox" + IntToString(lp_player))));
        if ((gv_enableSaving[lp_player] == false)) {
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorCenter, 0, -120, StringExternal("Param/Value/8D3795E7"), StringExternal("Param/Value/4AF0CDDB"), "");
            gv_playerCardRecordStats[lp_player] = DialogControlLastCreated();
            DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
            DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupSingle(lp_player), true);
        }

        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, 0, 110, StringToText(gv_rankingTag[lp_player]), libNtve_gf_ConvertPlayerColorToColor(gv_thePlayerColor[lp_player]), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16Bold", PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, 0, 125, PlayerName(lp_player), libNtve_gf_ConvertPlayerColorToColor(gv_thePlayerColor[lp_player]), false, 2.0);
        gv_playerCardName[lp_player] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20Bold", PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 220, 20, c_anchorTop, 0, 5, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(0,0,0), c_triggerBlendModeNormal);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 60.0);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 220, 20, c_anchorTop, 0, 10, gv_endGameState[lp_player], ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
        if ((PlayerGroupHasPlayer(gv_things, lp_player) == true)) {
            PortraitSetModelAnim(PortraitGetTriggerControl(gv_playerCardPortrait[lp_player]), "AberrationPortrait", "Stand", c_animFlagPlayForever, false);
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 50, 50, c_anchorCenter, -80, -120, StringExternal("Param/Value/6EF3CDDF"), StringExternal("Param/Value/74ACAF12"), "");
            gv_playerCardRatingButtons[1] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 50, 50, c_anchorCenter, -40, -120, StringExternal("Param/Value/B0D48131"), StringExternal("Param/Value/685C4251"), "");
            gv_playerCardRatingButtons[2] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 50, 50, c_anchorCenter, 0, -120, StringExternal("Param/Value/6BDF9F79"), StringExternal("Param/Value/CA6DC32D"), "");
            gv_playerCardRatingButtons[3] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 50, 50, c_anchorCenter, 40, -120, StringExternal("Param/Value/22B76389"), StringExternal("Param/Value/862C8BBC"), "");
            gv_playerCardRatingButtons[4] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 50, 50, c_anchorCenter, 80, -120, StringExternal("Param/Value/8381FC76"), StringExternal("Param/Value/0E558837"), "");
            gv_playerCardRatingButtons[5] = DialogControlLastCreated();
        }
        else {
            PortraitSetModelAnim(PortraitGetTriggerControl(gv_playerCardPortrait[lp_player]), (gv_portrait[gv_pCPortraitCurrent[lp_player]].lv_portraitPath), "Stand", c_animFlagPlayForever, false);
        }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 225, 20, c_anchorTopLeft, 5, 160, StringExternal("Param/Value/6B1B172B"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize16Bold", PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 225, 20, c_anchorTopRight, 5, 160, (IntToText(gv_gPGamesPlayed[lp_player])), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModRightSize16", PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 225, 20, c_anchorTopLeft, 5, 200, StringExternal("Param/Value/C2E2D29B"), Color(0,66*100/255,100), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize16Bold", PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 225, 20, c_anchorTopRight, 5, 200, (StringExternal("Param/Value/ED0D7491") + IntToText(lv_marinelevel)), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModRightSize16Bold", PlayerGroupAll());
        if ((PlayerGroupHasPlayer(gv_things, lp_player) == false)) {
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 225, 20, c_anchorTopRight, 5, 220, (IntToText(gv_mPMarinePoints[lp_player]) + StringExternal("Param/Value/5B1AECF9") + IntToText((gv_mPMarinePoints[lp_player] - gv_mPMarinePointsPrev[lp_player])) + StringExternal("Param/Value/7DF33D0F")), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModRightSize16", PlayerGroupAll());
        }
        else {
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 225, 20, c_anchorTopLeft, 5, 220, StringExternal("Param/Value/1431436D"), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize16Bold", PlayerGroupAll());
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 225, 20, c_anchorTopRight, 5, 220, (IntToText(gv_mPMarinePoints[lp_player])), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModRightSize16", PlayerGroupAll());
        }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 225, 20, c_anchorTopLeft, 5, 260, StringExternal("Param/Value/77A3B447"), Color(100.00, 0.00, 0.00), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize16Bold", PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 225, 20, c_anchorTopRight, 5, 260, (StringExternal("Param/Value/B796104C") + IntToText(lv_thinglevel)), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModRightSize16Bold", PlayerGroupAll());
        if ((PlayerGroupHasPlayer(gv_things, lp_player) == true)) {
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 225, 20, c_anchorTopRight, 5, 280, (IntToText(gv_tPThingPoints[lp_player]) + StringExternal("Param/Value/652CC947") + IntToText((gv_tPThingPoints[lp_player] - gv_tPThingPointsPrev[lp_player])) + StringExternal("Param/Value/AD055D7B")), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModRightSize16", PlayerGroupAll());
        }
        else {
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 225, 20, c_anchorTopLeft, 5, 280, StringExternal("Param/Value/CDB5CA79"), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize16Bold", PlayerGroupAll());
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 225, 20, c_anchorTopRight, 5, 280, (IntToText(gv_tPThingPoints[lp_player])), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModRightSize16", PlayerGroupAll());
        }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 225, 20, c_anchorTopLeft, 5, 300, StringExternal("Param/Value/F865B990"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize16Bold", PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 225, 20, c_anchorTopRight, 5, 300, (IntToText(gv_gTGamesAsThing[lp_player])), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModRightSize16", PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 225, 20, c_anchorTopLeft, 5, 320, StringExternal("Param/Value/67C5123E"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize16Bold", PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 225, 20, c_anchorTopRight, 5, 320, (lv_thingratingtxt), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModRightSize16", PlayerGroupAll());
    }
    else if ((lp_mode == "handlelist")) {
        gv_requiredVotesKick = libNtve_gf_ArithmeticIntClamp(TruncI(((PlayerGroupCount(gv_playing) * 2.0) / 3.0)), 1, 10);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 43, 43, c_anchorTopRight, 3, 12, StringExternal("Param/Value/AFB6013C"), IntToText(gv_requiredVotesKick), "Assets\\Textures\\ui_resourcesharing_button_normaloverpressedover_zerg.dds");
        gv_kickButton[lp_player] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), gv_requiredVotesKick, PlayerGroupAll());
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize24Bold", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_resourcesharing_button_normalpressed_zerg.dds", PlayerGroupAll());
        DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), true);
        DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupSingle(lp_player), false);
        if ((PlayerType(lp_player) == c_playerTypeUser)) {
            if (gf_Developers(lp_player)) {
                libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, 0, 110, StringToText(gv_rankingTag[lp_player]), Color(100.00, 100.00, 100.00), false, 2.0);
            }
            else {
                libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, 0, 110, StringToText(gv_rankingTag[lp_player]), Color(100.00, 100.00, 100.00), false, 2.0);
            }
        }

        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16Bold", PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, 0, 125, PlayerName(lp_player), Color(100.00, 100.00, 100.00), false, 2.0);
        gv_playerCardName[lp_player] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20Bold", PlayerGroupAll());
        PortraitSetModelAnim(PortraitGetTriggerControl(gv_playerCardPortrait[lp_player]), (gv_portrait[gv_pCPortraitCurrent[lp_player]].lv_portraitPath), "Stand", c_animFlagPlayForever, false);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 225, 20, c_anchorTopLeft, 5, 160, StringExternal("Param/Value/5CB54603"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize16Bold", PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 225, 20, c_anchorTopRight, 5, 160, (IntToText(gv_gPGamesPlayed[lp_player])), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModRightSize16", PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 225, 20, c_anchorTopLeft, 5, 200, StringExternal("Param/Value/D2F66408"), Color(0,66*100/255,100), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize16Bold", PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 225, 20, c_anchorTopRight, 5, 200, (StringExternal("Param/Value/C916DF92") + IntToText(lv_marinelevel)), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModRightSize16Bold", PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 225, 20, c_anchorTopLeft, 5, 220, StringExternal("Param/Value/416618AE"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize16Bold", PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 225, 20, c_anchorTopRight, 5, 220, (IntToText(gv_mPMarinePoints[lp_player])), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModRightSize16", PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 225, 20, c_anchorTopLeft, 5, 260, StringExternal("Param/Value/0C915E46"), Color(100.00, 0.00, 0.00), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize16Bold", PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 225, 20, c_anchorTopRight, 5, 260, (StringExternal("Param/Value/BBBD23F6") + IntToText(lv_thinglevel)), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModRightSize16Bold", PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 225, 20, c_anchorTopLeft, 5, 280, StringExternal("Param/Value/5437FEED"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize16Bold", PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 225, 20, c_anchorTopRight, 5, 280, (IntToText(gv_tPThingPoints[lp_player])), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModRightSize16", PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 225, 20, c_anchorTopLeft, 5, 300, StringExternal("Param/Value/438F4BB4"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize16Bold", PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 225, 20, c_anchorTopRight, 5, 300, (IntToText(gv_gTGamesAsThing[lp_player])), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModRightSize16", PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 225, 20, c_anchorTopLeft, 5, 320, StringExternal("Param/Value/C2B95F1B"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize16Bold", PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 225, 20, c_anchorTopRight, 5, 320, (lv_thingratingtxt), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModRightSize16", PlayerGroupAll());
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 20);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, 0, 0);
        if ((PlayerType(lp_player) == c_playerTypeUser)) {
            libNtve_gf_SetDialogItemEditorValue(DialogControlLastCreated(), PlayerHandle(lp_player), PlayerGroupAll());
        }

        if (((PlayerHandle(lp_player) == "1-S2-1-592712") || (PlayerHandle(lp_player) == ""))) {
        }

    }
    else if ((lp_mode == "profile")) {
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypePortrait);
        gv_playerCardAvatar[lp_player] = DialogControlLastCreated();
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, -60, 25);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 210, 150);
        libNtve_gf_SetDialogItemModel(DialogControlLastCreated(), "Marine", PlayerGroupAll());
        libNtve_gf_SetDialogItemBorderVisible(DialogControlLastCreated(), false, PlayerGroupAll());
        libNtve_gf_SetDialogItemBackgroundVisible(DialogControlLastCreated(), false, PlayerGroupAll());
        libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), false, PlayerGroupAll());
        PortraitWaitForLoad(PortraitGetTriggerControl(DialogControlLastCreated()));
        libNtve_gf_SetDialogItemTeamColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(gv_thePlayerColor[lp_player]), PlayerGroupAll());
        ActorSend(ActorFromDialogControl(DialogControlLastCreated()), libNtve_gf_SetScale(0.2, 0.2, 0.2, 0.0));
        autoB03099F5_val = RandomInt(0, 2);
        if (autoB03099F5_val == 0) {
            libNtve_gf_SetDialogItemAnimation(DialogControlLastCreated(), "Dance", PlayerGroupAll());
        }
        else if (autoB03099F5_val == 1) {
            libNtve_gf_SetDialogItemAnimation(DialogControlLastCreated(), "Dance", PlayerGroupAll());
        }
        else if (autoB03099F5_val == 2) {
            libNtve_gf_SetDialogItemAnimation(DialogControlLastCreated(), "Victory", PlayerGroupAll());
        }
        else {
        }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, 0, 110, StringToText(gv_rankingTag[lp_player]), Color(100.00, 100.00, 100.00), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16Bold", PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, 0, 125, PlayerName(lp_player), Color(100.00, 100.00, 100.00), false, 2.0);
        gv_playerCardName[lp_player] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20Bold", PlayerGroupAll());
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeListBox);
        gv_playerCardStats[lp_player] = DialogControlLastCreated();
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 140);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, 0, 55);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize16Bold", PlayerGroupAll());
        PortraitSetModelAnim(PortraitGetTriggerControl(gv_playerCardPortrait[lp_player]), (gv_portrait[gv_pCPortraitCurrent[lp_player]].lv_portraitPath), "Stand", c_animFlagPlayForever, false);
        DialogControlAddItem(gv_playerCardStats[lp_player], PlayerGroupAll(), StringExternal("Param/Value/3A2822DA"));
        DialogControlAddItem(gv_playerCardStats[lp_player], PlayerGroupAll(), IntToText(gv_vPVicPoints[lp_player]));
        DialogControlAddItem(gv_playerCardStats[lp_player], PlayerGroupAll(), lv_marinepoints);
        DialogControlAddItem(gv_playerCardStats[lp_player], PlayerGroupAll(), lv_thingpoints);
        DialogControlAddItem(gv_playerCardStats[lp_player], PlayerGroupAll(), lv_thingratingtxt);
        DialogControlAddItem(gv_playerCardStats[lp_player], PlayerGroupAll(), lv_gamesplayed);
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/1DC98CCE"));
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), IntToText(gv_gMGamesMinutes[lp_player]));
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\blank.dds", PlayerGroupAll());
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 50);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, 0, 5);
        if ((PlayerType(lp_player) == c_playerTypeUser)) {
            libNtve_gf_SetDialogItemEditorValue(DialogControlLastCreated(), PlayerHandle(lp_player), PlayerGroupAll());
        }

    }
    if ((PlayerGroupHasPlayer(gv_things, lp_player) == true) && (lp_mode == "scorescreen")) {
        libNtve_gf_SetDialogItemText(gv_playerCardName[lp_player], StringExternal("Param/Value/D563DEEC"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_playerCardName[lp_player], PlayerName(lp_player), PlayerGroupSingle(lp_player));
        DialogControlSetVisible(gv_playerCardRatingButtons[1], PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(gv_playerCardRatingButtons[2], PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(gv_playerCardRatingButtons[3], PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(gv_playerCardRatingButtons[4], PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(gv_playerCardRatingButtons[5], PlayerGroupSingle(lp_player), false);
    }

    return true;
}

void gf_ShowPlanet (int lp_planet) {
    // Automatic Variable Declarations
    playergroup auto36147FD3_g;
    int auto36147FD3_var;

    // Implementation
    VisEnable(c_visTypeFog, false);
    UnitCreate(1, "Armory", c_unitCreateIgnorePlacement, 0, PointFromId(705), 270.0);
    gv_planetUnit = UnitLastCreated();
    UnitSetHeight(UnitLastCreated(), 8.0, 0.0);
    UnitSetState(UnitLastCreated(), c_unitStateUsingSupply, false);
    UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
    UnitSetState(UnitLastCreated(), c_unitStateTooltipable, false);
    UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
    UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
    UnitSetState(UnitLastCreated(), c_unitStateInvulnerable, true);
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_ModelSwap(gf_PlanetsPresetToModel(lp_planet), 1));
    auto36147FD3_g = PlayerGroupActive();
    auto36147FD3_var = -1;
    while (true) {
        auto36147FD3_var = PlayerGroupNextPlayer(auto36147FD3_g, auto36147FD3_var);
        if (auto36147FD3_var < 0) { break; }
        CameraSave(auto36147FD3_var);
        CameraUseModel(auto36147FD3_var, UnitLastCreated(), null, 0.0);
    }
}

string gf_PlanetsPresetToName (int lp_planets) {
    // Automatic Variable Declarations
    int autoDA3961F6_val;

    // Implementation
    autoDA3961F6_val = lp_planets;
    if (autoDA3961F6_val == ge_Planets_ZhakulDas) {
        return "Zhakul' Das";
    }
    else if (autoDA3961F6_val == ge_Planets_Ulaan) {
        return "Ulaan";
    }
    else if (autoDA3961F6_val == ge_Planets_Xil) {
        return "Xil";
    }
    else if (autoDA3961F6_val == ge_Planets_Valhalla) {
        return "Valhalla";
    }
    else if (autoDA3961F6_val == ge_Planets_Ulnar) {
        return "Ulnar";
    }
    else if (autoDA3961F6_val == ge_Planets_Tyrador) {
        return "Tyrador";
    }
    else if (autoDA3961F6_val == ge_Planets_Typhon) {
        return "Typhon";
    }
    else if (autoDA3961F6_val == ge_Planets_Tarsonis) {
        return "Tarsonis";
    }
    else if (autoDA3961F6_val == ge_Planets_Albion) {
        return "Albion";
    }
    else if (autoDA3961F6_val == ge_Planets_Shakuras) {
        return "Shakuras";
    }
    else if (autoDA3961F6_val == ge_Planets_RedStone) {
        return "Red Stone";
    }
    else if (autoDA3961F6_val == ge_Planets_PortZion) {
        return "Port Zion";
    }
    else if (autoDA3961F6_val == ge_Planets_NewFolsom) {
        return "New Folsom";
    }
    else if (autoDA3961F6_val == ge_Planets_Monlyth) {
        return "Monlyth";
    }
    else if (autoDA3961F6_val == ge_Planets_Meinhoff) {
        return "Meinhoff";
    }
    else if (autoDA3961F6_val == ge_Planets_MarSara) {
        return "Mar Sara";
    }
    else if (autoDA3961F6_val == ge_Planets_Korhal) {
        return "Korhal";
    }
    else if (autoDA3961F6_val == ge_Planets_Haven) {
        return "Haven";
    }
    else if (autoDA3961F6_val == ge_Planets_GalaxyView) {
        return "Galaxy View";
    }
    else if (autoDA3961F6_val == ge_Planets_Char) {
        return "Char";
    }
    else if (autoDA3961F6_val == ge_Planets_Castanar) {
        return "Castanar";
    }
    else if (autoDA3961F6_val == ge_Planets_BelShir) {
        return "Bel' Shir";
    }
    else if (autoDA3961F6_val == ge_Planets_BattlenetGlue) {
        return "BattleNet Glue";
    }
    else if (autoDA3961F6_val == ge_Planets_Avernus) {
        return "Avernus";
    }
    else if (autoDA3961F6_val == ge_Planets_Aiur) {
        return "Aiur";
    }
    else if (autoDA3961F6_val == ge_Planets_Agira) {
        return "Agria";
    }
    else {
        return "Galaxy View";
    }
}

string gf_PlanetsPresetToModel (int lp_planets) {
    // Automatic Variable Declarations
    int auto6ECE9481_val;

    // Implementation
    auto6ECE9481_val = lp_planets;
    if (auto6ECE9481_val == ge_Planets_ZhakulDas) {
        return "PlanetViewZhakulDas";
    }
    else if (auto6ECE9481_val == ge_Planets_Xil) {
        return "PlanetViewXil";
    }
    else if (auto6ECE9481_val == ge_Planets_Valhalla) {
        return "PlanetViewValhalla";
    }
    else if (auto6ECE9481_val == ge_Planets_Ulnar) {
        return "PlanetViewUlnar";
    }
    else if (auto6ECE9481_val == ge_Planets_Tyrador) {
        return "PlanetViewTyrador";
    }
    else if (auto6ECE9481_val == ge_Planets_Typhon) {
        return "PlanetViewTyphon";
    }
    else if (auto6ECE9481_val == ge_Planets_Tarsonis) {
        return "PlanetViewTarsonis";
    }
    else if (auto6ECE9481_val == ge_Planets_Albion) {
        return "PlanetViewSigmaQuadrant";
    }
    else if (auto6ECE9481_val == ge_Planets_Shakuras) {
        return "PlanetViewShakuras";
    }
    else if (auto6ECE9481_val == ge_Planets_RedStone) {
        return "PlanetViewRedstone";
    }
    else if (auto6ECE9481_val == ge_Planets_PortZion) {
        return "PlanetViewPortZion";
    }
    else if (auto6ECE9481_val == ge_Planets_NewFolsom) {
        return "PlanetViewNewFolsom";
    }
    else if (auto6ECE9481_val == ge_Planets_Monlyth) {
        return "PlanetViewMonlyth";
    }
    else if (auto6ECE9481_val == ge_Planets_Meinhoff) {
        return "PlanetViewMeinhoff";
    }
    else if (auto6ECE9481_val == ge_Planets_MarSara) {
        return "PlanetViewMarSara";
    }
    else if (auto6ECE9481_val == ge_Planets_Korhal) {
        return "PlanetViewKorhal";
    }
    else if (auto6ECE9481_val == ge_Planets_Haven) {
        return "PlanetViewHaven";
    }
    else if (auto6ECE9481_val == ge_Planets_GalaxyView) {
        return "PlanetViewGalaxy";
    }
    else if (auto6ECE9481_val == ge_Planets_Char) {
        return "PlanetViewChar";
    }
    else if (auto6ECE9481_val == ge_Planets_Castanar) {
        return "PlanetViewCastanar";
    }
    else if (auto6ECE9481_val == ge_Planets_BelShir) {
        return "PlanetViewBelShir";
    }
    else if (auto6ECE9481_val == ge_Planets_BattlenetGlue) {
        return "BattleNetGlue";
    }
    else if (auto6ECE9481_val == ge_Planets_Avernus) {
        return "PlanetViewAvernus";
    }
    else if (auto6ECE9481_val == ge_Planets_Aiur) {
        return "PlanetViewAiur";
    }
    else if (auto6ECE9481_val == ge_Planets_Agira) {
        return "PlanetViewAgria";
    }
    else if (auto6ECE9481_val == ge_Planets_Ulaan) {
        return "PlanetViewUlaan";
    }
    else {
        return "PlanetViewGalaxy";
    }
}

trigger auto_gf_CreateVicBlipforPlayer_Trigger = null;
unit auto_gf_CreateVicBlipforPlayer_lp_unit;

void gf_CreateVicBlipforPlayer (unit lp_unit) {
    auto_gf_CreateVicBlipforPlayer_lp_unit = lp_unit;

    if (auto_gf_CreateVicBlipforPlayer_Trigger == null) {
        auto_gf_CreateVicBlipforPlayer_Trigger = TriggerCreate("auto_gf_CreateVicBlipforPlayer_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateVicBlipforPlayer_Trigger, false, false);
}

bool auto_gf_CreateVicBlipforPlayer_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_CreateVicBlipforPlayer_lp_unit;

    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingArrow", UnitGetPosition(lp_unit), gv_unitPlayerColor[UnitGetOwner(lp_unit)], 500000.0, UnitGetFacing(lp_unit));
    PingSetUnit(PingLastCreated(), lp_unit);
    PingSetScale(PingLastCreated(), 0.5);
    PingSetUseUnitVisibility(PingLastCreated(), true);
    while ((UnitIsAlive(lp_unit) == true)) {
        PingSetRotation(PingLastCreated(), UnitGetFacing(lp_unit));
        Wait(0.25, c_timeReal);
    }
    PingDestroy(PingLastCreated());
    return true;
}

trigger auto_gf_CreateThingBlipforPlayer_Trigger = null;
unit auto_gf_CreateThingBlipforPlayer_lp_unit;

void gf_CreateThingBlipforPlayer (unit lp_unit) {
    auto_gf_CreateThingBlipforPlayer_lp_unit = lp_unit;

    if (auto_gf_CreateThingBlipforPlayer_Trigger == null) {
        auto_gf_CreateThingBlipforPlayer_Trigger = TriggerCreate("auto_gf_CreateThingBlipforPlayer_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateThingBlipforPlayer_Trigger, false, false);
}

bool auto_gf_CreateThingBlipforPlayer_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_CreateThingBlipforPlayer_lp_unit;

    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingArrow", UnitGetPosition(lp_unit), Color(100.00, 100.00, 100.00), 500000.0, UnitGetFacing(lp_unit));
    PingSetUnit(PingLastCreated(), lp_unit);
    PingSetScale(PingLastCreated(), 0.75);
    PingSetUseUnitVisibility(PingLastCreated(), true);
    while ((UnitIsAlive(lp_unit) == true)) {
        PingSetRotation(PingLastCreated(), UnitGetFacing(lp_unit));
        Wait(0.15, c_timeReal);
    }
    PingDestroy(PingLastCreated());
    return true;
}

void gf_InitialSpectate () {
    // Variable Declarations
    int lv_tempint;

    // Automatic Variable Declarations
    playergroup autoF0456C7F_g;
    int autoF0456C7F_var;

    // Variable Initialization

    // Implementation
    DialogCreate(450, 50, c_anchorTop, 0, 0, true);
    gv_spectatorDialog = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePulldown);
    gv_spectatorFollowDialogItem = DialogControlLastCreated();
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/AA0DDB2B"), PlayerGroupAll());
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/2E990D3A"));
    gv_spectatorIndex[1] = 0;
    lv_tempint += 1;
    autoF0456C7F_g = PlayerGroupActive();
    autoF0456C7F_var = -1;
    while (true) {
        autoF0456C7F_var = PlayerGroupNextPlayer(autoF0456C7F_g, autoF0456C7F_var);
        if (autoF0456C7F_var < 0) { break; }
        lv_tempint += 1;
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), TextWithColor(StringToText(gf_ConvertPlayerColortoString(gv_thePlayerColor[autoF0456C7F_var])), libNtve_gf_ConvertPlayerColorToColor(gv_thePlayerColor[autoF0456C7F_var])));
        gv_spectatorIndex[lv_tempint] = autoF0456C7F_var;
    }
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, 0, 0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePulldown);
    gv_spectatorVisibilityDialogItem = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/54984D99"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/376B4843"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/1977FE8A"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/4049DB62"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/63E87393"));
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 250, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorRight, 0, 0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/54DC4835"), PlayerGroupAll());
    DialogControlSelectItem(DialogControlLastCreated(), PlayerGroupAll(), 1);
}

void gf_RefreshItemList () {
    // Variable Declarations
    int lv_tempint;

    // Automatic Variable Declarations
    playergroup auto324F1B74_g;
    int auto324F1B74_var;

    // Variable Initialization

    // Implementation
    lv_tempint = 0;
    gv_spectatorIndex[1] = 0;
    lv_tempint += 1;
    auto324F1B74_g = PlayerGroupActive();
    auto324F1B74_var = -1;
    while (true) {
        auto324F1B74_var = PlayerGroupNextPlayer(auto324F1B74_g, auto324F1B74_var);
        if (auto324F1B74_var < 0) { break; }
        if ((UnitIsAlive(gv_unit[auto324F1B74_var]) == true)) {
            lv_tempint += 1;
            gv_spectatorIndex[lv_tempint] = auto324F1B74_var;
            gv_playerIndex[auto324F1B74_var] = lv_tempint;
        }

    }
}

void gf_SetupUnitUI () {
    // Automatic Variable Declarations
    playergroup auto50B8F682_g;
    int auto50B8F682_var;
    const int auto3CADDC3A_ae = 5;
    int auto3CADDC3A_var;

    // Implementation
    auto50B8F682_g = PlayerGroupAll();
    auto50B8F682_var = -1;
    while (true) {
        auto50B8F682_var = PlayerGroupNextPlayer(auto50B8F682_g, auto50B8F682_var);
        if (auto50B8F682_var < 0) { break; }
        DialogCreate(800, 450, c_anchorBottom, 0, 0, false);
        gv_unitPanel[auto50B8F682_var] = DialogLastCreated();
        DialogSetImageVisible(DialogLastCreated(), false);
        auto3CADDC3A_var = 1;
        for ( ; auto3CADDC3A_var <= auto3CADDC3A_ae; auto3CADDC3A_var += 1 ) {
            DialogControlCreate(DialogLastCreated(), c_triggerControlTypeProgressBar);
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\white32.dds", PlayerGroupAll());
            gv_unitBarItem[auto50B8F682_var][auto3CADDC3A_var] = DialogControlLastCreated();
            libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), false, PlayerGroupAll());
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 80.0);
            DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 700, 40);
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, ((auto3CADDC3A_var - 1) * 50));
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorCenter, 0, (((auto3CADDC3A_var - 1) * 50) + 3), StringToText(""), Color(100,100,100), false, 2.0);
            gv_unitBarLabel[auto50B8F682_var][auto3CADDC3A_var] = DialogControlLastCreated();
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize28Bold", PlayerGroupAll());
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 40.0);
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        }
        libNtve_gf_SetDialogItemMaximumValue(gv_unitBarItem[auto50B8F682_var][1], UnitGetPropertyFixed(gv_unit[auto50B8F682_var], c_unitPropLifeMax, c_unitPropCurrent), PlayerGroupAll());
        libNtve_gf_SetDialogItemCurrentValue(gv_unitBarItem[auto50B8F682_var][1], UnitGetPropertyFixed(gv_unit[auto50B8F682_var], c_unitPropLife, c_unitPropCurrent), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_unitBarLabel[auto50B8F682_var][1], StringExternal("Param/Value/7873CCC1"), PlayerGroupAll());
        libNtve_gf_SetDialogItemMaximumValue(gv_unitBarItem[auto50B8F682_var][2], UnitGetPropertyFixed(gv_unit[auto50B8F682_var], c_unitPropEnergyMax, c_unitPropCurrent), PlayerGroupAll());
        libNtve_gf_SetDialogItemCurrentValue(gv_unitBarItem[auto50B8F682_var][2], UnitGetPropertyFixed(gv_unit[auto50B8F682_var], c_unitPropEnergy, c_unitPropCurrent), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_unitBarLabel[auto50B8F682_var][2], StringExternal("Param/Value/EAF78530"), PlayerGroupAll());
        libNtve_gf_SetDialogItemMaximumValue(gv_unitBarItem[auto50B8F682_var][3], 300.0, PlayerGroupAll());
        libNtve_gf_SetDialogItemCurrentValue(gv_unitBarItem[auto50B8F682_var][3], 300.0, PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_unitBarLabel[auto50B8F682_var][3], StringExternal("Param/Value/89043248"), PlayerGroupAll());
        DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(auto50B8F682_var), true);
        DialogControlSetVisible(gv_unitBarItem[auto50B8F682_var][1], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_unitBarLabel[auto50B8F682_var][1], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_unitBarItem[auto50B8F682_var][2], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_unitBarLabel[auto50B8F682_var][2], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_unitBarItem[auto50B8F682_var][3], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_unitBarLabel[auto50B8F682_var][3], PlayerGroupAll(), true);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 700, 60, c_anchorCenter, 0, 0, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_unitBarHealthDisplay[auto50B8F682_var] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModRightSize16Bold", PlayerGroupAll());
    }
    libNtve_gf_SetDialogItemMaximumValue(gv_unitBarItem[PlayerGroupPlayer(gv_things, 1)][4], 2500.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(gv_unitBarItem[PlayerGroupPlayer(gv_things, 1)][4], gv_control, PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_unitBarItem[PlayerGroupPlayer(gv_things, 1)][4], Color((100.0 - (gv_control / 10.0)), (gv_control / 10.0), 0.0), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_unitBarLabel[PlayerGroupPlayer(gv_things, 1)][4], StringExternal("Param/Value/2B7E838E"), PlayerGroupAll());
    DialogControlSetVisible(gv_unitBarItem[PlayerGroupPlayer(gv_things, 1)][4], PlayerGroupSingle(PlayerGroupPlayer(gv_things, 1)), true);
    DialogControlSetVisible(gv_unitBarLabel[PlayerGroupPlayer(gv_things, 1)][4], PlayerGroupSingle(PlayerGroupPlayer(gv_things, 1)), true);
    TriggerEnable(gt_UnitUIPeriodicUpdate, true);
    TriggerEnable(gt_UnitHealthUIInstanteneousUpdate, true);
}

void gf_DesignateRankingforPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if (gf_Developers(lp_player)) {
        gv_rankingAbbreviatedTag[lp_player] = "God";
        gv_rankingTag[lp_player] = "God";
        gv_ranking[lp_player] = 12;
    }
    else if ((gv_mPMarinePoints[lp_player] < 200)) {
        gv_rankingAbbreviatedTag[lp_player] = "Cdt.";
        gv_rankingTag[lp_player] = "Cadet";
        gv_ranking[lp_player] = 1;
    }
    else if ((gv_mPMarinePoints[lp_player] < 500)) {
        gv_rankingAbbreviatedTag[lp_player] = "Pvt.";
        gv_rankingTag[lp_player] = "Private";
        gv_ranking[lp_player] = 2;
    }
    else if ((gv_mPMarinePoints[lp_player] < 1250)) {
        gv_rankingAbbreviatedTag[lp_player] = "Sp.";
        gv_rankingTag[lp_player] = "Specialist";
        gv_ranking[lp_player] = 3;
    }
    else if ((gv_mPMarinePoints[lp_player] < 2500)) {
        gv_rankingAbbreviatedTag[lp_player] = "Cpl.";
        gv_rankingTag[lp_player] = "Corporal";
        gv_ranking[lp_player] = 4;
    }
    else if ((gv_mPMarinePoints[lp_player] < 5000)) {
        gv_rankingAbbreviatedTag[lp_player] = "Sgt.";
        gv_rankingTag[lp_player] = "Sergeant";
        gv_ranking[lp_player] = 5;
    }
    else if ((gv_mPMarinePoints[lp_player] < 10000)) {
        gv_rankingAbbreviatedTag[lp_player] = "Ofc.";
        gv_rankingTag[lp_player] = "Officer";
        gv_ranking[lp_player] = 6;
    }
    else if ((gv_mPMarinePoints[lp_player] < 16000)) {
        gv_rankingAbbreviatedTag[lp_player] = "Lt.";
        gv_rankingTag[lp_player] = "Lieutenant";
        gv_ranking[lp_player] = 7;
    }
    else if ((gv_mPMarinePoints[lp_player] < 25000)) {
        gv_rankingAbbreviatedTag[lp_player] = "Cpt.";
        gv_rankingTag[lp_player] = "Captain";
        gv_ranking[lp_player] = 8;
    }
    else if ((gv_mPMarinePoints[lp_player] < 35000)) {
        gv_rankingAbbreviatedTag[lp_player] = "Maj.";
        gv_rankingTag[lp_player] = "Major";
        gv_ranking[lp_player] = 9;
    }
    else if ((gv_mPMarinePoints[lp_player] < 50000)) {
        gv_rankingAbbreviatedTag[lp_player] = "Col.";
        gv_rankingTag[lp_player] = "Colonel";
        gv_ranking[lp_player] = 10;
    }
    else if ((gv_mPMarinePoints[lp_player] > 50000)) {
        gv_rankingAbbreviatedTag[lp_player] = "Gen.";
        gv_rankingTag[lp_player] = "General";
        gv_ranking[lp_player] = 11;
    }
}

void gf_DesignateRankingforPlayer2 (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if (gf_Developers(lp_player)) {
        gv_rankingAbbreviatedTag[lp_player] = "Elf Lord";
        gv_rankingTag[lp_player] = "Elf Lord";
        gv_ranking[lp_player] = 12;
    }
    else if ((gv_mPMarinePoints[lp_player] < 200)) {
        gv_rankingAbbreviatedTag[lp_player] = "Elf 1";
        gv_rankingTag[lp_player] = "Elf 1";
        gv_ranking[lp_player] = 1;
    }
    else if ((gv_mPMarinePoints[lp_player] < 500)) {
        gv_rankingAbbreviatedTag[lp_player] = "Elf 2";
        gv_rankingTag[lp_player] = "Elf 2";
        gv_ranking[lp_player] = 2;
    }
    else if ((gv_mPMarinePoints[lp_player] < 1250)) {
        gv_rankingAbbreviatedTag[lp_player] = "Elf 3";
        gv_rankingTag[lp_player] = "Elf 3";
        gv_ranking[lp_player] = 3;
    }
    else if ((gv_mPMarinePoints[lp_player] < 2500)) {
        gv_rankingAbbreviatedTag[lp_player] = "Elf 4";
        gv_rankingTag[lp_player] = "Elf 4";
        gv_ranking[lp_player] = 4;
    }
    else if ((gv_mPMarinePoints[lp_player] < 5000)) {
        gv_rankingAbbreviatedTag[lp_player] = "Elf 5";
        gv_rankingTag[lp_player] = "Elf 5";
        gv_ranking[lp_player] = 5;
    }
    else if ((gv_mPMarinePoints[lp_player] < 10000)) {
        gv_rankingAbbreviatedTag[lp_player] = "Elf 6";
        gv_rankingTag[lp_player] = "Elf 6";
        gv_ranking[lp_player] = 6;
    }
    else if ((gv_mPMarinePoints[lp_player] < 16000)) {
        gv_rankingAbbreviatedTag[lp_player] = "Elf 7";
        gv_rankingTag[lp_player] = "Elf 7";
        gv_ranking[lp_player] = 7;
    }
    else if ((gv_mPMarinePoints[lp_player] < 25000)) {
        gv_rankingAbbreviatedTag[lp_player] = "Elf 8";
        gv_rankingTag[lp_player] = "Elf 8";
        gv_ranking[lp_player] = 8;
    }
    else if ((gv_mPMarinePoints[lp_player] < 35000)) {
        gv_rankingAbbreviatedTag[lp_player] = "Elf 9";
        gv_rankingTag[lp_player] = "Elf 9";
        gv_ranking[lp_player] = 9;
    }
    else if ((gv_mPMarinePoints[lp_player] < 50000)) {
        gv_rankingAbbreviatedTag[lp_player] = "Elf 10";
        gv_rankingTag[lp_player] = "Elf 10";
        gv_ranking[lp_player] = 10;
    }
    else if ((gv_mPMarinePoints[lp_player] > 50000)) {
        gv_rankingAbbreviatedTag[lp_player] = "Elf 11";
        gv_rankingTag[lp_player] = "Elf 11";
        gv_ranking[lp_player] = 11;
    }
}

void gf_SetRankingforPlayer (int lp_player, int lp_index) {
    // Automatic Variable Declarations
    int auto7ECEC8D5_val;

    // Implementation
    auto7ECEC8D5_val = lp_index;
    if (auto7ECEC8D5_val == 1) {
        gv_rankingAbbreviatedTag[lp_player] = "Cdt.";
        gv_rankingTag[lp_player] = "Cadet";
    }
    else if (auto7ECEC8D5_val == 2) {
        gv_rankingAbbreviatedTag[lp_player] = "Pvt.";
        gv_rankingTag[lp_player] = "Private";
    }
    else if (auto7ECEC8D5_val == 3) {
        gv_rankingAbbreviatedTag[lp_player] = "Sp.";
        gv_rankingTag[lp_player] = "Specialist";
    }
    else if (auto7ECEC8D5_val == 4) {
        gv_rankingAbbreviatedTag[lp_player] = "Cpl.";
        gv_rankingTag[lp_player] = "Corporal";
    }
    else if (auto7ECEC8D5_val == 5) {
        gv_rankingAbbreviatedTag[lp_player] = "Sgt.";
        gv_rankingTag[lp_player] = "Sergeant";
    }
    else if (auto7ECEC8D5_val == 6) {
        gv_rankingAbbreviatedTag[lp_player] = "Ofc.";
        gv_rankingTag[lp_player] = "Officer";
    }
    else if (auto7ECEC8D5_val == 7) {
        gv_rankingAbbreviatedTag[lp_player] = "Lt.";
        gv_rankingTag[lp_player] = "Lieutenant";
    }
    else if (auto7ECEC8D5_val == 8) {
        gv_rankingAbbreviatedTag[lp_player] = "Cpt.";
        gv_rankingTag[lp_player] = "Captain";
    }
    else if (auto7ECEC8D5_val == 9) {
        gv_rankingAbbreviatedTag[lp_player] = "Maj.";
        gv_rankingTag[lp_player] = "Major";
    }
    else if (auto7ECEC8D5_val == 10) {
        gv_rankingAbbreviatedTag[lp_player] = "Col.";
        gv_rankingTag[lp_player] = "Colonel";
    }
    else if (auto7ECEC8D5_val == 11) {
        gv_rankingAbbreviatedTag[lp_player] = "Gen.";
        gv_rankingTag[lp_player] = "General";
    }
    else if (auto7ECEC8D5_val == 12) {
        gv_rankingAbbreviatedTag[lp_player] = "God";
        gv_rankingTag[lp_player] = "God";
    }
    else {
    }
}

void gf_SetRankingforPlayer2 (int lp_player, int lp_index) {
    // Automatic Variable Declarations
    int auto567BDBE1_val;

    // Implementation
    auto567BDBE1_val = lp_index;
    if (auto567BDBE1_val == 1) {
        gv_rankingAbbreviatedTag[lp_player] = "Elf 1";
        gv_rankingTag[lp_player] = "Elf 1";
    }
    else if (auto567BDBE1_val == 2) {
        gv_rankingAbbreviatedTag[lp_player] = "Elf 2";
        gv_rankingTag[lp_player] = "Elf 2";
    }
    else if (auto567BDBE1_val == 3) {
        gv_rankingAbbreviatedTag[lp_player] = "Elf 3";
        gv_rankingTag[lp_player] = "Elf 3";
    }
    else if (auto567BDBE1_val == 4) {
        gv_rankingAbbreviatedTag[lp_player] = "Elf 4";
        gv_rankingTag[lp_player] = "Elf 4";
    }
    else if (auto567BDBE1_val == 5) {
        gv_rankingAbbreviatedTag[lp_player] = "Elf 5";
        gv_rankingTag[lp_player] = "Elf 5";
    }
    else if (auto567BDBE1_val == 6) {
        gv_rankingAbbreviatedTag[lp_player] = "Elf 6";
        gv_rankingTag[lp_player] = "Elf 6";
    }
    else if (auto567BDBE1_val == 7) {
        gv_rankingAbbreviatedTag[lp_player] = "Elf 7";
        gv_rankingTag[lp_player] = "Elf 7";
    }
    else if (auto567BDBE1_val == 8) {
        gv_rankingAbbreviatedTag[lp_player] = "Elf 8";
        gv_rankingTag[lp_player] = "Elf 8";
    }
    else if (auto567BDBE1_val == 9) {
        gv_rankingAbbreviatedTag[lp_player] = "Elf 9";
        gv_rankingTag[lp_player] = "Elf 9";
    }
    else if (auto567BDBE1_val == 10) {
        gv_rankingAbbreviatedTag[lp_player] = "Elf 10";
        gv_rankingTag[lp_player] = "Elf 10";
    }
    else if (auto567BDBE1_val == 11) {
        gv_rankingAbbreviatedTag[lp_player] = "Elf 11";
        gv_rankingTag[lp_player] = "Elf 11";
    }
    else if (auto567BDBE1_val == 12) {
        gv_rankingAbbreviatedTag[lp_player] = "Elf Lord";
        gv_rankingTag[lp_player] = "Elf Lord";
    }
    else {
    }
}

void gf_AddRankItemstoPulldownforPlayer (int lp_dialogItem, int lp_player, int lp_rank) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_rank >= 1)) {
        DialogControlAddItem(lp_dialogItem, PlayerGroupSingle(lp_player), StringToText("Cadet"));
        if ((lp_rank >= 2)) {
            DialogControlAddItem(lp_dialogItem, PlayerGroupSingle(lp_player), StringToText("Private"));
            if ((lp_rank >= 3)) {
                DialogControlAddItem(lp_dialogItem, PlayerGroupSingle(lp_player), StringToText("Specialist"));
                if ((lp_rank >= 4)) {
                    DialogControlAddItem(lp_dialogItem, PlayerGroupSingle(lp_player), StringToText("Corporal"));
                    if ((lp_rank >= 5)) {
                        DialogControlAddItem(lp_dialogItem, PlayerGroupSingle(lp_player), StringToText("Sergeant"));
                        if ((lp_rank >= 6)) {
                            DialogControlAddItem(lp_dialogItem, PlayerGroupSingle(lp_player), StringToText("Officer"));
                            if ((lp_rank >= 7)) {
                                DialogControlAddItem(lp_dialogItem, PlayerGroupSingle(lp_player), StringToText("Lieutenant"));
                                if ((lp_rank >= 8)) {
                                    DialogControlAddItem(lp_dialogItem, PlayerGroupSingle(lp_player), StringToText("Captain"));
                                    if ((lp_rank >= 9)) {
                                        DialogControlAddItem(lp_dialogItem, PlayerGroupSingle(lp_player), StringToText("Major"));
                                        if ((lp_rank >= 10)) {
                                            DialogControlAddItem(lp_dialogItem, PlayerGroupSingle(lp_player), StringToText("Colonel"));
                                            if ((lp_rank >= 11)) {
                                                DialogControlAddItem(lp_dialogItem, PlayerGroupSingle(lp_player), StringToText("General"));
                                                if ((lp_rank >= 12)) {
                                                    DialogControlAddItem(lp_dialogItem, PlayerGroupSingle(lp_player), StringToText("God"));
                                                }

                                            }

                                        }

                                    }

                                }

                            }

                        }

                    }

                }

            }

        }

    }

}

void gf_AddRankItemstoPulldownforPlayer2 (int lp_dialogItem, int lp_player, int lp_rank) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_rank >= 1)) {
        DialogControlAddItem(lp_dialogItem, PlayerGroupSingle(lp_player), StringToText("Elf 1"));
        if ((lp_rank >= 2)) {
            DialogControlAddItem(lp_dialogItem, PlayerGroupSingle(lp_player), StringToText("Elf 2"));
            if ((lp_rank >= 3)) {
                DialogControlAddItem(lp_dialogItem, PlayerGroupSingle(lp_player), StringToText("Elf 3"));
                if ((lp_rank >= 4)) {
                    DialogControlAddItem(lp_dialogItem, PlayerGroupSingle(lp_player), StringToText("Elf 4"));
                    if ((lp_rank >= 5)) {
                        DialogControlAddItem(lp_dialogItem, PlayerGroupSingle(lp_player), StringToText("Elf 5"));
                        if ((lp_rank >= 6)) {
                            DialogControlAddItem(lp_dialogItem, PlayerGroupSingle(lp_player), StringToText("Elf 6"));
                            if ((lp_rank >= 7)) {
                                DialogControlAddItem(lp_dialogItem, PlayerGroupSingle(lp_player), StringToText("Elf 7"));
                                if ((lp_rank >= 8)) {
                                    DialogControlAddItem(lp_dialogItem, PlayerGroupSingle(lp_player), StringToText("Elf 8"));
                                    if ((lp_rank >= 9)) {
                                        DialogControlAddItem(lp_dialogItem, PlayerGroupSingle(lp_player), StringToText("Elf 9"));
                                        if ((lp_rank >= 10)) {
                                            DialogControlAddItem(lp_dialogItem, PlayerGroupSingle(lp_player), StringToText("Elf 10"));
                                            if ((lp_rank >= 11)) {
                                                DialogControlAddItem(lp_dialogItem, PlayerGroupSingle(lp_player), StringToText("Elf 11"));
                                                if ((lp_rank >= 12)) {
                                                    DialogControlAddItem(lp_dialogItem, PlayerGroupSingle(lp_player), StringToText("Elf Lord"));
                                                }

                                            }

                                        }

                                    }

                                }

                            }

                        }

                    }

                }

            }

        }

    }

}

void gf_GenerateUnitTagforPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    gf_UpdateUnitTagTextforPlayer(lp_player);
    TextTagCreate((StringExternal("Param/Value/A0924060") + gv_unitTagText[lp_player]), 20, Point(0.0, 0.0), 1.0, false, true, PlayerGroupAll());
    gv_unitTag[lp_player] = TextTagLastCreated();
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    TextTagFogofWar(TextTagLastCreated(), true);
    TextTagAttachToUnit(TextTagLastCreated(), gv_unit[lp_player], 0.0);
    TextTagShow(TextTagLastCreated(), PlayerGroupAll(), false);
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, gv_unitPlayerColor[lp_player]);
}

void gf_UpdateUnitTagTextforPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    gv_unitTagText[lp_player] = (StringToText((gv_rankingAbbreviatedTag[lp_player] + " ")) + StringToText(gf_ConvertPlayerColortoString(gv_thePlayerColor[lp_player])));
}

trigger auto_gf_GlobalChatUpdate_Trigger = null;
text auto_gf_GlobalChatUpdate_lp_text;

void gf_GlobalChatUpdate (text lp_text) {
    auto_gf_GlobalChatUpdate_lp_text = lp_text;

    if (auto_gf_GlobalChatUpdate_Trigger == null) {
        auto_gf_GlobalChatUpdate_Trigger = TriggerCreate("auto_gf_GlobalChatUpdate_TriggerFunc");
    }

    TriggerExecute(auto_gf_GlobalChatUpdate_Trigger, false, false);
}

bool auto_gf_GlobalChatUpdate_TriggerFunc (bool testConds, bool runActions) {
    text lp_text = auto_gf_GlobalChatUpdate_lp_text;

    // Automatic Variable Declarations
    playergroup auto0C6BC1E5_g;
    int auto0C6BC1E5_var;
    playergroup autoAAF7CCC6_g;
    int autoAAF7CCC6_var;

    // Implementation
    if ((gv_globalChatBox == c_invalidDialogControlId)) {
    }
    else {
        DialogControlRemoveItem(gv_globalChatBox, PlayerGroupAll(), (gv_globalChatDialogInt + 1));
        gv_globalChatDialogInt += 1;
        DialogControlAddItem(gv_globalChatBox, PlayerGroupAll(), lp_text);
        DialogControlAddItem(gv_globalChatBox, PlayerGroupAll(), StringToText(""));
        auto0C6BC1E5_g = PlayerGroupAll();
        auto0C6BC1E5_var = -1;
        while (true) {
            auto0C6BC1E5_var = PlayerGroupNextPlayer(auto0C6BC1E5_g, auto0C6BC1E5_var);
            if (auto0C6BC1E5_var < 0) { break; }
            DialogControlSelectItem(gv_globalChatBox, PlayerGroupSingle(auto0C6BC1E5_var), (DialogControlGetSelectedItem(gv_globalChatBox, auto0C6BC1E5_var) + 1));
        }
        DialogControlFadeTransparency(gv_globalChatBox, PlayerGroupAll(), 0.0, 0.0);
        autoAAF7CCC6_g = PlayerGroupAll();
        autoAAF7CCC6_var = -1;
        while (true) {
            autoAAF7CCC6_var = PlayerGroupNextPlayer(autoAAF7CCC6_g, autoAAF7CCC6_var);
            if (autoAAF7CCC6_var < 0) { break; }
            if ((DialogControlGetSelectedItem(gv_globalChatBox, autoAAF7CCC6_var) == DialogControlGetItemCount(gv_globalChatBox, autoAAF7CCC6_var))) {
                DialogControlSelectItem(gv_globalChatBox, PlayerGroupSingle(autoAAF7CCC6_var), (gv_globalChatDialogInt + 1));
            }

        }
    }
    return true;
}

void gf_DeadChatUpdate (text lp_text, string lp_string, int lp_player) {
    // Variable Declarations
    int lv_x;
    int lv_y;
    const int lv_charactersperline = 100;
    string lv_string;
    int lv_player;

    // Automatic Variable Declarations
    int autoD57E2385_ae;
    const int autoD57E2385_ai = lv_charactersperline;
    playergroup auto877C8C5F_g;
    int auto877C8C5F_var;

    // Variable Initialization
    lv_string = StringSub(lp_string, 1, 80);

    // Implementation
    if ((gv_deadChatItem == c_invalidDialogControlId)) {
    }
    else {
        DialogControlRemoveItem(gv_deadChatItem, PlayerGroupAll(), DialogControlGetItemCount(gv_deadChatItem, 1));
        if ((lp_string != "")) {
            autoD57E2385_ae = StringLength(lv_string);
            lv_x = 1;
            for ( ; ( (autoD57E2385_ai >= 0 && lv_x <= autoD57E2385_ae) || (autoD57E2385_ai < 0 && lv_x >= autoD57E2385_ae) ) ; lv_x += autoD57E2385_ai ) {
                gv_deadDialogInt += 1;
                while ((StringSub(lv_string, lv_x, lv_x) != " ") && (lv_x != 0)) {
                    lv_x -= 1;
                }
                lv_x += 1;
                lv_y = (lv_x + lv_charactersperline);
                if ((lv_x == 1)) {
                    lv_y -= 15;
                }

                while ((lv_y < StringLength(lv_string)) && (StringSub(lv_string, lv_y, lv_y) != " ") && (lv_y != 1)) {
                    lv_y -= 1;
                }
                lv_y -= 1;
                if ((lv_x == 1)) {
                    DialogControlAddItem(gv_deadChatItem, PlayerGroupAll(), (StringToText(gf_AddTimeStamp()) + StringExternal("Param/Value/B9E7E5C5") + TextWithColor(PlayerName(lp_player), libNtve_gf_ConvertPlayerColorToColor(gv_thePlayerColor[lp_player])) + StringExternal("Param/Value/901123B8") + StringToText(StringSub(lv_string, lv_x, lv_y))));
                    lv_x -= 15;
                }
                else {
                    DialogControlAddItem(gv_deadChatItem, PlayerGroupAll(), StringToText(StringSub(lv_string, lv_x, lv_y)));
                }
            }
        }
        else {
            DialogControlAddItem(gv_deadChatItem, PlayerGroupAll(), (StringToText(gf_AddTimeStamp()) + StringExternal("Param/Value/BFEFB39D") + lp_text));
        }
        DialogControlAddItem(gv_deadChatItem, PlayerGroupAll(), StringExternal("Param/Value/EE545B9B"));
        auto877C8C5F_g = PlayerGroupActive();
        auto877C8C5F_var = -1;
        while (true) {
            auto877C8C5F_var = PlayerGroupNextPlayer(auto877C8C5F_g, auto877C8C5F_var);
            if (auto877C8C5F_var < 0) { break; }
            if ((libNtve_gf_DialogItemIsChecked(gv_deadLoungeAutoFadeFollow, auto877C8C5F_var) == true)) {
                DialogControlFadeTransparency(gv_deadChatItem, PlayerGroupSingle(auto877C8C5F_var), 0.0, 0.0);
                DialogControlFadeTransparency(gv_deadChatItem, PlayerGroupSingle(auto877C8C5F_var), 6.0, 50.0);
                DialogControlSelectItem(gv_deadChatItem, PlayerGroupSingle(auto877C8C5F_var), DialogControlGetItemCount(gv_deadChatItem, auto877C8C5F_var));
            }

        }
    }
}

void gf_DeadChatOnlineUpdate () {
    // Automatic Variable Declarations
    playergroup autoE71B69D3_g;
    int autoE71B69D3_var;

    // Implementation
    DialogControlRemoveAllItems(gv_deadChatOnlineItem, PlayerGroupAll());
    autoE71B69D3_g = gv_playing;
    autoE71B69D3_var = -1;
    while (true) {
        autoE71B69D3_var = PlayerGroupNextPlayer(autoE71B69D3_g, autoE71B69D3_var);
        if (autoE71B69D3_var < 0) { break; }
        if ((PlayerGroupHasPlayer(gv_dead, autoE71B69D3_var) == true) && (PlayerStatus(autoE71B69D3_var) == c_playerStatusActive)) {
            DialogControlAddItem(gv_deadChatOnlineItem, PlayerGroupAll(), TextWithColor(PlayerName(autoE71B69D3_var), libNtve_gf_ConvertPlayerColorToColor(gv_thePlayerColor[autoE71B69D3_var])));
        }

    }
}

void gf_DeadAliveChatUpdate (text lp_text) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup auto248CA69D_g;

    // Variable Initialization

    // Implementation
    if ((gv_deadAliveChatItem == c_invalidDialogControlId)) {
    }
    else {
        DialogControlRemoveItem(gv_deadAliveChatItem, PlayerGroupAll(), (gv_deadAliveChatDialog + 1));
        gv_deadAliveChatDialog += 1;
        DialogControlAddItem(gv_deadAliveChatItem, PlayerGroupAll(), (StringToText(gf_AddTimeStamp()) + StringExternal("Param/Value/B98A8EB6") + lp_text));
        DialogControlAddItem(gv_deadAliveChatItem, PlayerGroupAll(), StringExternal("Param/Value/950100EE"));
        auto248CA69D_g = PlayerGroupActive();
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(auto248CA69D_g, lv_player);
            if (lv_player < 0) { break; }
            if ((libNtve_gf_DialogItemIsChecked(gv_deadLoungeAutoFadeFollow, lv_player) == true)) {
                DialogControlFadeTransparency(gv_deadAliveChatItem, PlayerGroupSingle(lv_player), 0.0, 0.0);
                DialogControlFadeTransparency(gv_deadAliveChatItem, PlayerGroupSingle(lv_player), 6.0, 50.0);
                DialogControlSelectItem(gv_deadAliveChatItem, PlayerGroupSingle(lv_player), (gv_deadAliveChatDialog + 1));
            }

        }
    }
}

void gf_DeadAliveChatOnlineUpdate () {
    // Automatic Variable Declarations
    playergroup auto78FD0F36_g;
    int auto78FD0F36_var;

    // Implementation
    DialogControlRemoveAllItems(gv_deadAliveChatOnlineItem, PlayerGroupAll());
    auto78FD0F36_g = gv_playing;
    auto78FD0F36_var = -1;
    while (true) {
        auto78FD0F36_var = PlayerGroupNextPlayer(auto78FD0F36_g, auto78FD0F36_var);
        if (auto78FD0F36_var < 0) { break; }
        if ((PlayerGroupHasPlayer(gv_dead, auto78FD0F36_var) == false)) {
            DialogControlAddItem(gv_deadAliveChatOnlineItem, PlayerGroupAll(), TextWithColor(gv_unitTagText[auto78FD0F36_var], libNtve_gf_ConvertPlayerColorToColor(gv_thePlayerColor[auto78FD0F36_var])));
        }

    }
}

string gf_AddTimeStamp () {
    // Variable Declarations
    string lv_minutes;
    string lv_seconds;
    string lv_prefix;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_minutes = FixedToString(TruncI((TimerGetRemaining(gv_timer) / 60.0)), 0);
    lv_seconds = FixedToString(ModF(TimerGetRemaining(gv_timer), 60.0), 0);
    lv_prefix = "";

    // Implementation
    if ((TriggerIsEnabled(gt_EvacShipEnter) == true)) {
        lv_prefix = "+";
    }
    else {
        lv_prefix = "-";
    }
    if ((StringToInt(lv_seconds) < 10)) {
        lv_seconds = ("0" + lv_seconds);
    }

    return ("[" + lv_prefix + lv_minutes + ":" + lv_seconds + "]");
}

void gf_AddmultilinetexttoListbox (int lp_dialogItem, string lp_string, int lp_charactersPerLine, playergroup lp_players) {
    // Variable Declarations
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    int autoDE05FA0C_ae;
    int autoDE05FA0C_ai;

    // Variable Initialization

    // Implementation
    autoDE05FA0C_ae = StringLength(lp_string);
    autoDE05FA0C_ai = lp_charactersPerLine;
    lv_x = 1;
    for ( ; ( (autoDE05FA0C_ai >= 0 && lv_x <= autoDE05FA0C_ae) || (autoDE05FA0C_ai < 0 && lv_x >= autoDE05FA0C_ae) ) ; lv_x += autoDE05FA0C_ai ) {
        while ((StringSub(lp_string, lv_x, lv_x) != " ") && (lv_x != 0)) {
            lv_x -= 1;
        }
        lv_x += 1;
        lv_y = (lv_x + lp_charactersPerLine);
        while ((lv_y < StringLength(lp_string)) && (StringSub(lp_string, lv_y, lv_y) != " ") && (lv_y != 1)) {
            lv_y -= 1;
        }
        lv_y -= 1;
        DialogControlAddItem(lp_dialogItem, lp_players, StringToText(StringSub(lp_string, lv_x, lv_y)));
    }
}

void gf_AddmultilinetexttoListbox2 () {
    // Variable Declarations
    int lv_x;
    int lv_y;
    const int lv_charactersperline = 80;
    const string lv_string = "";

    // Automatic Variable Declarations
    int auto930CFABB_ae;
    const int auto930CFABB_ai = lv_charactersperline;

    // Variable Initialization

    // Implementation
    auto930CFABB_ae = StringLength(lv_string);
    lv_x = 1;
    for ( ; ( (auto930CFABB_ai >= 0 && lv_x <= auto930CFABB_ae) || (auto930CFABB_ai < 0 && lv_x >= auto930CFABB_ae) ) ; lv_x += auto930CFABB_ai ) {
        while ((StringSub(lv_string, lv_x, lv_x) != " ") && (lv_x != 0)) {
            lv_x -= 1;
        }
        lv_x += 1;
        lv_y = (lv_x + lv_charactersperline);
        while ((lv_y < StringLength(lv_string)) && (StringSub(lv_string, lv_y, lv_y) != " ") && (lv_y != 1)) {
            lv_y -= 1;
        }
        lv_y -= 1;
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringToText(StringSub(lv_string, lv_x, lv_y)));
    }
}

trigger auto_gf_GenerateProgressBar_Trigger = null;
int auto_gf_GenerateProgressBar_lp_player;
int auto_gf_GenerateProgressBar_lp_min;
int auto_gf_GenerateProgressBar_lp_max;
int auto_gf_GenerateProgressBar_lp_initialValue;
int auto_gf_GenerateProgressBar_lp_finalValue;
text auto_gf_GenerateProgressBar_lp_title;
int auto_gf_GenerateProgressBar_lp_level;

void gf_GenerateProgressBar (int lp_player, int lp_min, int lp_max, int lp_initialValue, int lp_finalValue, text lp_title, int lp_level) {
    auto_gf_GenerateProgressBar_lp_player = lp_player;
    auto_gf_GenerateProgressBar_lp_min = lp_min;
    auto_gf_GenerateProgressBar_lp_max = lp_max;
    auto_gf_GenerateProgressBar_lp_initialValue = lp_initialValue;
    auto_gf_GenerateProgressBar_lp_finalValue = lp_finalValue;
    auto_gf_GenerateProgressBar_lp_title = lp_title;
    auto_gf_GenerateProgressBar_lp_level = lp_level;

    if (auto_gf_GenerateProgressBar_Trigger == null) {
        auto_gf_GenerateProgressBar_Trigger = TriggerCreate("auto_gf_GenerateProgressBar_TriggerFunc");
    }

    TriggerExecute(auto_gf_GenerateProgressBar_Trigger, false, false);
}

bool auto_gf_GenerateProgressBar_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_GenerateProgressBar_lp_player;
    int lp_min = auto_gf_GenerateProgressBar_lp_min;
    int lp_max = auto_gf_GenerateProgressBar_lp_max;
    int lp_initialValue = auto_gf_GenerateProgressBar_lp_initialValue;
    int lp_finalValue = auto_gf_GenerateProgressBar_lp_finalValue;
    text lp_title = auto_gf_GenerateProgressBar_lp_title;
    int lp_level = auto_gf_GenerateProgressBar_lp_level;

    // Variable Declarations
    fixed lv_x;
    int lv_xp;
    int lv_progressbar;
    int lv_progressbartext;
    int lv_progress;

    // Automatic Variable Declarations
    int auto8B32C0F7_ae;
    const fixed auto8B32C0F7_ai = 1.0;
    int autoDA0A179C_ae;
    const fixed autoDA0A179C_ai = 1.0;

    // Variable Initialization
    lv_x = lp_initialValue;
    lv_progressbar = c_invalidDialogControlId;
    lv_progressbartext = c_invalidDialogControlId;
    lv_progress = c_invalidDialogId;

    // Implementation
    DialogCreate(800, 75, c_anchorBottom, 0, 375, true);
    lv_progress = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(lp_player), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeProgressBar);
    lv_progressbar = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, 0, 0);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 800, 75);
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), lp_min, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), lp_max, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), lv_x, PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\white32.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTintColor(DialogControlLastCreated(), Color(22*100/255,128*100/255,0), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 800, 25, c_anchorTopRight, 0, 0, (StringExternal("Param/Value/AE660C0B") + IntToText(lp_level)), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModRightSize20Bold", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 800, 25, c_anchorTopLeft, 0, 0, lp_title, ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize20Bold", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 800, 75, c_anchorBottom, 0, 0, (IntToText(lp_initialValue) + StringExternal("Param/Value/3279ABBD") + IntToText(lp_max)), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_progressbartext = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize36Bold", PlayerGroupAll());
    if ((lp_max < lp_finalValue)) {
        autoDA0A179C_ae = lp_max;
        lv_x = lv_x;
        for ( ; ( (autoDA0A179C_ai >= 0 && lv_x <= autoDA0A179C_ae) || (autoDA0A179C_ai < 0 && lv_x >= autoDA0A179C_ae) ) ; lv_x += autoDA0A179C_ai ) {
            Wait(0.01, c_timeReal);
            SoundPlay(SoundLink("TextCrawlType", -1), PlayerGroupSingle(lp_player), 100.0, 0.0);
            libNtve_gf_SetDialogItemText(lv_progressbartext, (IntToText(FixedToInt(lv_x)) + StringExternal("Param/Value/9A2A3C6E") + IntToText(lp_max)), PlayerGroupAll());
            libNtve_gf_SetDialogItemCurrentValue(lv_progressbar, lv_x, PlayerGroupAll());
        }
        libNtve_gf_SetDialogItemText(lv_progressbartext, (IntToText(FixedToInt(lp_finalValue)) + StringExternal("Param/Value/6E9FD11D") + IntToText(lp_max)), PlayerGroupAll());
        DialogDestroy(lv_progress);
        gf_GenerateProgressBar(lp_player, lp_max, gf_FindMaxXPfromLevel((lp_level + 1)), lp_max, lp_finalValue, lp_title, (lp_level + 1));
    }
    else {
        auto8B32C0F7_ae = lp_finalValue;
        lv_x = lv_x;
        for ( ; ( (auto8B32C0F7_ai >= 0 && lv_x <= auto8B32C0F7_ae) || (auto8B32C0F7_ai < 0 && lv_x >= auto8B32C0F7_ae) ) ; lv_x += auto8B32C0F7_ai ) {
            Wait(0.01, c_timeReal);
            SoundPlay(SoundLink("TextCrawlType", -1), PlayerGroupSingle(lp_player), 100.0, 0.0);
            libNtve_gf_SetDialogItemText(lv_progressbartext, (IntToText(FixedToInt(lv_x)) + StringExternal("Param/Value/5CCB7A33") + IntToText(lp_max)), PlayerGroupAll());
            libNtve_gf_SetDialogItemCurrentValue(lv_progressbar, lv_x, PlayerGroupAll());
        }
        libNtve_gf_SetDialogItemText(lv_progressbartext, (IntToText(FixedToInt(lp_finalValue)) + StringExternal("Param/Value/97CD358E") + IntToText(lp_max)), PlayerGroupAll());
    }
    return true;
}

int gf_FindMaxXPfromLevel (int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_level <= 1)) {
        if ((lp_level == 0)) {
            return 0;
        }
        else {
            return 50;
        }
    }
    else {
        return (gf_FindMaxXPfromLevel((lp_level - 1)) + (50 + (25 * lp_level)));
    }
}

int gf_FindLevelfromPoints (int lp_points) {
    // Variable Declarations
    int lv_x;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_x = 1;

    // Implementation
    while ((gf_FindMaxXPfromLevel(lv_x) < lp_points)) {
        lv_x += 1;
    }
    return lv_x;
}

void gf_GenerateThingRatingBars (int lp_player) {
    // Variable Declarations
    fixed lv_overall;
    fixed lv_round;
    int lv_thingratingbars;
    int lv_overallbar;
    int lv_roundbar;
    int lv_overallbartext;
    int lv_roundbartext;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_overall = (gv_tRPThingRatingPoints[lp_player] / MaxF(gv_tRIThingRatingInstances[lp_player], 1.0));
    lv_round = (gv_xTRP / MaxF(gv_xTRI, 1.0));
    lv_thingratingbars = c_invalidDialogId;
    lv_overallbar = c_invalidDialogControlId;
    lv_roundbar = c_invalidDialogControlId;
    lv_overallbartext = c_invalidDialogControlId;
    lv_roundbartext = c_invalidDialogControlId;

    // Implementation
    DialogCreate(800, 25, c_anchorBottom, 0, 350, true);
    lv_thingratingbars = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(lp_player), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeProgressBar);
    lv_overallbar = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 300, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, 30, 0);
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 1.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 5.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), lv_overall, PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\white32.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTintColor(DialogControlLastCreated(), Color(149*100/255,150*100/255,151*100/255), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 25, c_anchorLeft, 25, 0, (StringExternal("Param/Value/AF7E1BD3") + FixedToText(lv_overall, 2) + StringExternal("Param/Value/0B87592B")), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_overallbartext = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20Bold", PlayerGroupAll());
    gv_thingRatingBarOverall = lv_overallbar;
    gv_thingRatingBarOverallText = lv_overallbartext;
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeProgressBar);
    lv_roundbar = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 300, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorRight, 30, 0);
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 1.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 5.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), lv_round, PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\white32.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTintColor(DialogControlLastCreated(), Color(84*100/255,0,129*100/255), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 25, c_anchorRight, 25, 0, (StringExternal("Param/Value/22559FB0") + FixedToText(lv_round, 2) + StringExternal("Param/Value/F00458A2")), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_roundbartext = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20Bold", PlayerGroupAll());
    gv_thingRatingBarRound = lv_roundbar;
    gv_thingRatingBarRoundText = lv_roundbartext;
}

void gf_RefreshThingRatingBars (int lp_player) {
    // Variable Declarations
    fixed lv_overall;
    fixed lv_round;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_overall = (gv_tRPThingRatingPoints[lp_player] / MaxF(gv_tRIThingRatingInstances[lp_player], 1.0));
    lv_round = (gv_xTRP / MaxF(gv_xTRI, 1.0));

    // Implementation
    if (((gv_thingRatingBarOverall != c_invalidDialogControlId) || (gv_thingRatingBarOverallText != c_invalidDialogControlId) || (gv_thingRatingBarRound != c_invalidDialogControlId) || (gv_thingRatingBarRoundText != c_invalidDialogControlId))) {
        libNtve_gf_SetDialogItemCurrentValue(gv_thingRatingBarOverall, lv_overall, PlayerGroupAll());
        libNtve_gf_SetDialogItemCurrentValue(gv_thingRatingBarRound, lv_round, PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_thingRatingBarOverallText, (StringExternal("Param/Value/05C73754") + FixedToText(lv_overall, 2) + StringExternal("Param/Value/60DF68DB")), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_thingRatingBarRoundText, (StringExternal("Param/Value/1B044922") + FixedToText(lv_round, 2) + StringExternal("Param/Value/B5260A79")), PlayerGroupAll());
    }

}

void gf_KilledbyTrigger (unit lp_unit, int lp_killedPlayer, int lp_killingPlayer, text lp_reason, string lp_effect, int lp_instances) {
    // Automatic Variable Declarations
    int auto3473280B_ae;
    int auto3473280B_var;

    // Implementation
    auto3473280B_ae = lp_instances;
    auto3473280B_var = 1;
    for ( ; auto3473280B_var <= auto3473280B_ae; auto3473280B_var += 1 ) {
        PlayerCreateEffectUnit(lp_killingPlayer, lp_effect, lp_unit);
    }
    gv_endGameState[lp_killedPlayer] = (StringExternal("Param/Value/BBB7F9FC") + TextWithColor(lp_reason, libNtve_gf_ConvertPlayerColorToColor(gv_thePlayerColor[lp_killingPlayer])));
}

trigger auto_gf_GenerateSandstorm_Trigger = null;

void gf_GenerateSandstorm () {
    if (auto_gf_GenerateSandstorm_Trigger == null) {
        auto_gf_GenerateSandstorm_Trigger = TriggerCreate("auto_gf_GenerateSandstorm_TriggerFunc");
    }

    TriggerExecute(auto_gf_GenerateSandstorm_Trigger, false, false);
}

bool auto_gf_GenerateSandstorm_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_picked;
    int lv_x;
    fixed lv_rotation;
    actor[26] lv_sandstormmodel;
    sound lv_sandstormsound;

    // Automatic Variable Declarations
    const int auto3C494D82_ae = 25;
    const int auto3C494D82_ai = 1;
    playergroup auto35A61E5F_g;
    playergroup auto123CB8F1_g;
    const int auto0C922C16_ae = 25;
    const int auto0C922C16_ai = 1;

    // Variable Initialization
    lv_rotation = libNtve_gf_RandomAngle();

    // Implementation
    SoundPlay(SoundLink("TVReports_AmbiencePrison", 0), PlayerGroupAll(), 100.0, 0.0);
    lv_sandstormsound = SoundLastPlayed();
    lv_x = 1;
    for ( ; ( (auto3C494D82_ai >= 0 && lv_x <= auto3C494D82_ae) || (auto3C494D82_ai < 0 && lv_x >= auto3C494D82_ae) ) ; lv_x += auto3C494D82_ai ) {
        libNtve_gf_CreateModelAtPoint("WindRough", RegionRandomPoint(RegionFromId(45)));
        lv_sandstormmodel[lv_x] = libNtve_gf_ActorLastCreated();
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetFacing(lv_rotation));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTintColor(Color(50.20, 25.10, 0.00), 10.0, 0.0));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(0.1, 0.1, 0.1, 0.0));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(1.0, 1.0, 1.0, 4.0));
    }
    Wait(2.0, c_timeGame);
    while ((gv_sandstorm == true)) {
        auto35A61E5F_g = gv_playing;
        lv_picked = -1;
        while (true) {
            lv_picked = PlayerGroupNextPlayer(auto35A61E5F_g, lv_picked);
            if (lv_picked < 0) { break; }
            if ((TerrainTexture(UnitGetPosition(gv_unit[lv_picked])) == "MarSaraSand")) {
                TechTreeBehaviorAllow(lv_picked, "SandstormEffect", true);
                gf_QuickTipsforString("Sandstorm", lv_picked);
            }
            else {
                TechTreeBehaviorAllow(lv_picked, "SandstormEffect", false);
            }
        }
        Wait(0.5, c_timeGame);
    }
    auto123CB8F1_g = gv_playing;
    lv_picked = -1;
    while (true) {
        lv_picked = PlayerGroupNextPlayer(auto123CB8F1_g, lv_picked);
        if (lv_picked < 0) { break; }
        TechTreeBehaviorAllow(lv_picked, "SandstormEffect", false);
    }
    lv_x = 1;
    for ( ; ( (auto0C922C16_ai >= 0 && lv_x <= auto0C922C16_ae) || (auto0C922C16_ai < 0 && lv_x >= auto0C922C16_ae) ) ; lv_x += auto0C922C16_ai ) {
        ActorSend(lv_sandstormmodel[lv_x], libNtve_gf_Destroy());
    }
    SoundStop(lv_sandstormsound, true);
    return true;
}

trigger auto_gf_InitiateSandstorm_Trigger = null;

void gf_InitiateSandstorm () {
    if (auto_gf_InitiateSandstorm_Trigger == null) {
        auto_gf_InitiateSandstorm_Trigger = TriggerCreate("auto_gf_InitiateSandstorm_TriggerFunc");
    }

    TriggerExecute(auto_gf_InitiateSandstorm_Trigger, false, false);
}

bool auto_gf_InitiateSandstorm_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    gv_sandstorm = true;
    gf_GenerateSandstorm();
    Wait(RandomFixed(18.0, 60.0), c_timeGame);
    gv_sandstorm = false;
    Wait(RandomFixed(20.0, 120.0), c_timeGame);
    gf_InitiateSandstorm();
    return true;
}

point gf_GetFunctionRoomfromIndex (int lp_index, int lp_station, int lp_generatorType) {
    // Automatic Variable Declarations
    int auto7A71A705_val;
    int auto453DD369_val;
    int auto1CFD873D_val;
    int auto310F3D0B_val;
    int autoFAA74ED9_val;
    int auto244A9B47_val;

    // Implementation
    auto7A71A705_val = lp_station;
    if (auto7A71A705_val == ge_Station_Aquilon) {
        auto453DD369_val = lp_generatorType;
        if (auto453DD369_val == ge_FacilityType_CommunicationsTower) {
            return PointFromId(1765);
        }
        else if (auto453DD369_val == ge_FacilityType_BeaconRelay) {
            return PointFromId(758);
        }
        else if (auto453DD369_val == ge_FacilityType_Generator) {
            return PointFromId(1766);
        }
        else if (auto453DD369_val == ge_FacilityType_FuelStation) {
            return PointFromId(1764);
        }
        else {
            return PointFromId(1222);
        }
    }
    else if (auto7A71A705_val == ge_Station_Baguio) {
        auto1CFD873D_val = lp_generatorType;
        if (auto1CFD873D_val == ge_FacilityType_CommunicationsTower) {
            return PointFromId(1772);
        }
        else if (auto1CFD873D_val == ge_FacilityType_BeaconRelay) {
            return PointFromId(1773);
        }
        else if (auto1CFD873D_val == ge_FacilityType_Generator) {
            return PointFromId(1769);
        }
        else if (auto1CFD873D_val == ge_FacilityType_FuelStation) {
            return PointFromId(1771);
        }
        else {
            return PointFromId(1770);
        }
    }
    else if (auto7A71A705_val == ge_Station_Liberty) {
        auto310F3D0B_val = lp_generatorType;
        if (auto310F3D0B_val == ge_FacilityType_CommunicationsTower) {
            return PointFromId(756);
        }
        else if (auto310F3D0B_val == ge_FacilityType_BeaconRelay) {
            return PointFromId(757);
        }
        else if (auto310F3D0B_val == ge_FacilityType_Generator) {
            return PointFromId(103);
        }
        else if (auto310F3D0B_val == ge_FacilityType_FuelStation) {
            return PointFromId(755);
        }
        else {
            return PointFromId(707);
        }
    }
    else if (auto7A71A705_val == ge_Station_Ragnov) {
        autoFAA74ED9_val = lp_generatorType;
        if (autoFAA74ED9_val == ge_FacilityType_CommunicationsTower) {
            return PointFromId(1776);
        }
        else if (autoFAA74ED9_val == ge_FacilityType_BeaconRelay) {
            return PointFromId(1777);
        }
        else if (autoFAA74ED9_val == ge_FacilityType_Generator) {
            return PointFromId(1774);
        }
        else if (autoFAA74ED9_val == ge_FacilityType_FuelStation) {
            return PointFromId(210);
        }
        else {
            return PointFromId(1775);
        }
    }
    else if (auto7A71A705_val == ge_Station_Sahara) {
        auto244A9B47_val = lp_generatorType;
        if (auto244A9B47_val == ge_FacilityType_CommunicationsTower) {
            return PointFromId(3);
        }
        else if (auto244A9B47_val == ge_FacilityType_BeaconRelay) {
            return PointFromId(4);
        }
        else if (auto244A9B47_val == ge_FacilityType_Generator) {
            return PointFromId(5);
        }
        else if (auto244A9B47_val == ge_FacilityType_FuelStation) {
            return PointFromId(2);
        }
        else {
            return PointFromId(1);
        }
    }
    else {
        return PointFromId(1);
    }
}

trigger auto_gf_BrokenFusionCore_Trigger = null;

void gf_BrokenFusionCore () {
    if (auto_gf_BrokenFusionCore_Trigger == null) {
        auto_gf_BrokenFusionCore_Trigger = TriggerCreate("auto_gf_BrokenFusionCore_TriggerFunc");
    }

    TriggerExecute(auto_gf_BrokenFusionCore_Trigger, false, false);
}

bool auto_gf_BrokenFusionCore_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoC09AFCB1_g;
    int autoC09AFCB1_var;
    playergroup auto8C723DBE_g;
    int auto8C723DBE_var;
    playergroup autoA23A0A6B_g;
    int autoA23A0A6B_var;
    playergroup auto5D2BF28D_g;
    int auto5D2BF28D_var;

    // Implementation
    gf_FlashScreen(0.0, 2.0, 0.75, 0.25, PlayerGroupAll(), 0.0, 100.0, Color(0,0,0), "Assets\\Textures\\white32.dds");
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringExternal("Param/Value/778592DE"));
    SoundPlay(SoundLink("Purifier_PowerDown", -1), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "BeaconClaimPing", UnitGetPosition(gv_fusionCore), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 9999.0, 270.0);
    autoC09AFCB1_g = PlayerGroupAll();
    autoC09AFCB1_var = -1;
    while (true) {
        autoC09AFCB1_var = PlayerGroupNextPlayer(autoC09AFCB1_g, autoC09AFCB1_var);
        if (autoC09AFCB1_var < 0) { break; }
        TechTreeBehaviorAllow(autoC09AFCB1_var, "ReducedVision", true);
    }
    while ((UnitGetPropertyFixed(gv_fusionCore, c_unitPropLife, c_unitPropCurrent) < UnitGetPropertyFixed(gv_fusionCore, c_unitPropLife, c_unitPropNormal))) {
        auto8C723DBE_g = PlayerGroupAll();
        auto8C723DBE_var = -1;
        while (true) {
            auto8C723DBE_var = PlayerGroupNextPlayer(auto8C723DBE_g, auto8C723DBE_var);
            if (auto8C723DBE_var < 0) { break; }
            VisExploreArea(auto8C723DBE_var, RegionRect(libNtve_gf_ArithmeticRealClamp((PointGetX(RegionGetCenter(RegionPlayableMap())) + -80.0), 0.0, 256.0), libNtve_gf_ArithmeticRealClamp((PointGetY(RegionGetCenter(RegionPlayableMap())) + -80.0), 0.0, 256.0), libNtve_gf_ArithmeticRealClamp((PointGetX(RegionGetCenter(RegionPlayableMap())) + 80.0), 0.0, 256.0), libNtve_gf_ArithmeticRealClamp((PointGetY(RegionGetCenter(RegionPlayableMap())) + 80.0), 0.0, 256.0)), false, false);
            VisExploreArea(auto8C723DBE_var, RegionFromId(5), true, false);
        }
        Wait(0.1, c_timeGame);
    }
    PingDestroy(PingLastCreated());
    autoA23A0A6B_g = PlayerGroupAll();
    autoA23A0A6B_var = -1;
    while (true) {
        autoA23A0A6B_var = PlayerGroupNextPlayer(autoA23A0A6B_g, autoA23A0A6B_var);
        if (autoA23A0A6B_var < 0) { break; }
        TechTreeBehaviorAllow(autoA23A0A6B_var, "ReducedVision", false);
    }
    SoundPlay(SoundLink("Purifier_PowerUp", -1), PlayerGroupAll(), 100.0, 0.0);
    auto5D2BF28D_g = PlayerGroupAll();
    auto5D2BF28D_var = -1;
    while (true) {
        auto5D2BF28D_var = PlayerGroupNextPlayer(auto5D2BF28D_g, auto5D2BF28D_var);
        if (auto5D2BF28D_var < 0) { break; }
        VisExploreArea(auto5D2BF28D_var, RegionPlayableMap(), true, false);
    }
    UnitSetState(gv_fusionCore, c_unitStateInvulnerable, false);
    gf_FlashScreen(0.0, 2.0, 0.75, 0.25, PlayerGroupAll(), 0.0, 100.0, Color(0,0,0), "Assets\\Textures\\white32.dds");
    return true;
}

trigger auto_gf_BrokenBeaconRelay_Trigger = null;

void gf_BrokenBeaconRelay () {
    if (auto_gf_BrokenBeaconRelay_Trigger == null) {
        auto_gf_BrokenBeaconRelay_Trigger = TriggerCreate("auto_gf_BrokenBeaconRelay_TriggerFunc");
    }

    TriggerExecute(auto_gf_BrokenBeaconRelay_Trigger, false, false);
}

bool auto_gf_BrokenBeaconRelay_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringExternal("Param/Value/A74D1FE0"));
    SoundPlay(SoundLink("Purifier_PowerDown", -1), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "BeaconClaimPing", UnitGetPosition(gv_beaconRelay), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 9999.0, 270.0);
    TriggerEnable(gt_BeaconRelayBoost, false);
    while ((UnitGetPropertyFixed(gv_beaconRelay, c_unitPropLife, c_unitPropCurrent) < UnitGetPropertyFixed(gv_beaconRelay, c_unitPropLife, c_unitPropNormal))) {
        Wait(0.1, c_timeGame);
    }
    TriggerEnable(gt_BeaconRelayBoost, true);
    PingDestroy(PingLastCreated());
    SoundPlay(SoundLink("Purifier_PowerUp", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitSetState(gv_beaconRelay, c_unitStateInvulnerable, false);
    return true;
}

trigger auto_gf_BrokenCommsLink_Trigger = null;

void gf_BrokenCommsLink () {
    if (auto_gf_BrokenCommsLink_Trigger == null) {
        auto_gf_BrokenCommsLink_Trigger = TriggerCreate("auto_gf_BrokenCommsLink_TriggerFunc");
    }

    TriggerExecute(auto_gf_BrokenCommsLink_Trigger, false, false);
}

bool auto_gf_BrokenCommsLink_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    TimerPause(gv_timer, true);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringExternal("Param/Value/9B1DAE45"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "BeaconClaimPing", UnitGetPosition(gv_commsLink), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 9999.0, 270.0);
    SoundPlay(SoundLink("Purifier_PowerDown", -1), PlayerGroupAll(), 100.0, 0.0);
    while (!((UnitGetPropertyFixed(gv_commsLink, c_unitPropLife, c_unitPropCurrent) == UnitGetPropertyFixed(gv_commsLink, c_unitPropLife, c_unitPropNormal)))) {
        Wait(1.0, c_timeReal);
    }
    PingDestroy(PingLastCreated());
    TimerPause(gv_timer, false);
    UnitSetState(gv_commsLink, c_unitStateInvulnerable, false);
    SoundPlay(SoundLink("Purifier_PowerUp", -1), PlayerGroupAll(), 100.0, 0.0);
    return true;
}

trigger auto_gf_BrokenFuelStation_Trigger = null;

void gf_BrokenFuelStation () {
    if (auto_gf_BrokenFuelStation_Trigger == null) {
        auto_gf_BrokenFuelStation_Trigger = TriggerCreate("auto_gf_BrokenFuelStation_TriggerFunc");
    }

    TriggerExecute(auto_gf_BrokenFuelStation_Trigger, false, false);
}

bool auto_gf_BrokenFuelStation_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringExternal("Param/Value/5D120DB7"));
    SoundPlay(SoundLink("Purifier_PowerDown", -1), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "BeaconClaimPing", UnitGetPosition(gv_fuelStation), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 9999.0, 270.0);
    TriggerEnable(gt_FuelStationProvision, false);
    while ((UnitGetPropertyFixed(gv_fuelStation, c_unitPropLife, c_unitPropCurrent) < UnitGetPropertyFixed(gv_fuelStation, c_unitPropLife, c_unitPropNormal))) {
        Wait(0.1, c_timeGame);
    }
    TriggerEnable(gt_FuelStationProvision, true);
    PingDestroy(PingLastCreated());
    SoundPlay(SoundLink("Purifier_PowerUp", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitSetState(gv_fuelStation, c_unitStateInvulnerable, false);
    return true;
}

void gf_SpawnCorpse (point lp_point, int lp_player) {
    // Automatic Variable Declarations
    playergroup auto504F984F_g;
    int auto504F984F_var;

    // Implementation
    TextTagDestroy(gv_chatTextLabel[lp_player]);
    TextTagDestroy(gv_unitTag[lp_player]);
    UnitCreate(1, "Corpse", c_unitCreateIgnorePlacement, 0, lp_point, 270.0);
    UnitSetCustomValue(UnitLastCreated(), 0, lp_player);
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetTintColor(libNtve_gf_ConvertPlayerColorToColor(gv_thePlayerColor[lp_player]), 2.0, 0.0));
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetHeight(0.2));
    libNtve_gf_AttachModelToUnit(UnitLastCreated(), "LightOmniWhite", "Ref_Origin");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(0.75, 0.75, 0.75, 0.0));
    libNtve_gf_AttachModelToUnit(UnitLastCreated(), "Flashlight", "Ref_Origin");
    libNtve_gf_MakeModelFaceAngle(libNtve_gf_ActorLastCreated(), libNtve_gf_RandomAngle());
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(2.0, 1.0, 0.5, 0.0));
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetOpacity(0.0, 0));
    TextTagCreate(gv_unitTagText[lp_player], 20, lp_point, 1.0, false, true, PlayerGroupAll());
    gv_unitTag[lp_player] = TextTagLastCreated();
    TextTagAttachToUnit(TextTagLastCreated(), UnitLastCreated(), 0.0);
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, gv_unitPlayerColor[lp_player]);
    auto504F984F_g = gv_playing;
    auto504F984F_var = -1;
    while (true) {
        auto504F984F_var = PlayerGroupNextPlayer(auto504F984F_g, auto504F984F_var);
        if (auto504F984F_var < 0) { break; }
        if ((gv_colorTagAlwaysShow[auto504F984F_var] == true)) {
            TextTagShow(TextTagLastCreated(), PlayerGroupSingle(auto504F984F_var), true);
        }

    }
}

void gf_DeadDoor (unit lp_unit, fixed lp_timebreak) {
    // Automatic Variable Declarations
    // Implementation
    while (!((UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent) == UnitGetPropertyFixed(lp_unit, c_unitPropLifeMax, c_unitPropNormal)))) {
        Wait(lp_timebreak, c_timeGame);
    }
    if ((UnitGetType(lp_unit) == "Gate")) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "DestructibleGateStraightHorizontalLowered", c_unitCreateIgnorePlacement, 0, UnitGetPosition(lp_unit));
        UnitRemove(lp_unit);
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "DestructibleGateStraightVerticalLowered", c_unitCreateIgnorePlacement, 0, UnitGetPosition(lp_unit));
        UnitRemove(lp_unit);
    }
}

void gf_ToggleAcidPool (bool lp_toggle) {
    // Automatic Variable Declarations
    // Implementation
    ActorSend(ActorFromDoodad(gv_acidPoolFlames), libNtve_gf_SetVisibility(lp_toggle));
    gv_acidPoolFlamesOn = lp_toggle;
    if ((gv_acidPoolFlamesOn == false)) {
        ActorSend(ActorFromDoodad(gv_acidPoolFlames), libNtve_gf_SetScale(0.5, 0.5, 0.5, 1.0));
    }
    else {
        ActorSend(ActorFromDoodad(gv_acidPoolFlames), libNtve_gf_SetScale(5.0, 5.0, 5.0, 1.0));
    }
}

void gf_ShowHideAcidPoolToggle (bool lp_showHide, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_showHide == true)) {
        DialogDestroy(DataTableGetDialog(true, "AcidPoolToggle"));
        DialogCreate(75, 75, c_anchorCenter, 0, 0, true);
        DataTableSetDialog(true, "AcidPoolToggle", DialogLastCreated());
        DialogSetImageVisible(DialogLastCreated(), false);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 75, 75, c_anchorCenter, 0, 0, StringToText(""), StringToText(""), "Assets\\Textures\\sm_props_flame03_diff.dds");
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\sm_props_flame03_diff.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
        libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), false, PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), gv_acidPoolFlamesOn, PlayerGroupAll());
        DialogSetPositionRelativeToUnit(DialogLastCreated(), gv_unit[lp_player], "Ref_Head", -37, -100);
        DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(lp_player), true);
    }
    else {
        if ((DialogIsVisible(DataTableGetDialog(true, "AcidPoolToggle"), lp_player) == true)) {
            DialogDestroy(DataTableGetDialog(true, "AcidPoolToggle"));
        }

    }
}

void gf_UpdateTheThingLifeRegeneration () {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGetType(gv_unit[PlayerGroupPlayer(gv_things, 1)]) != "Marine2")) {
        UnitSetPropertyFixed(gv_unit[PlayerGroupPlayer(gv_things, 1)], c_unitPropLifeRegen, (UnitGetPropertyFixed(gv_unit[PlayerGroupPlayer(gv_things, 1)], c_unitPropLifeRegen, c_unitPropNormal) * ((IntToFixed(PlayerGroupCount(gv_playing)) - IntToFixed(PlayerGroupCount(gv_dead))) / IntToFixed(PlayerGroupCount(gv_playing)))));
    }

}

void gf_ChangeThingsModel (string lp_modelID, unit lp_thingUnit) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SendActorMessageToUnit(lp_thingUnit, libNtve_gf_ModelSwap(gf_GetThingModelPath(lp_modelID), 0));
    libNtve_gf_SendActorMessageToUnit(lp_thingUnit, libNtve_gf_SetScale(gf_GetThingModelScale(lp_modelID), gf_GetThingModelScale(lp_modelID), gf_GetThingModelScale(lp_modelID), 0.0));
}

string gf_GetThingModelPath (string lp_modelID) {
    // Automatic Variable Declarations
    string auto3DD7CD58_val;

    // Implementation
    auto3DD7CD58_val = lp_modelID;
    if (auto3DD7CD58_val == "Aberration") {
        return "InfestedAbomination";
    }
    else if (auto3DD7CD58_val == "Brutalisk") {
        return "Brutalisk";
    }
    else if (auto3DD7CD58_val == "Lurker") {
        return "Lurker";
    }
    else if (auto3DD7CD58_val == "Queen") {
        return "Queen";
    }
    else if (auto3DD7CD58_val == "Roach") {
        return "Roach";
    }
    else if (auto3DD7CD58_val == "Ultralisk") {
        return "Ultralisk";
    }
    else if (auto3DD7CD58_val == "Hydralisk") {
        return "Hydralisk";
    }
    else {
        return "InfestedAbomination";
    }
}

string gf_GetThingModelID (int lp_index) {
    // Automatic Variable Declarations
    int autoF74ABAA3_val;

    // Implementation
    autoF74ABAA3_val = lp_index;
    if (autoF74ABAA3_val == 1) {
        return "Aberration";
    }
    else if (autoF74ABAA3_val == 2) {
        return "Brutalisk";
    }
    else if (autoF74ABAA3_val == 3) {
        return "Lurker";
    }
    else if (autoF74ABAA3_val == 4) {
        return "Queen";
    }
    else if (autoF74ABAA3_val == 5) {
        return "Roach";
    }
    else if (autoF74ABAA3_val == 6) {
        return "Ultralisk";
    }
    else if (autoF74ABAA3_val == 7) {
        return "Hydralisk";
    }
    else {
        return "Aberration";
    }
}

fixed gf_GetThingModelScale (string lp_modelID) {
    // Automatic Variable Declarations
    string autoD6C52DBA_val;

    // Implementation
    autoD6C52DBA_val = lp_modelID;
    if (autoD6C52DBA_val == "Brutalisk") {
        return 0.5;
    }
    else if (autoD6C52DBA_val == "Roach") {
        return 1.6;
    }
    else if (autoD6C52DBA_val == "Ultralisk") {
        return 0.7;
    }
    else if (autoD6C52DBA_val == "Hydralisk") {
        return 1.25;
    }
    else {
        return 1.0;
    }
}

void gf_GenerateThingModelPickerBETA (int lp_player) {
    // Automatic Variable Declarations
    const int auto1FD34E89_ae = 7;
    int auto1FD34E89_var;

    // Implementation
    DialogCreate(300, 50, c_anchorBottom, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePulldown);
    gv_thingModelPicker = DialogControlLastCreated();
    auto1FD34E89_var = 1;
    for ( ; auto1FD34E89_var <= auto1FD34E89_ae; auto1FD34E89_var += 1 ) {
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringToText(gf_GetThingModelID(auto1FD34E89_var)));
    }
    DialogControlSelectItem(DialogControlLastCreated(), PlayerGroupAll(), 1);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(lp_player), true);
}

void gf_UpdateAbilityButtonColors () {
    // Variable Declarations
    int lv_pickedplayer;

    // Automatic Variable Declarations
    playergroup auto11AFD30D_g;
    int auto843D9E8C_val;

    // Variable Initialization

    // Implementation
    auto11AFD30D_g = PlayerGroupAll();
    lv_pickedplayer = -1;
    while (true) {
        lv_pickedplayer = PlayerGroupNextPlayer(auto11AFD30D_g, lv_pickedplayer);
        if (lv_pickedplayer < 0) { break; }
        auto843D9E8C_val = gv_thePlayerColor[lv_pickedplayer];
        if (auto843D9E8C_val == 1) {
            gv_playerButtonThingtoMarine[lv_pickedplayer] = "Blue";
            gv_playerAbilityThingtoMarine[lv_pickedplayer] = "QueenBuild2";
        }
        else if (auto843D9E8C_val == 2) {
            gv_playerButtonThingtoMarine[lv_pickedplayer] = "Green";
            gv_playerAbilityThingtoMarine[lv_pickedplayer] = "QueenBuild22";
        }
        else if (auto843D9E8C_val == 3) {
            gv_playerButtonThingtoMarine[lv_pickedplayer] = "Red";
            gv_playerAbilityThingtoMarine[lv_pickedplayer] = "QueenBuild2211";
        }
        else if (auto843D9E8C_val == 4) {
            gv_playerButtonThingtoMarine[lv_pickedplayer] = "LightBlue";
            gv_playerAbilityThingtoMarine[lv_pickedplayer] = "QueenBuild222";
        }
        else if (auto843D9E8C_val == 5) {
            gv_playerButtonThingtoMarine[lv_pickedplayer] = "LightGreen";
            gv_playerAbilityThingtoMarine[lv_pickedplayer] = "QueenBuild2212";
        }
        else if (auto843D9E8C_val == 6) {
            gv_playerButtonThingtoMarine[lv_pickedplayer] = "LightRed";
            gv_playerAbilityThingtoMarine[lv_pickedplayer] = "QueenBuild2213";
        }
        else if (auto843D9E8C_val == 7) {
            gv_playerButtonThingtoMarine[lv_pickedplayer] = "DarkBlue";
            gv_playerAbilityThingtoMarine[lv_pickedplayer] = "QueenBuild2214";
        }
        else if (auto843D9E8C_val == 8) {
            gv_playerButtonThingtoMarine[lv_pickedplayer] = "DarkGreen";
            gv_playerAbilityThingtoMarine[lv_pickedplayer] = "QueenBuild223";
        }
        else if (auto843D9E8C_val == 9) {
            gv_playerButtonThingtoMarine[lv_pickedplayer] = "DarkRed";
            gv_playerAbilityThingtoMarine[lv_pickedplayer] = "QueenBuild224";
        }
        else if (auto843D9E8C_val == 10) {
            gv_playerButtonThingtoMarine[lv_pickedplayer] = "Yellow";
            gv_playerAbilityThingtoMarine[lv_pickedplayer] = "QueenBuild225";
        }
        else if (auto843D9E8C_val == 11) {
            gv_playerButtonThingtoMarine[lv_pickedplayer] = "LightYellow";
            gv_playerAbilityThingtoMarine[lv_pickedplayer] = "QueenBuild226";
        }
        else if (auto843D9E8C_val == 12) {
            gv_playerButtonThingtoMarine[lv_pickedplayer] = "DarkYellow";
            gv_playerAbilityThingtoMarine[lv_pickedplayer] = "QueenBuild227";
        }
        else if (auto843D9E8C_val == 13) {
            gv_playerButtonThingtoMarine[lv_pickedplayer] = "Purple";
            gv_playerAbilityThingtoMarine[lv_pickedplayer] = "QueenBuild228";
        }
        else if (auto843D9E8C_val == 14) {
            gv_playerButtonThingtoMarine[lv_pickedplayer] = "Gray";
            gv_playerAbilityThingtoMarine[lv_pickedplayer] = "QueenBuild229";
        }
        else if (auto843D9E8C_val == 15) {
            gv_playerButtonThingtoMarine[lv_pickedplayer] = "Black";
            gv_playerAbilityThingtoMarine[lv_pickedplayer] = "QueenBuild2210";
        }
        else {
        }
    }
}

trigger auto_gf_LastStandFrenzy_Trigger = null;
int auto_gf_LastStandFrenzy_lp_thingPlayer;

void gf_LastStandFrenzy (int lp_thingPlayer) {
    auto_gf_LastStandFrenzy_lp_thingPlayer = lp_thingPlayer;

    if (auto_gf_LastStandFrenzy_Trigger == null) {
        auto_gf_LastStandFrenzy_Trigger = TriggerCreate("auto_gf_LastStandFrenzy_TriggerFunc");
    }

    TriggerExecute(auto_gf_LastStandFrenzy_Trigger, false, false);
}

bool auto_gf_LastStandFrenzy_TriggerFunc (bool testConds, bool runActions) {
    int lp_thingPlayer = auto_gf_LastStandFrenzy_lp_thingPlayer;

    // Variable Declarations
    int lv_pickedplayer;

    // Automatic Variable Declarations
    playergroup auto34C67935_g;

    // Variable Initialization

    // Implementation
    while (true) {
        auto34C67935_g = gv_marines;
        lv_pickedplayer = -1;
        while (true) {
            lv_pickedplayer = PlayerGroupNextPlayer(auto34C67935_g, lv_pickedplayer);
            if (lv_pickedplayer < 0) { break; }
            if ((DistanceBetweenPoints(UnitGetPosition(gv_unit[lv_pickedplayer]), UnitGetPosition(gv_unit[lp_thingPlayer])) < 16.0)) {
                TechTreeBehaviorAllow(lp_thingPlayer, "Frenzy2", false);
                break;
            }
            else {
                TechTreeBehaviorAllow(lp_thingPlayer, "Frenzy2", true);
            }
        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

void gf_SpawnItems () {
    // Variable Declarations
    point lv_point;

    // Automatic Variable Declarations
    const int auto27FE2953_ae = 8;
    int auto27FE2953_var;
    const int auto04B0C340_ae = 10;
    int auto04B0C340_var;
    const int autoCF7A7C1F_ae = 8;
    int autoCF7A7C1F_var;
    const int auto470DC42D_ae = 10;
    int auto470DC42D_var;
    const int auto8892C42F_ae = 3;
    int auto8892C42F_var;

    // Variable Initialization

    // Implementation
    auto27FE2953_var = 1;
    for ( ; auto27FE2953_var <= auto27FE2953_ae; auto27FE2953_var += 1 ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Medkit", c_unitCreateIgnorePlacement, 0, gf_FindProperRandomPointforSpawninRegion(gv_selectedRegion));
        UnitAddChargeUsed(UnitLastCreated(), "ItemMedkit/Revive", 1.0);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Medkit", c_unitCreateIgnorePlacement, 0, gf_FindProperRandomPointforSpawninRegion(RegionFromId(5)));
    UnitAddChargeUsed(UnitLastCreated(), "ItemMedkit/Revive", 1.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Medkit", c_unitCreateIgnorePlacement, 0, gf_FindProperRandomPointforSpawninRegion(RegionFromId(5)));
    UnitAddChargeUsed(UnitLastCreated(), "ItemMedkit/Revive", 1.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Wrench", c_unitCreateIgnorePlacement, 0, gf_FindProperRandomPointforSpawninRegion(gv_selectedRegion));
    libNtve_gf_AttachModelToUnit(UnitLastCreated(), "EMPTowerDebuff", "Ref_Origin");
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Wrench", c_unitCreateIgnorePlacement, 0, gf_FindProperRandomPointforSpawninRegion(gv_selectedRegion));
    libNtve_gf_AttachModelToUnit(UnitLastCreated(), "EMPTowerDebuff", "Ref_Origin");
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Wrench", c_unitCreateIgnorePlacement, 0, gf_FindProperRandomPointforSpawninRegion(gv_selectedRegion));
    libNtve_gf_AttachModelToUnit(UnitLastCreated(), "EMPTowerDebuff", "Ref_Origin");
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Flamethrower", c_unitCreateIgnorePlacement, 0, gf_FindProperRandomPointforSpawninRegion(gv_selectedRegion));
    gv_flamethrower = UnitLastCreated();
    auto04B0C340_var = 1;
    for ( ; auto04B0C340_var <= auto04B0C340_ae; auto04B0C340_var += 1 ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Molotov", c_unitCreateIgnorePlacement, 0, gf_FindProperRandomPointforSpawninRegion(gv_selectedRegion));
    }
    autoCF7A7C1F_var = 1;
    for ( ; autoCF7A7C1F_var <= autoCF7A7C1F_ae; autoCF7A7C1F_var += 1 ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Grenade", c_unitCreateIgnorePlacement, 0, gf_FindProperRandomPointforSpawninRegion(gv_selectedRegion));
    }
    auto470DC42D_var = 9;
    for ( ; auto470DC42D_var <= auto470DC42D_ae; auto470DC42D_var += 1 ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Grenade", c_unitCreateIgnorePlacement, 0, gf_FindProperRandomPointforSpawninRegion(RegionFromId(5)));
    }
    auto8892C42F_var = 1;
    for ( ; auto8892C42F_var <= auto8892C42F_ae; auto8892C42F_var += 1 ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Radio", c_unitCreateIgnorePlacement, 0, gf_FindProperRandomPointforSpawninRegion(gv_selectedRegion));
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfraredGoggles", c_unitCreateIgnorePlacement, 0, gf_FindProperRandomPointforSpawninRegion(gv_selectedRegion));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RiotShield", c_unitCreateIgnorePlacement, 0, gf_FindProperRandomPointforSpawninRegion(gv_selectedRegion));
}

point gf_FindProperRandomPointforSpawninRegion (region lp_region) {
    // Variable Declarations
    point lv_point;
    int lv_limit;

    // Automatic Variable Declarations
    const int auto97ADE973_ae = 5;
    const int auto97ADE973_ai = 1;

    // Variable Initialization
    lv_point = RegionRandomPoint(lp_region);

    // Implementation
    lv_limit = 1;
    for ( ; ( (auto97ADE973_ai >= 0 && lv_limit <= auto97ADE973_ae) || (auto97ADE973_ai < 0 && lv_limit >= auto97ADE973_ae) ) ; lv_limit += auto97ADE973_ai ) {
        if (((PointPathingPassable(lv_point) == false) || (CliffLevel(lv_point) != 1) || (PathingType(lv_point) != c_pathingGround) || (CrossCliff(lv_point, PointWithOffset(lv_point, 0.0, -1.5)) == true))) {
            lv_point = RegionRandomPoint(lp_region);
        }
        else {
            break;
        }
    }
    return lv_point;
}

bool gf_UnitCarriesItemType (unit lp_carryingUnit, string lp_itemType) {
    // Automatic Variable Declarations
    // Implementation
    return (UnitGroupCount(UnitGroupFilter(lp_itemType, c_playerAny, UnitInventoryGroup(lp_carryingUnit), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) > 0);
}

unit gf_GetRandomItemofItemTypeinUnit (unit lp_carryingUnit, string lp_itemType) {
    // Automatic Variable Declarations
    // Implementation
    return UnitGroupRandomUnit(UnitGroupFilter(lp_itemType, c_playerAny, UnitInventoryGroup(lp_carryingUnit), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive);
}

trigger auto_gf_MolotovThrow_Trigger = null;
unit auto_gf_MolotovThrow_lp_thrower;
unit auto_gf_MolotovThrow_lp_projectile;
point auto_gf_MolotovThrow_lp_point;
int auto_gf_MolotovThrow_lp_player;

void gf_MolotovThrow (unit lp_thrower, unit lp_projectile, point lp_point, int lp_player) {
    auto_gf_MolotovThrow_lp_thrower = lp_thrower;
    auto_gf_MolotovThrow_lp_projectile = lp_projectile;
    auto_gf_MolotovThrow_lp_point = lp_point;
    auto_gf_MolotovThrow_lp_player = lp_player;

    if (auto_gf_MolotovThrow_Trigger == null) {
        auto_gf_MolotovThrow_Trigger = TriggerCreate("auto_gf_MolotovThrow_TriggerFunc");
    }

    TriggerExecute(auto_gf_MolotovThrow_Trigger, false, false);
}

bool auto_gf_MolotovThrow_TriggerFunc (bool testConds, bool runActions) {
    unit lp_thrower = auto_gf_MolotovThrow_lp_thrower;
    unit lp_projectile = auto_gf_MolotovThrow_lp_projectile;
    point lp_point = auto_gf_MolotovThrow_lp_point;
    int lp_player = auto_gf_MolotovThrow_lp_player;

    // Variable Declarations
    point lv_origin;
    fixed lv_maxheight;
    fixed lv_currentheight;
    fixed lv_totaldistance;
    fixed lv_currentdistance;
    fixed lv_refreshrate;
    fixed lv_moverate;
    point lv_endpoint;
    fixed lv_rEALcurrentdistance;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_origin = UnitGetPosition(lp_thrower);
    lv_maxheight = 3.0;
    lv_totaldistance = DistanceBetweenPoints(lv_origin, lp_point);
    lv_refreshrate = 0.005;
    lv_moverate = 0.35;

    // Implementation
    libNtve_gf_PauseUnit(lp_projectile, true);
    lv_rEALcurrentdistance = DistanceBetweenPoints(lv_origin, lp_point);
    lv_currentdistance = DistanceBetweenPoints(lv_origin, UnitGetPosition(lp_projectile));
    lv_currentheight = 0.0;
    if ((lv_rEALcurrentdistance > 0.5)) {
        while ((lv_currentheight < 0.1) && (PointPathingPassable(PointWithOffsetPolar(UnitGetPosition(lp_projectile), lv_moverate, AngleBetweenPoints(UnitGetPosition(lp_thrower), lp_point))) == true)) {
            Wait(lv_refreshrate, c_timeGame);
            UnitSetPosition(lp_projectile, PointWithOffsetPolar(UnitGetPosition(lp_projectile), lv_moverate, AngleBetweenPoints(lv_origin, lp_point)), false);
            lv_currentdistance = DistanceBetweenPoints(lv_origin, UnitGetPosition(lp_projectile));
            lv_currentheight = (((-1.0 * Pow((lv_currentdistance - (lv_totaldistance / 2.0)), 2.0)) + Pow((lv_totaldistance / 2.0), 2.0)) / (Pow((lv_totaldistance / 2.0), 2.0) / lv_maxheight));
            UnitSetHeight(lp_projectile, lv_currentheight, 0.0);
        }
        while ((lv_currentheight > 0.1) && (PointPathingPassable(PointWithOffsetPolar(UnitGetPosition(lp_projectile), lv_moverate, AngleBetweenPoints(UnitGetPosition(lp_thrower), lp_point))) == true)) {
            Wait(lv_refreshrate, c_timeGame);
            UnitSetPosition(lp_projectile, PointWithOffsetPolar(UnitGetPosition(lp_projectile), lv_moverate, AngleBetweenPoints(lv_origin, lp_point)), false);
            lv_currentdistance = DistanceBetweenPoints(lv_origin, UnitGetPosition(lp_projectile));
            lv_currentheight = (((-1.0 * Pow((lv_currentdistance - (lv_totaldistance / 2.0)), 2.0)) + Pow((lv_totaldistance / 2.0), 2.0)) / (Pow((lv_totaldistance / 2.0), 2.0) / lv_maxheight));
            UnitSetHeight(lp_projectile, lv_currentheight, 0.0);
        }
    }

    UnitSetHeight(lp_projectile, 0.0, 0.0);
    libNtve_gf_PauseUnit(lp_projectile, false);
    lv_endpoint = UnitGetPosition(lp_projectile);
    UnitRemove(lp_projectile);
    SoundPlayAtPoint(SoundLink("CivilianAttackImpact", -1), PlayerGroupAll(), lv_endpoint, 0.0, 100.0, 0.0);
    gf_MolotovExplosion(lv_endpoint, lp_player);
    return true;
}

void gf_MolotovExplosion (point lp_point, int lp_player) {
    // Variable Declarations
    point lv_point;
    fixed lv_distances;
    int lv_amount;
    actor[23] lv_model;
    int lv_pickedint;
    sound lv_sound;

    // Automatic Variable Declarations
    int auto87EBEF34_ae;
    const int auto87EBEF34_ai = 1;
    int auto3AE5647B_ae;
    const int auto3AE5647B_ai = 1;
    int auto471E64C6_ae;
    const int auto471E64C6_ai = 1;

    // Variable Initialization
    lv_point = lp_point;
    lv_amount = RandomInt(15, 22);

    // Implementation
    auto87EBEF34_ae = lv_amount;
    lv_pickedint = 1;
    for ( ; ( (auto87EBEF34_ai >= 0 && lv_pickedint <= auto87EBEF34_ae) || (auto87EBEF34_ai < 0 && lv_pickedint >= auto87EBEF34_ae) ) ; lv_pickedint += auto87EBEF34_ai ) {
        lv_distances += RandomFixed(0.0, 0.25);
        libNtve_gf_CreateModelAtPoint("FireMedium", PointWithOffsetPolar(lv_point, lv_distances, libNtve_gf_RandomAngle()));
        lv_model[lv_pickedint] = libNtve_gf_ActorLastCreated();
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetOpacity(0.0, 0));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(RandomFixed(0.6, 0.9), RandomFixed(0.6, 0.9), RandomFixed(0.6, 0.9), 0.0));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetOpacity(1.0, (lv_distances * 25.0)));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(RandomFixed(1.0, 1.5), RandomFixed(1.0, 1.5), RandomFixed(1.0, 1.5), (lv_distances * 10.0)));
    }
    Wait(0.25, c_timeGame);
    SoundPlayAtPoint(SoundLink("Terran_FireMedium", -1), PlayerGroupAll(), lv_point, 0.0, 100.0, 0.0);
    lv_sound = SoundLastPlayed();
    gf_MolotovDamageAoEPersistance(lv_point, lv_distances, 60, lp_player);
    Wait(59.0, c_timeGame);
    SoundStop(lv_sound, true);
    auto3AE5647B_ae = lv_amount;
    lv_pickedint = 1;
    for ( ; ( (auto3AE5647B_ai >= 0 && lv_pickedint <= auto3AE5647B_ae) || (auto3AE5647B_ai < 0 && lv_pickedint >= auto3AE5647B_ae) ) ; lv_pickedint += auto3AE5647B_ai ) {
        ActorSend(lv_model[lv_pickedint], libNtve_gf_SetScale(RandomFixed(0.3, 0.5), RandomFixed(0.3, 0.5), RandomFixed(0.3, 0.5), 3.0));
        ActorSend(lv_model[lv_pickedint], libNtve_gf_SetOpacity(0.0, 3.0));
    }
    Wait(3.0, c_timeGame);
    auto471E64C6_ae = lv_amount;
    lv_pickedint = 1;
    for ( ; ( (auto471E64C6_ai >= 0 && lv_pickedint <= auto471E64C6_ae) || (auto471E64C6_ai < 0 && lv_pickedint >= auto471E64C6_ae) ) ; lv_pickedint += auto471E64C6_ai ) {
        ActorSend(lv_model[lv_pickedint], "Destroy");
    }
}

trigger auto_gf_MolotovDamageAoEPersistance_Trigger = null;
point auto_gf_MolotovDamageAoEPersistance_lp_point;
fixed auto_gf_MolotovDamageAoEPersistance_lp_distance;
int auto_gf_MolotovDamageAoEPersistance_lp_duration;
int auto_gf_MolotovDamageAoEPersistance_lp_player;

void gf_MolotovDamageAoEPersistance (point lp_point, fixed lp_distance, int lp_duration, int lp_player) {
    auto_gf_MolotovDamageAoEPersistance_lp_point = lp_point;
    auto_gf_MolotovDamageAoEPersistance_lp_distance = lp_distance;
    auto_gf_MolotovDamageAoEPersistance_lp_duration = lp_duration;
    auto_gf_MolotovDamageAoEPersistance_lp_player = lp_player;

    if (auto_gf_MolotovDamageAoEPersistance_Trigger == null) {
        auto_gf_MolotovDamageAoEPersistance_Trigger = TriggerCreate("auto_gf_MolotovDamageAoEPersistance_TriggerFunc");
    }

    TriggerExecute(auto_gf_MolotovDamageAoEPersistance_Trigger, false, false);
}

bool auto_gf_MolotovDamageAoEPersistance_TriggerFunc (bool testConds, bool runActions) {
    point lp_point = auto_gf_MolotovDamageAoEPersistance_lp_point;
    fixed lp_distance = auto_gf_MolotovDamageAoEPersistance_lp_distance;
    int lp_duration = auto_gf_MolotovDamageAoEPersistance_lp_duration;
    int lp_player = auto_gf_MolotovDamageAoEPersistance_lp_player;

    // Variable Declarations
    unit lv_pickedunit;
    int lv_pickedint;

    // Automatic Variable Declarations
    int autoF9EAE45B_ae;
    const int autoF9EAE45B_ai = 1;
    unitgroup auto32EA17FE_g;
    int auto32EA17FE_u;

    // Variable Initialization

    // Implementation
    autoF9EAE45B_ae = (lp_duration * 2);
    lv_pickedint = 1;
    for ( ; ( (autoF9EAE45B_ai >= 0 && lv_pickedint <= autoF9EAE45B_ae) || (autoF9EAE45B_ai < 0 && lv_pickedint >= autoF9EAE45B_ae) ) ; lv_pickedint += autoF9EAE45B_ai ) {
        auto32EA17FE_g = UnitGroup(null, c_playerAny, RegionCircle(lp_point, lp_distance), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto32EA17FE_u = UnitGroupCount(auto32EA17FE_g, c_unitCountAll);
        for (;; auto32EA17FE_u -= 1) {
            lv_pickedunit = UnitGroupUnitFromEnd(auto32EA17FE_g, auto32EA17FE_u);
            if (lv_pickedunit == null) { break; }
            PlayerCreateEffectUnit(lp_player, "MolotovDamage", lv_pickedunit);
            PlayerCreateEffectUnit(lp_player, "MolotovEffect", lv_pickedunit);
            if (((UnitGetType(lv_pickedunit) == "InfestedAbomination") || (UnitGetType(lv_pickedunit) == "InfestedAbominationBurrowed"))) {
                UnitSetPropertyFixed(lv_pickedunit, c_unitPropEnergyPercent, MaxF((UnitGetPropertyFixed(lv_pickedunit, c_unitPropEnergyPercent, c_unitPropCurrent) - 5.0), 0.0));
            }

        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

bool gf_FlyGrenadev2 (unit lp_c, point lp_p, string lp_a) {
    // Variable Declarations
    unit lv_leapingUnit;
    string lv_leapAnimation;
    point lv_targetPoint;
    fixed lv_startingDistance;
    fixed lv_startingHeight;
    fixed lv_lEAP_SPEED;
    fixed lv_lEAP_HEIGHT;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_leapingUnit = lp_c;
    lv_leapAnimation = lp_a;
    lv_targetPoint = lp_p;
    lv_lEAP_SPEED = 6.5;
    lv_lEAP_HEIGHT = 0.5;

    // Implementation
    lv_startingDistance = DistanceBetweenPoints(UnitGetPosition(lv_leapingUnit), lv_targetPoint);
    lv_startingHeight = WorldHeight(c_heightMapGround, UnitGetPosition(lp_c));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_leapingUnit), c_animNameDefault, lv_leapAnimation, c_animFlagNonLooping, c_animTimeDefault);
    libNtve_gf_MakeUnitFacePoint(lv_leapingUnit, lv_targetPoint, 0.0);
    Wait(0.25, c_timeReal);
    libNtve_gf_PauseUnit(lv_leapingUnit, true);
    while ((DistanceBetweenPoints(UnitGetPosition(lv_leapingUnit), lv_targetPoint) >= 0.2) && (PointPathingPassable(PointWithOffsetPolar(UnitGetPosition(lv_leapingUnit), 1.0, AngleBetweenPoints(UnitGetPosition(lv_leapingUnit), lv_targetPoint))) == true)) {
        if ((DistanceBetweenPoints(UnitGetPosition(lv_leapingUnit), lv_targetPoint) >= (lv_startingDistance / 2.0))) {
            UnitSetHeight(lv_leapingUnit, (UnitGetHeight(lv_leapingUnit) + lv_lEAP_HEIGHT), 0.0);
        }
        else {
            UnitSetHeight(lv_leapingUnit, (UnitGetHeight(lv_leapingUnit) - lv_lEAP_HEIGHT), 0.0);
        }
        UnitSetPosition(lv_leapingUnit, libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_leapingUnit), (DistanceBetweenPoints(UnitGetPosition(lv_leapingUnit), lv_targetPoint) / lv_lEAP_SPEED), lv_targetPoint), false);
        Wait(0.001, c_timeReal);
    }
    UnitSetHeight(lv_leapingUnit, 0.0, 0.0);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(lv_leapingUnit), c_animNameDefault);
    libNtve_gf_PauseUnit(lv_leapingUnit, false);
    return true;
}

unit gf_FindFirstGrenadev2 (unit lp_carrier) {
    // Variable Declarations
    int lv_itemcount;
    int lv_itemslot;
    unit lv_item;

    // Automatic Variable Declarations
    int auto34703617_ae;
    const int auto34703617_ai = 1;

    // Variable Initialization
    lv_itemcount = UnitInventoryCount(lp_carrier, c_unitInventoryCountCarried);

    // Implementation
    auto34703617_ae = lv_itemcount;
    lv_itemslot = 1;
    for ( ; ( (auto34703617_ai >= 0 && lv_itemslot <= auto34703617_ae) || (auto34703617_ai < 0 && lv_itemslot >= auto34703617_ae) ) ; lv_itemslot += auto34703617_ai ) {
        if ((UnitGetType(UnitInventoryItem(lp_carrier, lv_itemslot)) == "Grenade")) {
            lv_item = UnitInventoryItem(lp_carrier, lv_itemslot);
            break;
        }

    }
    return lv_item;
}

void gf_BloodfromGrenadev2 (point lp_grenadeOrigin, unit lp_unit) {
    // Variable Declarations
    fixed lv_angle;
    fixed lv_rand;
    fixed lv_magnitude;

    // Automatic Variable Declarations
    int autoE9BD2D9F_ae;
    int autoE9BD2D9F_var;

    // Variable Initialization
    lv_angle = AngleBetweenPoints(lp_grenadeOrigin, UnitGetPosition(lp_unit));
    lv_magnitude = (1.0 - (DistanceBetweenPoints(lp_grenadeOrigin, UnitGetPosition(lp_unit)) * 0.25));

    // Implementation
    autoE9BD2D9F_ae = RandomInt(6, 15);
    autoE9BD2D9F_var = 1;
    for ( ; autoE9BD2D9F_var <= autoE9BD2D9F_ae; autoE9BD2D9F_var += 1 ) {
        lv_rand = RandomFixed((-70.0 * MaxF(lv_magnitude, 0.25)), (70.0 * MaxF(lv_magnitude, 0.25)));
        libNtve_gf_CreateModelAtPoint("BloodSplats", PointWithOffsetPolar(UnitGetPosition(lp_unit), RandomFixed(0.5, (3.5 * MaxF(lv_magnitude, 0.5))), (lv_angle + lv_rand)));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScaleAbsolute(RandomFixed(0.5, (2.5 * MaxF(lv_magnitude, 0.4))), RandomFixed(0.25, 0.5), 1.0, 0.0));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetFacing((lv_angle + lv_rand)));
    }
}

void gf_TalkRadio (unit lp_radio, unit lp_unit, string lp_chatString) {
    // Variable Declarations
    string lv_radiostring;
    fixed lv_chatcode;

    // Automatic Variable Declarations
    unitgroup autoC7FE1A85_g;
    int autoC7FE1A85_u;
    unit autoC7FE1A85_var;

    // Variable Initialization
    lv_radiostring = "";
    lv_chatcode = RandomFixed(-524287.0, 524287.0);

    // Implementation
    if ((StringLength(lp_chatString) < 80)) {
        lv_radiostring = lp_chatString;
    }
    else {
        lv_radiostring = (StringSub(lp_chatString, 1, 80) + "...");
    }
    autoC7FE1A85_g = UnitGroup("Radio", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoC7FE1A85_u = UnitGroupCount(autoC7FE1A85_g, c_unitCountAll);
    for (;; autoC7FE1A85_u -= 1) {
        autoC7FE1A85_var = UnitGroupUnitFromEnd(autoC7FE1A85_g, autoC7FE1A85_u);
        if (autoC7FE1A85_var == null) { break; }
        if ((lp_radio != autoC7FE1A85_var)) {
            TextTagCreate(StringToText(lv_radiostring), 20, UnitGetPosition(UnitInventoryUnit(autoC7FE1A85_var)), 1.0, true, false, PlayerGroupAll());
            TextTagSetText(TextTagLastCreated(), TextWithColor((StringToText(lv_radiostring) + StringExternal("Param/Value/6D8FA47E")), Color(80.39, 80.39, 80.39)));
            TextTagAttachToUnit(TextTagLastCreated(), UnitInventoryUnit(autoC7FE1A85_var), 1.0);
        }

        UnitSetCustomValue(autoC7FE1A85_var, 0, lv_chatcode);
        if ((lp_radio != autoC7FE1A85_var)) {
            gf_ClearRadio(StringLength(lv_radiostring), autoC7FE1A85_var, lv_chatcode, TextTagLastCreated());
        }

    }
}

trigger auto_gf_ClearRadio_Trigger = null;
int auto_gf_ClearRadio_lp_lengthofString;
unit auto_gf_ClearRadio_lp_radio;
fixed auto_gf_ClearRadio_lp_customValue;
int auto_gf_ClearRadio_lp_textTag;

void gf_ClearRadio (int lp_lengthofString, unit lp_radio, fixed lp_customValue, int lp_textTag) {
    auto_gf_ClearRadio_lp_lengthofString = lp_lengthofString;
    auto_gf_ClearRadio_lp_radio = lp_radio;
    auto_gf_ClearRadio_lp_customValue = lp_customValue;
    auto_gf_ClearRadio_lp_textTag = lp_textTag;

    if (auto_gf_ClearRadio_Trigger == null) {
        auto_gf_ClearRadio_Trigger = TriggerCreate("auto_gf_ClearRadio_TriggerFunc");
    }

    TriggerExecute(auto_gf_ClearRadio_Trigger, false, false);
}

bool auto_gf_ClearRadio_TriggerFunc (bool testConds, bool runActions) {
    int lp_lengthofString = auto_gf_ClearRadio_lp_lengthofString;
    unit lp_radio = auto_gf_ClearRadio_lp_radio;
    fixed lp_customValue = auto_gf_ClearRadio_lp_customValue;
    int lp_textTag = auto_gf_ClearRadio_lp_textTag;

    // Automatic Variable Declarations
    fixed auto565A386B_at;

    // Implementation
    auto565A386B_at = 0;
    while (!((UnitGetCustomValue(lp_radio, 0) != lp_customValue)) && auto565A386B_at <= ((IntToFixed(lp_lengthofString) * 0.25) + 3.0)) {
        Wait(0.5, c_timeGame);
        auto565A386B_at = auto565A386B_at + 0.5;
    }
    TextTagDestroy(lp_textTag);
    return true;
}

trigger auto_gf_GenerateStatsModifier_Trigger = null;
int auto_gf_GenerateStatsModifier_lp_modifierPlayer;
int auto_gf_GenerateStatsModifier_lp_modifiedPlayer;

void gf_GenerateStatsModifier (int lp_modifierPlayer, int lp_modifiedPlayer) {
    auto_gf_GenerateStatsModifier_lp_modifierPlayer = lp_modifierPlayer;
    auto_gf_GenerateStatsModifier_lp_modifiedPlayer = lp_modifiedPlayer;

    if (auto_gf_GenerateStatsModifier_Trigger == null) {
        auto_gf_GenerateStatsModifier_Trigger = TriggerCreate("auto_gf_GenerateStatsModifier_TriggerFunc");
    }

    TriggerExecute(auto_gf_GenerateStatsModifier_Trigger, false, false);
}

bool auto_gf_GenerateStatsModifier_TriggerFunc (bool testConds, bool runActions) {
    int lp_modifierPlayer = auto_gf_GenerateStatsModifier_lp_modifierPlayer;
    int lp_modifiedPlayer = auto_gf_GenerateStatsModifier_lp_modifiedPlayer;

    // Variable Declarations
    int lv_statsmodifier;
    int lv_gPitem;
    int lv_gMitem;
    int lv_mPitem;
    int lv_tPitem;
    int lv_gTitem;
    int lv_vPitem;
    int lv_tRPitem;
    int lv_tRIitem;
    int lv_uSitem;
    int lv_yoffset;
    int lv_previousdate;
    string lv_previousmessage;
    int lv_updatecheckitem;
    int lv_dayitem;
    int lv_monthitem;
    int lv_yearitem;
    int lv_messageitem;
    int lv_revisionitem;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_statsmodifier = c_invalidDialogId;
    lv_gPitem = c_invalidDialogControlId;
    lv_gMitem = c_invalidDialogControlId;
    lv_mPitem = c_invalidDialogControlId;
    lv_tPitem = c_invalidDialogControlId;
    lv_gTitem = c_invalidDialogControlId;
    lv_vPitem = c_invalidDialogControlId;
    lv_tRPitem = c_invalidDialogControlId;
    lv_tRIitem = c_invalidDialogControlId;
    lv_uSitem = c_invalidDialogControlId;
    lv_previousmessage = "";
    lv_updatecheckitem = c_invalidDialogControlId;
    lv_dayitem = c_invalidDialogControlId;
    lv_monthitem = c_invalidDialogControlId;
    lv_yearitem = c_invalidDialogControlId;
    lv_messageitem = c_invalidDialogControlId;
    lv_revisionitem = c_invalidDialogControlId;

    // Implementation
    DialogCreate(300, 500, c_anchorCenter, 0, 0, true);
    lv_statsmodifier = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(lp_modifierPlayer), true);
    gf_GenerateWindowTab(DialogLastCreated(), true, true, true, true, 5, 5, c_anchorTopLeft, c_anchorTopRight, (StringExternal("Param/Value/04886269") + TextWithColor(PlayerName(lp_modifiedPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_modifiedPlayer, false)))));
    gf_GenerateWindowUI(DialogLastCreated(), Color(100.00, 100.00, 100.00), Color(9.80, 9.80, 9.80));
    lv_yoffset += 50;
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    lv_gPitem = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 50, lv_yoffset);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 50);
    libNtve_gf_SetDialogItemEditorValue(DialogControlLastCreated(), IntToString(gv_gPGamesPlayed[lp_modifiedPlayer]), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, lv_yoffset, StringExternal("Param/Value/6B04A031"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_yoffset += 50;
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    lv_gMitem = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 50, lv_yoffset);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 50);
    libNtve_gf_SetDialogItemEditorValue(DialogControlLastCreated(), IntToString(gv_gMGamesMinutes[lp_modifiedPlayer]), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, lv_yoffset, StringExternal("Param/Value/B241CDC9"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_yoffset += 50;
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    lv_mPitem = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 50, lv_yoffset);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 50);
    libNtve_gf_SetDialogItemEditorValue(DialogControlLastCreated(), IntToString(gv_mPMarinePoints[lp_modifiedPlayer]), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, lv_yoffset, StringExternal("Param/Value/0264A1F4"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_yoffset += 50;
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    lv_tPitem = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 50, lv_yoffset);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 50);
    libNtve_gf_SetDialogItemEditorValue(DialogControlLastCreated(), IntToString(gv_tPThingPoints[lp_modifiedPlayer]), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, lv_yoffset, StringExternal("Param/Value/4498AFE6"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_yoffset += 50;
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    lv_gTitem = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 50, lv_yoffset);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 50);
    libNtve_gf_SetDialogItemEditorValue(DialogControlLastCreated(), IntToString(gv_gTGamesAsThing[lp_modifiedPlayer]), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, lv_yoffset, StringExternal("Param/Value/77686841"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_yoffset += 50;
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    lv_tRPitem = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 50, lv_yoffset);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 50);
    libNtve_gf_SetDialogItemEditorValue(DialogControlLastCreated(), IntToString(gv_tRPThingRatingPoints[lp_modifiedPlayer]), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, lv_yoffset, StringExternal("Param/Value/D5E723B9"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_yoffset += 50;
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    lv_tRIitem = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 50, lv_yoffset);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 50);
    libNtve_gf_SetDialogItemEditorValue(DialogControlLastCreated(), IntToString(gv_tRIThingRatingInstances[lp_modifiedPlayer]), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 50, c_anchorTopLeft, 50, lv_yoffset, StringExternal("Param/Value/604BFB24"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_yoffset += 50;
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    lv_vPitem = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 50, lv_yoffset);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 50);
    libNtve_gf_SetDialogItemEditorValue(DialogControlLastCreated(), IntToString(gv_vPVicPoints[lp_modifiedPlayer]), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 50, c_anchorTopLeft, 50, lv_yoffset, StringExternal("Param/Value/35D367FD"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_yoffset += 50;
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 50, lv_yoffset, StringExternal("Param/Value/C4D82315"), false);
    lv_updatecheckitem = DialogControlLastCreated();
    while ((libNtve_gf_DialogItemIsChecked(lv_updatecheckitem, lp_modifierPlayer) == false)) {
        Wait(0.5, c_timeReal);
    }
    gv_gPGamesPlayed[lp_modifiedPlayer] = StringToInt(libNtve_gf_DialogItemEditValue(lv_gPitem, lp_modifierPlayer));
    gv_gMGamesMinutes[lp_modifiedPlayer] = StringToInt(libNtve_gf_DialogItemEditValue(lv_gMitem, lp_modifierPlayer));
    gv_mPMarinePoints[lp_modifiedPlayer] = StringToInt(libNtve_gf_DialogItemEditValue(lv_mPitem, lp_modifierPlayer));
    gv_tPThingPoints[lp_modifiedPlayer] = StringToInt(libNtve_gf_DialogItemEditValue(lv_tPitem, lp_modifierPlayer));
    gv_gTGamesAsThing[lp_modifiedPlayer] = StringToInt(libNtve_gf_DialogItemEditValue(lv_gTitem, lp_modifierPlayer));
    gv_tRPThingRatingPoints[lp_modifiedPlayer] = StringToInt(libNtve_gf_DialogItemEditValue(lv_tRPitem, lp_modifierPlayer));
    gv_tRIThingRatingInstances[lp_modifiedPlayer] = StringToInt(libNtve_gf_DialogItemEditValue(lv_tRIitem, lp_modifierPlayer));
    gv_vPVicPoints[lp_modifiedPlayer] = StringToInt(libNtve_gf_DialogItemEditValue(lv_vPitem, lp_modifierPlayer));
    gf_SaveStats(lp_modifiedPlayer);
    DialogDestroy(lv_statsmodifier);
    return true;
}

bool gf_Owner (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if (((PlayerHandle(lp_player) == "1-S2-1-592712") || (PlayerHandle(lp_player) == "1-S2-1-2151326") || (GameIsTestMap(false) == true))) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_Developers (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if (((PlayerHandle(lp_player) == "1-S2-1-4026500") || (PlayerHandle(lp_player) == "1-S2-1-4185991") || (PlayerHandle(lp_player) == "1-S2-1-3322280") || gf_Owner(lp_player))) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_Admins (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((gf_Developers(lp_player))) {
        return true;
    }
    else {
        return false;
    }
}

void gf_GenerateAdmincontrols (int lp_triggeringPlayer, int lp_selectedPlayer, int lp_generateX, int lp_generateY, int lp_anchor) {
    // Variable Declarations
    int lv_dialogWidth;
    int lv_dialogHeight;
    int lv_xMinSeparation;
    int lv_buttonXSize;
    int lv_buttonYSize;
    int lv_buttonInitialYOffset;
    int lv_textInitialYOffset;
    int lv_secondColumnOffset;
    string lv_identifier;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dialogWidth = 220;
    lv_dialogHeight = 380;
    lv_xMinSeparation = 10;
    lv_buttonXSize = 200;
    lv_buttonYSize = 50;
    lv_buttonInitialYOffset = 25;
    lv_textInitialYOffset = 40;
    lv_secondColumnOffset = 250;
    lv_identifier = ("AdminControls" + IntToString(lp_triggeringPlayer));

    // Implementation
    DialogDestroy(DataTableGetDialog(true, lv_identifier));
    DialogCreate(lv_dialogWidth, lv_dialogHeight, lp_anchor, lp_generateX, lp_generateY, true);
    DataTableSetDialog(true, lv_identifier, DialogLastCreated());
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(lp_triggeringPlayer), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_buttonXSize, lv_buttonYSize, c_anchorTopLeft, lv_xMinSeparation, (lv_buttonInitialYOffset + (lv_buttonYSize * 7)), StringToText(""), StringExternal("Param/Value/4DFA16DF"), "");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_SaveDataTableValueDialogItem(true, ("SelectedButton" + IntToString(lp_triggeringPlayer)), DialogControlLastCreated());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), IntToFixed(lp_selectedPlayer), PlayerGroupAll());
    gf_GenerateWindowTab(DialogLastCreated(), true, true, true, true, 5, 5, c_anchorTopLeft, c_anchorTopRight, (StringExternal("Param/Value/5F5D8762") + TextWithColor(IntToText(lp_selectedPlayer), libNtve_gf_ConvertPlayerColorToColor(gv_thePlayerColor[lp_selectedPlayer]))));
    gf_GenerateWindowUI(DialogLastCreated(), Color(100.00, 100.00, 100.00), Color(9.80, 9.80, 9.80));
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_buttonXSize, lv_buttonYSize, c_anchorTopLeft, lv_xMinSeparation, (lv_buttonInitialYOffset + (lv_buttonYSize * 5)), StringToText(""), StringExternal("Param/Value/D5983C43"), "");
    libNtve_gf_SaveDataTableValueDialogItem(true, ("KickButton" + IntToString(lp_triggeringPlayer)), DialogControlLastCreated());
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_buttonXSize, lv_buttonYSize, c_anchorTopLeft, lv_xMinSeparation, (lv_buttonInitialYOffset + (lv_buttonYSize * 4)), StringToText(""), StringExternal("Param/Value/8014B0CF"), "");
    libNtve_gf_SaveDataTableValueDialogItem(true, ("SmiteButton" + IntToString(lp_triggeringPlayer)), DialogControlLastCreated());
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_buttonXSize, lv_buttonYSize, c_anchorTopLeft, lv_xMinSeparation, (lv_buttonInitialYOffset + (lv_buttonYSize * 3)), StringToText(""), StringExternal("Param/Value/0A43B375"), "");
    libNtve_gf_SaveDataTableValueDialogItem(true, ("PauseButton" + IntToString(lp_triggeringPlayer)), DialogControlLastCreated());
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_buttonXSize, lv_buttonYSize, c_anchorTopLeft, lv_xMinSeparation, (lv_buttonInitialYOffset + (lv_buttonYSize * 2)), StringToText(""), StringExternal("Param/Value/D1EB2CD3"), "");
    libNtve_gf_SaveDataTableValueDialogItem(true, ("UnpauseButton" + IntToString(lp_triggeringPlayer)), DialogControlLastCreated());
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_buttonXSize, lv_buttonYSize, c_anchorTopLeft, lv_xMinSeparation, (lv_buttonInitialYOffset + (lv_buttonYSize * 1)), StringToText(""), StringExternal("Param/Value/5B589B29"), "");
    libNtve_gf_SaveDataTableValueDialogItem(true, ("GoToButton" + IntToString(lp_triggeringPlayer)), DialogControlLastCreated());
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_buttonXSize, lv_buttonYSize, c_anchorTopLeft, lv_xMinSeparation, (lv_buttonInitialYOffset + (lv_buttonYSize * 0)), StringToText(""), StringExternal("Param/Value/00EC7F33"), "");
    libNtve_gf_SaveDataTableValueDialogItem(true, ("FollowButton" + IntToString(lp_triggeringPlayer)), DialogControlLastCreated());
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_buttonXSize, lv_buttonYSize, c_anchorTopLeft, lv_xMinSeparation, (lv_buttonInitialYOffset + (lv_buttonYSize * 6)), StringToText(""), StringExternal("Param/Value/0EE0430B"), "");
    libNtve_gf_SaveDataTableValueDialogItem(true, ("MoreButton" + IntToString(lp_triggeringPlayer)), DialogControlLastCreated());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 30.0, PlayerGroupAll());
}

void gf_GenerateButtonSubPanel (int lp_triggeringPlayer, int lp_selectedPlayer, int lp_generateX, int lp_generateY, int lp_anchor, string lp_panelName, string lp_buttonName1, bool lp_buttonShown1, string lp_buttonName2, bool lp_buttonShown2, string lp_buttonName3, bool lp_buttonShown3, string lp_buttonName4, bool lp_buttonShown4, string lp_buttonName5, bool lp_buttonShown5, string lp_buttonName6, bool lp_buttonShown6, string lp_buttonName7, bool lp_buttonShown7) {
    // Variable Declarations
    int lv_dialogWidth;
    int lv_dialogHeight;
    int lv_xMinSeparation;
    int lv_buttonXSize;
    int lv_buttonYSize;
    int lv_buttonInitialYOffset;
    int lv_textInitialYOffset;
    int lv_secondColumnOffset;
    string lv_identifier;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dialogWidth = 220;
    lv_dialogHeight = 400;
    lv_xMinSeparation = 10;
    lv_buttonXSize = 200;
    lv_buttonYSize = 50;
    lv_buttonInitialYOffset = 25;
    lv_textInitialYOffset = 40;
    lv_secondColumnOffset = 250;
    lv_identifier = ("AdminSubButton" + IntToString(lp_triggeringPlayer));

    // Implementation
    DialogDestroy(DataTableGetDialog(true, lv_identifier));
    DialogCreate(lv_dialogWidth, lv_dialogHeight, c_anchorTopLeft, lp_generateX, lp_generateY, true);
    DataTableSetDialog(true, lv_identifier, DialogLastCreated());
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(lp_triggeringPlayer), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_buttonXSize, lv_buttonYSize, c_anchorTopLeft, lv_xMinSeparation, (lv_buttonInitialYOffset + (lv_buttonYSize * 7)), StringToText(""), StringExternal("Param/Value/883082F9"), "");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_SaveDataTableValueDialogItem(true, ("SelectedSubButton" + IntToString(lp_triggeringPlayer)), DialogControlLastCreated());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), IntToFixed(lp_selectedPlayer), PlayerGroupAll());
    gf_GenerateWindowTab(DialogLastCreated(), true, true, true, true, 5, 5, c_anchorTopLeft, c_anchorTopRight, StringToText(lp_panelName));
    gf_GenerateWindowUI(DialogLastCreated(), Color(100.00, 100.00, 100.00), Color(9.80, 9.80, 9.80));
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_buttonXSize, lv_buttonYSize, c_anchorTopLeft, lv_xMinSeparation, (lv_buttonInitialYOffset + (lv_buttonYSize * 0)), StringToText(""), StringToText(lp_buttonName1), "");
    libNtve_gf_SaveDataTableValueDialogItem(true, (lp_buttonName1 + IntToString(lp_triggeringPlayer)), DialogControlLastCreated());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), lp_buttonShown1);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_buttonXSize, lv_buttonYSize, c_anchorTopLeft, lv_xMinSeparation, (lv_buttonInitialYOffset + (lv_buttonYSize * 1)), StringToText(""), StringToText(lp_buttonName2), "");
    libNtve_gf_SaveDataTableValueDialogItem(true, (lp_buttonName2 + IntToString(lp_triggeringPlayer)), DialogControlLastCreated());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), lp_buttonShown2);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_buttonXSize, lv_buttonYSize, c_anchorTopLeft, lv_xMinSeparation, (lv_buttonInitialYOffset + (lv_buttonYSize * 2)), StringToText(""), StringToText(lp_buttonName3), "");
    libNtve_gf_SaveDataTableValueDialogItem(true, (lp_buttonName3 + IntToString(lp_triggeringPlayer)), DialogControlLastCreated());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), lp_buttonShown3);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_buttonXSize, lv_buttonYSize, c_anchorTopLeft, lv_xMinSeparation, (lv_buttonInitialYOffset + (lv_buttonYSize * 3)), StringToText(""), StringToText(lp_buttonName4), "");
    libNtve_gf_SaveDataTableValueDialogItem(true, (lp_buttonName4 + IntToString(lp_triggeringPlayer)), DialogControlLastCreated());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), lp_buttonShown4);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_buttonXSize, lv_buttonYSize, c_anchorTopLeft, lv_xMinSeparation, (lv_buttonInitialYOffset + (lv_buttonYSize * 4)), StringToText(""), StringToText(lp_buttonName5), "");
    libNtve_gf_SaveDataTableValueDialogItem(true, (lp_buttonName5 + IntToString(lp_triggeringPlayer)), DialogControlLastCreated());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), lp_buttonShown5);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_buttonXSize, lv_buttonYSize, c_anchorTopLeft, lv_xMinSeparation, (lv_buttonInitialYOffset + (lv_buttonYSize * 5)), StringToText(""), StringToText(lp_buttonName6), "");
    libNtve_gf_SaveDataTableValueDialogItem(true, (lp_buttonName6 + IntToString(lp_triggeringPlayer)), DialogControlLastCreated());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), lp_buttonShown6);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_buttonXSize, lv_buttonYSize, c_anchorTopLeft, lv_xMinSeparation, (lv_buttonInitialYOffset + (lv_buttonYSize * 6)), StringToText(""), StringToText(lp_buttonName7), "");
    libNtve_gf_SaveDataTableValueDialogItem(true, (lp_buttonName7 + IntToString(lp_triggeringPlayer)), DialogControlLastCreated());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), lp_buttonShown7);
}

void gf_GenerateListSubPanel (int lp_triggeringPlayer, int lp_selectedPlayer, int lp_generateX, int lp_generateY, int lp_anchor, string lp_listname) {
    // Variable Declarations
    int lv_dialogWidth;
    int lv_dialogHeight;
    int lv_xMinSeparation;
    int lv_buttonXSize;
    int lv_buttonYSize;
    int lv_buttonInitialYOffset;
    int lv_textInitialYOffset;
    int lv_secondColumnOffset;
    string lv_identifier;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dialogWidth = 220;
    lv_dialogHeight = 400;
    lv_xMinSeparation = 10;
    lv_buttonXSize = 200;
    lv_buttonYSize = 50;
    lv_buttonInitialYOffset = 25;
    lv_textInitialYOffset = 40;
    lv_secondColumnOffset = 250;
    lv_identifier = ("AdminSubList" + IntToString(lp_triggeringPlayer));

    // Implementation
    DialogDestroy(DataTableGetDialog(true, lv_identifier));
    DialogCreate(lv_dialogWidth, lv_dialogHeight, c_anchorTopLeft, lp_generateX, lp_generateY, true);
    DataTableSetDialog(true, lv_identifier, DialogLastCreated());
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(lp_triggeringPlayer), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_buttonXSize, lv_buttonYSize, c_anchorTopLeft, lv_xMinSeparation, (lv_buttonInitialYOffset + (lv_buttonYSize * 7)), StringToText(""), StringToText(""), "");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_SaveDataTableValueDialogItem(true, ("SelectedSubList" + IntToString(lp_triggeringPlayer)), DialogControlLastCreated());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), IntToFixed(lp_selectedPlayer), PlayerGroupAll());
    gf_GenerateWindowTab(DialogLastCreated(), true, true, true, true, 5, 5, c_anchorTopLeft, c_anchorTopRight, StringToText(lp_listname));
    gf_GenerateWindowUI(DialogLastCreated(), Color(100.00, 100.00, 100.00), Color(9.80, 9.80, 9.80));
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeListBox);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_buttonXSize, (lv_buttonInitialYOffset + (lv_buttonYSize * 6)));
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_xMinSeparation, (lv_buttonInitialYOffset + (lv_buttonYSize * 0)));
    libNtve_gf_SaveDataTableValueDialogItem(true, (lp_listname + IntToString(lp_triggeringPlayer)), DialogControlLastCreated());
}

void gf_AddItemtoListSub (text lp_text, string lp_listName, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlAddItem(libNtve_gf_ValueFromDataTableDialogItem(true, (lp_listName + IntToString(lp_player))), PlayerGroupSingle(lp_player), lp_text);
}

void gf_Heightlist (int lp_player) {
    // Variable Declarations
    fixed lv_x;

    // Automatic Variable Declarations
    const fixed autoFDADF747_ae = 5.1;
    const fixed autoFDADF747_ai = 0.1;

    // Variable Initialization

    // Implementation
    lv_x = 0.0;
    for ( ; ( (autoFDADF747_ai >= 0 && lv_x <= autoFDADF747_ae) || (autoFDADF747_ai < 0 && lv_x >= autoFDADF747_ae) ) ; lv_x += autoFDADF747_ai ) {
        gf_AddItemtoListSub(FixedToText(lv_x, 1), "Height", lp_player);
    }
}

void gf_Scalelist (int lp_player) {
    // Variable Declarations
    fixed lv_x;

    // Automatic Variable Declarations
    const fixed autoCCA74FDF_ae = 5.1;
    const fixed autoCCA74FDF_ai = 0.1;

    // Variable Initialization

    // Implementation
    lv_x = 0.0;
    for ( ; ( (autoCCA74FDF_ai >= 0 && lv_x <= autoCCA74FDF_ae) || (autoCCA74FDF_ai < 0 && lv_x >= autoCCA74FDF_ae) ) ; lv_x += autoCCA74FDF_ai ) {
        gf_AddItemtoListSub(FixedToText(lv_x, 1), "Scale", lp_player);
    }
}

void gf_OxyList (int lp_player) {
    // Variable Declarations
    fixed lv_x;

    // Automatic Variable Declarations
    const fixed autoECA47D64_ae = 1.1;
    const fixed autoECA47D64_ai = 0.1;

    // Variable Initialization

    // Implementation
    lv_x = 0.0;
    for ( ; ( (autoECA47D64_ai >= 0 && lv_x <= autoECA47D64_ae) || (autoECA47D64_ai < 0 && lv_x >= autoECA47D64_ae) ) ; lv_x += autoECA47D64_ai ) {
        gf_AddItemtoListSub(FixedToText(lv_x, 1), "Oxygen", lp_player);
    }
}

void gf_ModelList (int lp_player) {
    // Variable Declarations
    int lv_x;

    // Automatic Variable Declarations
    int autoFA7546D7_ae;
    const int autoFA7546D7_ai = 1;

    // Variable Initialization

    // Implementation
    autoFA7546D7_ae = gv_models.lv_numberofmodels;
    lv_x = 1;
    for ( ; ( (autoFA7546D7_ai >= 0 && lv_x <= autoFA7546D7_ae) || (autoFA7546D7_ai < 0 && lv_x >= autoFA7546D7_ae) ) ; lv_x += autoFA7546D7_ai ) {
        gf_AddItemtoListSub(StringToText(UserDataGetString("Models", UserDataInstance("Models", lv_x), "Name", 1)), "Models", lp_player);
    }
}

void gf_CreateRevealer (int lp_player, int lp_revealedPlayer, bool lp_test) {
    // Automatic Variable Declarations
    // Implementation
    VisRevealerCreate(lp_player, gv_revealregion[lp_revealedPlayer]);
    gv_revealed[lp_player][lp_revealedPlayer] = VisRevealerLastCreated();
    while ((VisRevealerLastCreated() == gv_revealed[lp_player][lp_revealedPlayer])) {
        VisRevealerUpdate(VisRevealerLastCreated());
        if ((lp_test == true)) {
            libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, RegionGetCenter(gv_revealregion[lp_player]));
        }

        Wait(0.1, c_timeGame);
    }
}

void gf_HireDrDebug () {
    // Automatic Variable Declarations
    // Implementation
    gv_debugsize = 10;
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    gv_debugdialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 400, 50, c_anchorTopLeft, 50, 50, StringExternal("Param/Value/85072ECE"), StringExternal("Param/Value/57819BF7"), "");
    gv_debugpane = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 50, 50, c_anchorTopLeft, 0, 50, StringToText(""), StringExternal("Param/Value/CFCCDEAB"), "");
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, gv_debugpane, c_anchorBottom, -225, -50);
    gv_debugsizemodifier[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 50, 50, c_anchorTopLeft, 450, 50, StringToText(""), StringExternal("Param/Value/4D17C104"), "");
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, gv_debugpane, c_anchorBottom, 225, -50);
    gv_debugsizemodifier[1] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeListBox);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 500, (gv_debugsize * 50));
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, gv_debugpane, c_anchorBottom, 0, 0);
    gv_debugwindow = DialogControlLastCreated();
}

void gf_TellDrDebug (string lp_text) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlAddItem(gv_debugwindow, PlayerGroupAll(), StringToText(lp_text));
    gv_package = (gv_package + (StringExternal("Param/Value/8DA78854") + StringToText(lp_text)));
}

void gf_NoAntiTK () {
    // Automatic Variable Declarations
    playergroup autoD983BF2A_g;
    int autoD983BF2A_var;

    // Implementation
    autoD983BF2A_g = PlayerGroupActive();
    autoD983BF2A_var = -1;
    while (true) {
        autoD983BF2A_var = PlayerGroupNextPlayer(autoD983BF2A_g, autoD983BF2A_var);
        if (autoD983BF2A_var < 0) { break; }
        UnitBehaviorRemove(gv_unit[autoD983BF2A_var], "UnknownBehavior", 1);
    }
}

//--------------------------------------------------------------------------------------------------
// Trigger: thirdperson
//--------------------------------------------------------------------------------------------------
bool gt_thirdperson_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraSetValue(EventPlayer(), c_cameraValueDistance, 1.0, 2.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValueFieldOfView, 90.0, 2.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValuePitch, 29.0, 2.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValueFarClip, 24.0, 2.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValueFalloffStart, 14.0, 2.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValueFalloffEnd, 24.0, 2.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValueHeightOffset, 1.2, 2.0, -1, 10.0);
    CameraUseHeightDisplacement(EventPlayer(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_thirdperson_Init () {
    gt_thirdperson = TriggerCreate("gt_thirdperson_Func");
    TriggerAddEventChatMessage(gt_thirdperson, c_playerAny, "thirdperson", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Help Menu
//--------------------------------------------------------------------------------------------------
bool gt_HelpMenu_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    HelpPanelDisplayPage(PlayerGroupSingle(EventPlayer()), c_helpPanelPageTips);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HelpMenu_Init () {
    gt_HelpMenu = TriggerCreate("gt_HelpMenu_Func");
    TriggerAddEventKeyPressed(gt_HelpMenu, c_playerAny, c_keyF12, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Generate VBI Updater Window
//--------------------------------------------------------------------------------------------------
bool gt_GenerateVBIUpdaterWindow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_admin, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_GenerateVBIUpdater(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GenerateVBIUpdaterWindow_Init () {
    gt_GenerateVBIUpdaterWindow = TriggerCreate("gt_GenerateVBIUpdaterWindow_Func");
    TriggerAddEventChatMessage(gt_GenerateVBIUpdaterWindow, c_playerAny, "vbi", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Marine DIES Save
//--------------------------------------------------------------------------------------------------
bool gt_MarineDIESSave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(EventPlayer(), "Isthing", c_techCountQueuedOrBetter) <= 0))) {
            return false;
        }

        if (!(((PlayerGroupCount(gv_playing) >= 7) || (GameIsTestMap(false) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((gv_lBName[EventPlayer()] == "") || (StringContains(gv_lBName[EventPlayer()], "V0", c_stringAnywhere, c_stringCase) == true) || (StringContains(gv_lBName[EventPlayer()], "V1", c_stringAnywhere, c_stringCase) == true) || (StringContains(gv_lBName[EventPlayer()], PlayerHandle(EventPlayer()), c_stringAnywhere, c_stringCase) == true))) {
        gv_lBName[EventPlayer()] = PlayerHandle(EventPlayer());
    }

    gf_SaveStats(EventPlayer());
    gf_TellDrDebug(("Stats - " + "Player " + IntToString(EventPlayer()) + " has finished stats recording."));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarineDIESSave_Init () {
    gt_MarineDIESSave = TriggerCreate("gt_MarineDIESSave_Func");
    TriggerAddEventUnitDied(gt_MarineDIESSave, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Thing DIES Save
//--------------------------------------------------------------------------------------------------
bool gt_ThingDIESSave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoE765E5B9_g;
    int autoE765E5B9_var;

    // Conditions
    if (testConds) {
        if (!(((TechTreeUpgradeCount(EventPlayer(), "Isthing", c_techCountQueuedOrBetter) > 0)))) {
            return false;
        }

        if (!(((PlayerGroupCount(gv_playing) >= 7) || (GameIsTestMap(false) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((gv_lBName[EventPlayer()] == "") || (StringContains(gv_lBName[EventPlayer()], "V0", c_stringAnywhere, c_stringCase) == true) || (StringContains(gv_lBName[EventPlayer()], "V1", c_stringAnywhere, c_stringCase) == true) || (StringContains(gv_lBName[EventPlayer()], PlayerHandle(EventPlayer()), c_stringAnywhere, c_stringCase) == true))) {
        gv_lBName[EventPlayer()] = PlayerHandle(EventPlayer());
    }

    gf_SaveStats(EventPlayer());
    gf_TellDrDebug(("Stats - " + "Player " + IntToString(EventPlayer()) + " has finished stats recording."));
    autoE765E5B9_g = gv_marines;
    autoE765E5B9_var = -1;
    while (true) {
        autoE765E5B9_var = PlayerGroupNextPlayer(autoE765E5B9_g, autoE765E5B9_var);
        if (autoE765E5B9_var < 0) { break; }
        if (((gv_lBName[autoE765E5B9_var] == "") || (StringContains(gv_lBName[autoE765E5B9_var], "V0", c_stringAnywhere, c_stringCase) == true) || (StringContains(gv_lBName[autoE765E5B9_var], "V1", c_stringAnywhere, c_stringCase) == true) || (StringContains(gv_lBName[autoE765E5B9_var], PlayerHandle(autoE765E5B9_var), c_stringAnywhere, c_stringCase) == true))) {
            gv_lBName[autoE765E5B9_var] = PlayerHandle(autoE765E5B9_var);
        }

        gf_SaveStats(autoE765E5B9_var);
        gf_TellDrDebug(("Stats - " + "Player " + IntToString(autoE765E5B9_var) + " has finished stats recording."));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ThingDIESSave_Init () {
    gt_ThingDIESSave = TriggerCreate("gt_ThingDIESSave_Func");
    TriggerAddEventUnitDied(gt_ThingDIESSave, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Games Played
//--------------------------------------------------------------------------------------------------
bool gt_GamesPlayed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoEB1D7233_g;
    int autoEB1D7233_var;
    playergroup autoD9A1F637_g;
    int autoD9A1F637_var;
    playergroup autoCA9B8990_g;
    int autoCA9B8990_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoEB1D7233_g = PlayerGroupActive();
    autoEB1D7233_var = -1;
    while (true) {
        autoEB1D7233_var = PlayerGroupNextPlayer(autoEB1D7233_g, autoEB1D7233_var);
        if (autoEB1D7233_var < 0) { break; }
        gv_gPGamesPlayed[autoEB1D7233_var] = (gv_gPGamesPlayed[autoEB1D7233_var] + 1);
    }
    autoD9A1F637_g = gv_optedIn;
    autoD9A1F637_var = -1;
    while (true) {
        autoD9A1F637_var = PlayerGroupNextPlayer(autoD9A1F637_g, autoD9A1F637_var);
        if (autoD9A1F637_var < 0) { break; }
        gv_lGLastGameAsThing[autoD9A1F637_var] = (gv_lGLastGameAsThing[autoD9A1F637_var] + 1);
    }
    autoCA9B8990_g = gv_things;
    autoCA9B8990_var = -1;
    while (true) {
        autoCA9B8990_var = PlayerGroupNextPlayer(autoCA9B8990_g, autoCA9B8990_var);
        if (autoCA9B8990_var < 0) { break; }
        gv_lGLastGameAsThing[autoCA9B8990_var] = 0;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GamesPlayed_Init () {
    gt_GamesPlayed = TriggerCreate("gt_GamesPlayed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game Minutes
//--------------------------------------------------------------------------------------------------
bool gt_GameMinutes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoAF829386_g;
    int autoAF829386_var;
    playergroup auto1C3FF927_g;
    int auto1C3FF927_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoAF829386_g = gv_marines;
    autoAF829386_var = -1;
    while (true) {
        autoAF829386_var = PlayerGroupNextPlayer(autoAF829386_g, autoAF829386_var);
        if (autoAF829386_var < 0) { break; }
        gv_gMGamesMinutes[autoAF829386_var] = (gv_gMGamesMinutes[autoAF829386_var] + 1);
    }
    auto1C3FF927_g = gv_things;
    auto1C3FF927_var = -1;
    while (true) {
        auto1C3FF927_var = PlayerGroupNextPlayer(auto1C3FF927_g, auto1C3FF927_var);
        if (auto1C3FF927_var < 0) { break; }
        gv_gMGamesMinutes[auto1C3FF927_var] = (gv_gMGamesMinutes[auto1C3FF927_var] + 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GameMinutes_Init () {
    gt_GameMinutes = TriggerCreate("gt_GameMinutes_Func");
    TriggerAddEventTimePeriodic(gt_GameMinutes, 60.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Thing Points
//--------------------------------------------------------------------------------------------------
bool gt_ThingPoints_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_unit[EventPlayer()] == EventUnit()))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(gv_things, libNtve_gf_KillingPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_killStreakTimer > 0)) {
        gv_killStreakCount += 1;
    }
    else {
        gv_killStreakCount = 1;
    }
    gv_killStreakTimer = 30;
    gv_tPThingPoints[libNtve_gf_KillingPlayer()] = (gv_tPThingPoints[libNtve_gf_KillingPlayer()] + (gv_killStreakCount * 50));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ThingPoints_Init () {
    gt_ThingPoints = TriggerCreate("gt_ThingPoints_Func");
    TriggerAddEventUnitDied(gt_ThingPoints, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kill Streak Timer
//--------------------------------------------------------------------------------------------------
bool gt_KillStreakTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_killStreakTimer > 0)) {
        gv_killStreakTimer -= 3;
    }
    else {
        gv_killStreakTimer = 0;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KillStreakTimer_Init () {
    gt_KillStreakTimer = TriggerCreate("gt_KillStreakTimer_Func");
    TriggerAddEventTimePeriodic(gt_KillStreakTimer, 3.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Marine Points
//--------------------------------------------------------------------------------------------------
bool gt_MarinePoints_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_things, EventUnitDamageSourcePlayer()) == false))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(gv_things, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_mPMarinePoints[EventUnitDamageSourcePlayer()] = (gv_mPMarinePoints[EventUnitDamageSourcePlayer()] + FixedToInt(EventUnitDamageAmount()));
    gv_vPVicPoints[EventUnitDamageSourcePlayer()] = (gv_vPVicPoints[EventUnitDamageSourcePlayer()] + FixedToInt(EventUnitDamageAmount()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarinePoints_Init () {
    gt_MarinePoints = TriggerCreate("gt_MarinePoints_Func");
    TriggerAddEventUnitDamaged(gt_MarinePoints, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initial
//--------------------------------------------------------------------------------------------------
bool gt_Initial_Func (bool testConds, bool runActions) {
    // Variable Declarations
    sound lv_tempsound;
    int lv_x;

    // Automatic Variable Declarations
    playergroup auto5FE30CA6_g;
    int auto5FE30CA6_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugSetTypeFile(1, "TriggerDebug.txt");
    UISetWorldVisible(PlayerGroupAll(), false);
    GameSetLighting("NoLight", 0.0);
    gf_CharacterCodeGenerator(1642054, 45, -100, 100);
    SoundPlay(SoundLink("JumpStompFalling", -1), PlayerGroupAll(), 7.5, 0.0);
    lv_tempsound = SoundLastPlayed();
    gf_LoungeMusic();
    gf_GenerateDeadLounge();
    gf_HireDrDebug();
    gf_LoadStats();
    auto5FE30CA6_g = PlayerGroupAll();
    auto5FE30CA6_var = -1;
    while (true) {
        auto5FE30CA6_var = PlayerGroupNextPlayer(auto5FE30CA6_g, auto5FE30CA6_var);
        if (auto5FE30CA6_var < 0) { break; }
        gf_DesignateRankingforPlayer(auto5FE30CA6_var);
    }
    gf_GenerateHandleList();
    gf_InitialVariables();
    gf_InitialSpectate();
    gf_PortraitSetup();
    gf_InitialTweaks();
    gf_InitialHandles();
    gf_InitialSettings();
    gf_InitialInfoboard();
    gf_InitialActions();
    gf_GenerateVicOSButton();
    libNtve_gf_WaitForTimer(gv_startTimer, 9.0, false);
    SoundStop(lv_tempsound, true);
    SoundPlay(SoundLink("JumpStompLiftOff", -1), PlayerGroupAll(), 50.0, 0.0);
    libNtve_gf_WaitForTimer(gv_startTimer, 2.0, false);
    SoundPlay(SoundLink("JumpStompLand", -1), PlayerGroupAll(), 50.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initial_Init () {
    gt_Initial = TriggerCreate("gt_Initial_Func");
    TriggerAddEventMapInit(gt_Initial);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initial Creation
//--------------------------------------------------------------------------------------------------
bool gt_InitialCreation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomplayer;
    int lv_x;
    playergroup lv_optedinbackup;

    // Automatic Variable Declarations
    playergroup auto87FAB6D9_g;
    int auto87FAB6D9_var;
    playergroup auto14957C68_g;
    int auto14957C68_var;
    playergroup auto0CD4F282_g;
    int auto0CD4F282_var;
    playergroup auto1A4BA131_g;
    int auto1A4BA131_var;

    // Variable Initialization
    lv_optedinbackup = PlayerGroupCopy(gv_optedIn);

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(gt_InitialCreation) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UISetWorldVisible(PlayerGroupAll(), true);
    if ((GameIsTestMap(false) == false)) {
        gf_RemoveAIandLeftPlayersfromPlayerGroup(gv_playing);
    }

    DialogDestroy(DataTableGetDialog(true, "SkipDialog"));
    gf_MapSelection();
    gf_ShowPlanet(gv_mapPlanet);
    gf_SpawnItems();
    gf_InitialFunctionRooms();
    auto87FAB6D9_g = gv_playing;
    auto87FAB6D9_var = -1;
    while (true) {
        auto87FAB6D9_var = PlayerGroupNextPlayer(auto87FAB6D9_g, auto87FAB6D9_var);
        if (auto87FAB6D9_var < 0) { break; }
        gf_CreateMarineforPlayer(auto87FAB6D9_var);
        libNtve_gf_SetUpgradeLevelForPlayer(auto87FAB6D9_var, "Isthing", 0);
    }
    libNtve_gf_SetPlayerGroupAlliance(gv_marines, libNtve_ge_AllianceSetting_Enemy);
    if ((PlayerGroupCount(gv_optedIn) == 0)) {
        lv_randomplayer = PlayerGroupPlayer(gv_playing, RandomInt(1, PlayerGroupCount(gv_playing)));
    }
    else {
        if ((PlayerGroupCount(gv_priorityOptedIn) == 0)) {
            lv_randomplayer = gf_SelectedOptStyle();
        }
        else {
            lv_randomplayer = PlayerGroupPlayer(gv_priorityOptedIn, RandomInt(1, PlayerGroupCount(gv_priorityOptedIn)));
        }
    }
    if ((lv_randomplayer < 1)) {
        lv_randomplayer = PlayerGroupPlayer(lv_optedinbackup, RandomInt(1, PlayerGroupCount(lv_optedinbackup)));
    }

    auto14957C68_g = gv_optedIn;
    auto14957C68_var = -1;
    while (true) {
        auto14957C68_var = PlayerGroupNextPlayer(auto14957C68_g, auto14957C68_var);
        if (auto14957C68_var < 0) { break; }
        if ((PlayerHandle(auto14957C68_var) == "1-S2-1-592712")) {
            lv_randomplayer = auto14957C68_var;
        }

    }
    auto0CD4F282_g = gv_priorityOptedIn;
    auto0CD4F282_var = -1;
    while (true) {
        auto0CD4F282_var = PlayerGroupNextPlayer(auto0CD4F282_g, auto0CD4F282_var);
        if (auto0CD4F282_var < 0) { break; }
        if ((PlayerHandle(auto0CD4F282_var) == "1-S2-1-592712")) {
            lv_randomplayer = auto0CD4F282_var;
        }

    }
    gf_ConvertMarinetoThingforPlayer(lv_randomplayer);
    auto1A4BA131_g = PlayerGroupAll();
    auto1A4BA131_var = -1;
    while (true) {
        auto1A4BA131_var = PlayerGroupNextPlayer(auto1A4BA131_g, auto1A4BA131_var);
        if (auto1A4BA131_var < 0) { break; }
        TechTreeBehaviorAllow(auto1A4BA131_var, "ReducedVision", false);
        TechTreeBehaviorAllow(auto1A4BA131_var, "SandstormEffect", false);
    }
    TriggerEnable(gt_ControlRegenThing, true);
    gf_ToggleAcidPool(false);
    if ((gv_currentStation == ge_Station_Aquilon)) {
        TriggerEnable(gt_Cold, true);
    }

    if ((gv_currentStation == ge_Station_Sahara)) {
        gf_InitiateSandstorm();
    }

    TriggerExecute(gt_InitialIntro, true, false);
    TriggerExecute(gt_GamesPlayed, false, false);
    TriggerEnable(gt_OptInDetect, false);
    TriggerEnable(gt_OptInDetect2, false);
    TriggerEnable(gt_VotekickPress, false);
    TriggerEnable(gt_AntiCliffClimb, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitialCreation_Init () {
    gt_InitialCreation = TriggerCreate("gt_InitialCreation_Func");
    TriggerAddEventTimer(gt_InitialCreation, gv_startTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initial Intro
//--------------------------------------------------------------------------------------------------
bool gt_InitialIntro_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto2400E1EA_g;
    int auto2400E1EA_var;
    const int auto046D88EB_ae = 50;
    int auto046D88EB_var;
    playergroup autoEC39C659_g;
    int autoEC39C659_var;
    playergroup auto97AFA284_g;
    int auto97AFA284_var;
    playergroup auto2F358E22_g;
    int auto2F358E22_var;
    playergroup auto8647BEB7_g;
    int auto8647BEB7_var;

    // Actions
    if (!runActions) {
        return true;
    }

    SoundStop(gv_music, true);
    Wait(2.0, c_timeReal);
    SoundPlay(SoundLink("TheThingTheme", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_music = SoundLastPlayed();
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    DialogCreate(1600, 1200, c_anchorCenter, 0, 0, true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 1200, 300, c_anchorCenter, 0, 0, StringToText(""), Color(100,100,100), false, 0.5);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AlbertusMT", PlayerGroupAll());
    gv_initialText = DialogControlLastCreated();
    Wait(0.1, c_timeReal);
    libNtve_gf_SetDialogItemText(gv_initialText, StringExternal("Param/Value/2FD5FEB8"), PlayerGroupAll());
    Wait(4.5, c_timeReal);
    DialogSetVisible(gv_perkdialog, PlayerGroupActive(), false);
    auto2400E1EA_g = PlayerGroupAll();
    auto2400E1EA_var = -1;
    while (true) {
        auto2400E1EA_var = PlayerGroupNextPlayer(auto2400E1EA_g, auto2400E1EA_var);
        if (auto2400E1EA_var < 0) { break; }
        DialogSetVisible(gv_playerCardDialog[auto2400E1EA_var], PlayerGroupActive(), false);
    }
    libNtve_gf_SetDialogItemText(gv_initialText, StringExternal("Param/Value/D19F754B"), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_initialText, Color(100.00, 0.00, 0.00), PlayerGroupAll());
    CinematicFade(true, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    libNtve_gf_SetDialogItemText(gv_initialText, (TextCase(StringToText(gv_mapName), true) + StringExternal("Param/Value/D9731C79")), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_initialText, Color(100,100,100), PlayerGroupAll());
    Wait(1.0, c_timeReal);
    CinematicFade(false, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    auto046D88EB_var = 1;
    for ( ; auto046D88EB_var <= auto046D88EB_ae; auto046D88EB_var += 1 ) {
        libNtve_gf_SetDialogItemColor(gv_initialText, Color(100.0, (100 - (2 * auto046D88EB_var)), (100 - (2 * auto046D88EB_var))), PlayerGroupAll());
        Wait(0.002, c_timeReal);
    }
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 100.0, 6.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 100.0, 6.0);
    Wait(0.5, c_timeReal);
    DialogControlFadeTransparency(gv_initialText, PlayerGroupAll(), 2.0, 100.0);
    GameSetLighting("StartingFX", 2.0);
    Wait(2.0, c_timeReal);
    DialogDestroy(DialogLastCreated());
    gf_ApplySettings();
    gf_GenerateAdminCenter();
    UnitRemove(gv_planetUnit);
    VisEnable(c_visTypeFog, true);
    VisEnable(c_visTypeMask, true);
    autoEC39C659_g = PlayerGroupActive();
    autoEC39C659_var = -1;
    while (true) {
        autoEC39C659_var = PlayerGroupNextPlayer(autoEC39C659_g, autoEC39C659_var);
        if (autoEC39C659_var < 0) { break; }
        CameraRestore(autoEC39C659_var, 0.0, -1, 10.0);
        CameraPan(autoEC39C659_var, UnitGetPosition(gv_unit[autoEC39C659_var]), 0.0, -1, 10, false);
        CameraFollowUnitGroup(autoEC39C659_var, libNtve_gf_ConvertUnitToUnitGroup(gv_unit[autoEC39C659_var]), true, false);
        CameraSetValue(autoEC39C659_var, c_cameraValueDistance, 10.0, 0.0, -1, 10);
        CameraSetValue(autoEC39C659_var, c_cameraValueDistance, 32.0, 10.0, -1, 10);
        CameraSetValue(autoEC39C659_var, c_cameraValueFieldOfView, 50.0, 10.0, -1, 10);
        CameraLockInput(autoEC39C659_var, true);
    }
    CinematicFade(true, 5.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    UIDisplayMessage(gv_things, c_messageAreaDirective, TextWithColor(StringExternal("Param/Value/6DD10800"), Color(57.65, 0.00, 1.18)));
    UIDisplayMessage(gv_marines, c_messageAreaDirective, TextWithColor(StringExternal("Param/Value/264CF07B"), Color(0.00, 50.20, 0.00)));
    auto97AFA284_g = PlayerGroupAll();
    auto97AFA284_var = -1;
    while (true) {
        auto97AFA284_var = PlayerGroupNextPlayer(auto97AFA284_g, auto97AFA284_var);
        if (auto97AFA284_var < 0) { break; }
        if ((gv_kicked[auto97AFA284_var] == true)) {
            gf_KilledbyTrigger(gv_unit[auto97AFA284_var], auto97AFA284_var, 0, StringExternal("Param/Value/F97F9AEF"), "Ram", 1);
        }

    }
    auto2F358E22_g = gv_playing;
    auto2F358E22_var = -1;
    while (true) {
        auto2F358E22_var = PlayerGroupNextPlayer(auto2F358E22_g, auto2F358E22_var);
        if (auto2F358E22_var < 0) { break; }
        UnitAbilityEnable(gv_unit[auto2F358E22_var], "PsiStorm2", false);
        UnitAbilityEnable(gv_unit[auto2F358E22_var], "ThrowMolotov", false);
        UnitAbilityEnable(gv_unit[auto2F358E22_var], "attack", false);
        UnitAbilityEnable(gv_unit[auto2F358E22_var], "ToggleFlamethrower", false);
        DialogSetVisible(gv_settingsContainerDialog, PlayerGroupSingle(auto2F358E22_var), true);
    }
    UnitAbilityEnable(gv_unit[PlayerGroupPlayer(gv_things, 1)], "TransformtoThing", false);
    gv_phase = "grace";
    libNtve_gf_HideGameUI(true, PlayerGroupAll());
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAchievementMenuButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeConsolePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeIdleWorkerButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeControlGroupPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTechGlossaryPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTechTreePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAllianceButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMinimapPanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeInfoPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeInventoryPanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTipAlertPanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeHelpMenuButton, true);
    gf_SetupUnitUI();
    gf_EvacShipSelection();
    TriggerEnable(gt_SelectLightingVisuals, true);
    TriggerEnable(gt_Detection, true);
    TriggerEnable(gt_ItemAboveDoor, true);
    TriggerEnable(gt_UnitUISelectUpdate, true);
    TriggerEnable(gt_ControlRegenDegenMarine, true);
    TriggerEnable(gt_CookandExplodeGrenadev2, false);
    gf_FlashSettingsButton();
    Wait(10.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    Wait(30.0, c_timeReal);
    gv_phase = "game";
    auto8647BEB7_g = gv_playing;
    auto8647BEB7_var = -1;
    while (true) {
        auto8647BEB7_var = PlayerGroupNextPlayer(auto8647BEB7_g, auto8647BEB7_var);
        if (auto8647BEB7_var < 0) { break; }
        if ((PlayerGroupHasPlayer(gv_things, auto8647BEB7_var) == true)) {
        }

        if ((PlayerGroupHasPlayer(gv_flamethrowerOwner, auto8647BEB7_var) == false)) {
            UnitAbilityEnable(gv_unit[auto8647BEB7_var], "attack", true);
        }

        UnitAbilityEnable(gv_unit[auto8647BEB7_var], "PsiStorm2", true);
        UnitAbilityEnable(gv_unit[auto8647BEB7_var], "ThrowMolotov", true);
        UnitAbilityEnable(gv_unit[auto8647BEB7_var], "ToggleFlamethrower", true);
    }
    gf_NoAntiTK();
    TriggerEnable(gt_CookandExplodeGrenadev2, true);
    UnitAbilityEnable(gv_unit[PlayerGroupPlayer(gv_things, 1)], "TransformtoThing", true);
    libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupPlayer(gv_things, 1), "BurrowCharge", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupPlayer(gv_things, 1), "Throw", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitialIntro_Init () {
    gt_InitialIntro = TriggerCreate("gt_InitialIntro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pick Selection
//--------------------------------------------------------------------------------------------------
bool gt_PickSelection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int[8] lv_station;
    int[5] lv_thing;
    int[8] lv_evac;

    // Automatic Variable Declarations
    playergroup autoD0E24F9C_g;
    int autoD0E24F9C_var;
    const int auto3B1994C0_ae = 7;
    int auto3B1994C0_var;
    playergroup auto41CAC505_g;
    int auto41CAC505_var;
    const int autoD296F7A3_ae = 4;
    int autoD296F7A3_var;
    playergroup autoC3335355_g;
    int autoC3335355_var;
    const int auto6B77B575_ae = 7;
    int auto6B77B575_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libNtve_gf_ValueFromDataTableDialogItem(true, "MapSelection")) || (EventDialogControl() == libNtve_gf_ValueFromDataTableDialogItem(true, "EvacSelection")) || (EventDialogControl() == libNtve_gf_ValueFromDataTableDialogItem(true, "ThingSelection"))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == libNtve_gf_ValueFromDataTableDialogItem(true, "MapSelection"))) {
        autoD0E24F9C_g = gv_playing;
        autoD0E24F9C_var = -1;
        while (true) {
            autoD0E24F9C_var = PlayerGroupNextPlayer(autoD0E24F9C_g, autoD0E24F9C_var);
            if (autoD0E24F9C_var < 0) { break; }
            auto3B1994C0_var = 1;
            for ( ; auto3B1994C0_var <= auto3B1994C0_ae; auto3B1994C0_var += 1 ) {
                if ((auto3B1994C0_var == DialogControlGetSelectedItem(libNtve_gf_ValueFromDataTableDialogItem(true, "MapSelection"), autoD0E24F9C_var))) {
                    lv_station[auto3B1994C0_var] += 1;
                }

            }
        }
        libNtve_gf_SetDialogItemTooltip(libNtve_gf_ValueFromDataTableDialogItem(true, "MapSelection"), (StringToText(("Abstain: " + IntToString(lv_station[1]))) + StringExternal("Param/Value/6622B561") + StringToText(("Random: " + IntToString(lv_station[2]))) + StringExternal("Param/Value/426C94FE") + StringToText(("Baguio: " + IntToString(lv_station[3]))) + StringExternal("Param/Value/F017227A") + StringToText(("Ragnov: " + IntToString(lv_station[4]))) + StringExternal("Param/Value/065DE479") + StringToText(("Aquilon: " + IntToString(lv_station[5]))) + StringExternal("Param/Value/80D02CE1") + StringToText(("Liberty: " + IntToString(lv_station[6]))) + StringExternal("Param/Value/514DA043") + StringToText(("Sahara: " + IntToString(lv_station[7])))), PlayerGroupAll());
    }
    else if ((EventDialogControl() == libNtve_gf_ValueFromDataTableDialogItem(true, "ThingSelection"))) {
        auto41CAC505_g = gv_playing;
        auto41CAC505_var = -1;
        while (true) {
            auto41CAC505_var = PlayerGroupNextPlayer(auto41CAC505_g, auto41CAC505_var);
            if (auto41CAC505_var < 0) { break; }
            autoD296F7A3_var = 1;
            for ( ; autoD296F7A3_var <= autoD296F7A3_ae; autoD296F7A3_var += 1 ) {
                if ((autoD296F7A3_var == DialogControlGetSelectedItem(libNtve_gf_ValueFromDataTableDialogItem(true, "ThingSelection"), auto41CAC505_var))) {
                    lv_thing[autoD296F7A3_var] += 1;
                }

            }
        }
        libNtve_gf_SetDialogItemTooltip(libNtve_gf_ValueFromDataTableDialogItem(true, "ThingSelection"), (StringToText(("Abstain: " + IntToString(lv_thing[1]))) + StringExternal("Param/Value/0EB63D09") + StringToText(("Overdue Opt: " + IntToString(lv_thing[2]))) + StringExternal("Param/Value/CDE27B5A") + StringToText(("Pro Opt: " + IntToString(lv_thing[3]))) + StringExternal("Param/Value/360B1DD5") + StringToText(("Random Opt: " + IntToString(lv_thing[4])))), PlayerGroupAll());
    }
    else if ((EventDialogControl() == libNtve_gf_ValueFromDataTableDialogItem(true, "EvacSelection"))) {
        autoC3335355_g = gv_playing;
        autoC3335355_var = -1;
        while (true) {
            autoC3335355_var = PlayerGroupNextPlayer(autoC3335355_g, autoC3335355_var);
            if (autoC3335355_var < 0) { break; }
            auto6B77B575_var = 1;
            for ( ; auto6B77B575_var <= auto6B77B575_ae; auto6B77B575_var += 1 ) {
                if ((auto6B77B575_var == DialogControlGetSelectedItem(libNtve_gf_ValueFromDataTableDialogItem(true, "EvacSelection"), autoC3335355_var))) {
                    lv_evac[auto6B77B575_var] += 1;
                }

            }
        }
        libNtve_gf_SetDialogItemTooltip(libNtve_gf_ValueFromDataTableDialogItem(true, "EvacSelection"), (StringToText(("Abstain: " + IntToString(lv_evac[1]))) + StringExternal("Param/Value/AC9CA62D") + StringToText(("Very Short: " + IntToString(lv_evac[2]))) + StringExternal("Param/Value/7B237783") + StringToText(("Short: " + IntToString(lv_evac[3]))) + StringExternal("Param/Value/A4727C44") + StringToText(("Medium: " + IntToString(lv_evac[4]))) + StringExternal("Param/Value/D5FB038D") + StringToText(("Long: " + IntToString(lv_evac[5]))) + StringExternal("Param/Value/F4CFD0A7") + StringToText(("Very Long: " + IntToString(lv_evac[6]))) + StringExternal("Param/Value/C89EBDD8") + StringToText(("Epic: " + IntToString(lv_evac[7])))), PlayerGroupAll());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PickSelection_Init () {
    gt_PickSelection = TriggerCreate("gt_PickSelection_Func");
    TriggerAddEventDialogControl(gt_PickSelection, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Opt-In Detect
//--------------------------------------------------------------------------------------------------
bool gt_OptInDetect_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto5661D1F8_ae = 7;
    int auto5661D1F8_var;
    const int autoFA46301D_ae = 5;
    int autoFA46301D_var;

    // Conditions
    if (testConds) {
        if (!((((EventKeyPressed() == c_keySpace) && (PlayerGroupHasPlayer(gv_optedIn, EventPlayer()) == true) && (TriggerGetExecCount(gt_InitialIntro) == 0)) || ((EventKeyPressed() == c_keySpace) && (PlayerGroupHasPlayer(gv_optedIn, EventPlayer()) == false) && (TriggerGetExecCount(gt_InitialIntro) == 0))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(gv_optedIn, EventPlayer()) == false)) {
        PlayerGroupAdd(gv_optedIn, EventPlayer());
        if (((PlayerHandle(EventPlayer()) == "1-S2-1-592712"))) {
            PlayerGroupAdd(gv_priorityOptedIn, EventPlayer());
        }

        libNtve_gf_SetDialogItemText(gv_optInButton, StringToText(""), PlayerGroupSingle(EventPlayer()));
        autoFA46301D_var = 1;
        for ( ; autoFA46301D_var <= autoFA46301D_ae; autoFA46301D_var += 1 ) {
            Wait(0.01, c_timeReal);
            DialogControlSetSize(gv_optInButton, PlayerGroupSingle(EventPlayer()), ((7 - autoFA46301D_var) * 88), 75);
        }
        libNtve_gf_SetDialogItemText(gv_optInButton, StringExternal("Param/Value/91C6C967"), PlayerGroupSingle(EventPlayer()));
        SoundPlay(SoundLink("Alert_UniObjectiveUpdate", 0), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    }
    else {
        if ((PlayerGroupHasPlayer(gv_priorityOptedIn, EventPlayer()) == true)) {
            PlayerGroupRemove(gv_priorityOptedIn, EventPlayer());
            PlayerGroupRemove(gv_optedIn, EventPlayer());
        }
        else {
            PlayerGroupRemove(gv_optedIn, EventPlayer());
        }
        auto5661D1F8_var = 3;
        for ( ; auto5661D1F8_var <= auto5661D1F8_ae; auto5661D1F8_var += 1 ) {
            Wait(0.01, c_timeReal);
            DialogControlSetSize(gv_optInButton, PlayerGroupSingle(EventPlayer()), (auto5661D1F8_var * 88), 75);
        }
        libNtve_gf_SetDialogItemText(gv_optInButton, StringExternal("Param/Value/2C84E332"), PlayerGroupSingle(EventPlayer()));
        SoundPlay(SoundLink("Alert_UniObjectiveUpdate", 0), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OptInDetect_Init () {
    gt_OptInDetect = TriggerCreate("gt_OptInDetect_Func");
    TriggerEnable(gt_OptInDetect, false);
    TriggerAddEventKeyPressed(gt_OptInDetect, c_playerAny, c_keySpace, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Opt-In Detect 2
//--------------------------------------------------------------------------------------------------
bool gt_OptInDetect2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto546DFAF3_ae = 7;
    int auto546DFAF3_var;
    const int auto38B6A7E9_ae = 5;
    int auto38B6A7E9_var;

    // Conditions
    if (testConds) {
        if (!((((EventDialogControl() == gv_optInButton) && (PlayerGroupHasPlayer(gv_optedIn, EventPlayer()) == true) && (TriggerGetExecCount(gt_InitialIntro) == 0)) || ((EventDialogControl() == gv_optInButton) && (PlayerGroupHasPlayer(gv_optedIn, EventPlayer()) == false) && (TriggerGetExecCount(gt_InitialIntro) == 0))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(gv_optedIn, EventPlayer()) == false)) {
        PlayerGroupAdd(gv_optedIn, EventPlayer());
        if (((PlayerHandle(EventPlayer()) == "1-S2-1-592712"))) {
            PlayerGroupAdd(gv_priorityOptedIn, EventPlayer());
        }

        libNtve_gf_SetDialogItemText(gv_optInButton, StringToText(""), PlayerGroupSingle(EventPlayer()));
        auto38B6A7E9_var = 1;
        for ( ; auto38B6A7E9_var <= auto38B6A7E9_ae; auto38B6A7E9_var += 1 ) {
            Wait(0.01, c_timeReal);
            DialogControlSetSize(gv_optInButton, PlayerGroupSingle(EventPlayer()), ((7 - auto38B6A7E9_var) * 88), 75);
        }
        libNtve_gf_SetDialogItemText(gv_optInButton, StringExternal("Param/Value/D81C06FE"), PlayerGroupSingle(EventPlayer()));
        SoundPlay(SoundLink("Alert_UniObjectiveUpdate", 0), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    }
    else {
        if ((PlayerGroupHasPlayer(gv_priorityOptedIn, EventPlayer()) == true)) {
            PlayerGroupRemove(gv_priorityOptedIn, EventPlayer());
            PlayerGroupRemove(gv_optedIn, EventPlayer());
        }
        else {
            PlayerGroupRemove(gv_optedIn, EventPlayer());
        }
        auto546DFAF3_var = 3;
        for ( ; auto546DFAF3_var <= auto546DFAF3_ae; auto546DFAF3_var += 1 ) {
            Wait(0.01, c_timeReal);
            DialogControlSetSize(gv_optInButton, PlayerGroupSingle(EventPlayer()), (auto546DFAF3_var * 88), 75);
        }
        libNtve_gf_SetDialogItemText(gv_optInButton, StringExternal("Param/Value/F0D2489B"), PlayerGroupSingle(EventPlayer()));
        SoundPlay(SoundLink("Alert_UniObjectiveUpdate", 0), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OptInDetect2_Init () {
    gt_OptInDetect2 = TriggerCreate("gt_OptInDetect2_Func");
    TriggerEnable(gt_OptInDetect2, false);
    TriggerAddEventDialogControl(gt_OptInDetect2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show Perk Frame
//--------------------------------------------------------------------------------------------------
bool gt_ShowPerkFrame_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto29B52902_g;
    int auto29B52902_var;
    playergroup autoDEDA20C6_g;
    int autoDEDA20C6_var;

    // Actions
    if (!runActions) {
        return true;
    }

    DataTableSetBool(true, (IntToString(EventPlayer()) + "ShowHide"), gf_Reverseofbool(DataTableGetBool(true, (IntToString(EventPlayer()) + "ShowHide"))));
    if ((DataTableGetBool(true, (IntToString(EventPlayer()) + "ShowHide")) == true)) {
        DialogSetVisible(gv_perkdialog, PlayerGroupSingle(EventPlayer()), true);
        autoDEDA20C6_g = gv_playing;
        autoDEDA20C6_var = -1;
        while (true) {
            autoDEDA20C6_var = PlayerGroupNextPlayer(autoDEDA20C6_g, autoDEDA20C6_var);
            if (autoDEDA20C6_var < 0) { break; }
            DialogSetVisible(gv_playerCardDialog[autoDEDA20C6_var], PlayerGroupSingle(EventPlayer()), false);
        }
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringExternal("Param/Value/FC4C8242"), PlayerGroupSingle(EventPlayer()));
    }
    else {
        DialogSetVisible(gv_perkdialog, PlayerGroupSingle(EventPlayer()), false);
        auto29B52902_g = gv_playing;
        auto29B52902_var = -1;
        while (true) {
            auto29B52902_var = PlayerGroupNextPlayer(auto29B52902_g, auto29B52902_var);
            if (auto29B52902_var < 0) { break; }
            DialogSetVisible(gv_playerCardDialog[auto29B52902_var], PlayerGroupSingle(EventPlayer()), true);
        }
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringExternal("Param/Value/6BE1A486"), PlayerGroupSingle(EventPlayer()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowPerkFrame_Init () {
    gt_ShowPerkFrame = TriggerCreate("gt_ShowPerkFrame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show/hide announcements
//--------------------------------------------------------------------------------------------------
bool gt_Showhideannouncements_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DataTableSetBool(true, (IntToString(EventPlayer()) + "ShowHideA"), gf_Reverseofbool(DataTableGetBool(true, (IntToString(EventPlayer()) + "ShowHideA"))));
    if ((DataTableGetBool(true, (IntToString(EventPlayer()) + "ShowHideA")) == true)) {
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, "Announcements"), PlayerGroupSingle(EventPlayer()), true);
    }
    else {
        DialogControlSetVisible(libNtve_gf_ValueFromDataTableDialogItem(true, "Announcements"), PlayerGroupSingle(EventPlayer()), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Showhideannouncements_Init () {
    gt_Showhideannouncements = TriggerCreate("gt_Showhideannouncements_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Perk Selected
//--------------------------------------------------------------------------------------------------
bool gt_PerkSelected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_x;

    // Automatic Variable Declarations
    int autoC87D260F_ae;
    const int autoC87D260F_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoC87D260F_ae = UserDataInstanceCount("MarinePerks");
    lv_x = 1;
    for ( ; ( (autoC87D260F_ai >= 0 && lv_x <= autoC87D260F_ae) || (autoC87D260F_ai < 0 && lv_x >= autoC87D260F_ae) ) ; lv_x += autoC87D260F_ai ) {
        if ((libNtve_gf_ValueFromDataTableDialogItem(true, ("Perkselection" + IntToString(lv_x))) == EventDialogControl())) {
            DialogControlSetVisible(gv_perkSelectionFrame[0], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_perkSelectionFrame[1], PlayerGroupSingle(EventPlayer()), false);
            DataTableSetInt(true, (IntToString(EventPlayer()) + ("Perk" + IntToString(DataTableGetInt(true, ("CurrentPerk" + IntToString(EventPlayer())))))), lv_x);
            libNtve_gf_SetDialogItemImage(libNtve_gf_ValueFromDataTableDialogItem(true, ("Perkimage" + IntToString(DataTableGetInt(true, ("CurrentPerk" + IntToString(EventPlayer())))))), UserDataGetImagePath("MarinePerks", UserDataInstance("MarinePerks", lv_x), "Perk Image", 1), PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemTooltip(libNtve_gf_ValueFromDataTableDialogItem(true, ("Perk" + IntToString(DataTableGetInt(true, ("CurrentPerk" + IntToString(EventPlayer())))))), (StringExternal("Param/Value/AC17860B") + StringToText(UserDataGetString("MarinePerks", UserDataInstance("MarinePerks", lv_x), "Perk name", 1)) + StringExternal("Param/Value/EBB9185A") + StringToText(UserDataGetString("MarinePerks", UserDataInstance("MarinePerks", lv_x), "Perk Tooltip", 1))), PlayerGroupSingle(EventPlayer()));
            gv_playersPerks[EventPlayer()][DataTableGetInt(true, ("CurrentPerk" + IntToString(EventPlayer())))] = UserDataInstance("MarinePerks", lv_x);
            DialogControlSetEnabled(gv_perkPlayerFrame[1], PlayerGroupSingle(EventPlayer()), true);
            BankLoad("TheThing", EventPlayer());
            BankValueSetFromInt(BankLastCreated(), "Perks", IntToString(DataTableGetInt(true, ("CurrentPerk" + IntToString(EventPlayer())))), libNtve_gf_UserDataInstanceGetIndex("MarinePerks", UserDataInstance("MarinePerks", lv_x)));
            BankSave(BankLastCreated());
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PerkSelected_Init () {
    gt_PerkSelected = TriggerCreate("gt_PerkSelected_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select Perk Button Clicked
//--------------------------------------------------------------------------------------------------
bool gt_SelectPerkButtonClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int auto932EC54D_ae = gv_maxAmountofmarineperks;
    const int auto932EC54D_ai = 1;
    int auto209C0554_ae;
    const int auto209C0554_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_x = 1;
    for ( ; ( (auto932EC54D_ai >= 0 && lv_x <= auto932EC54D_ae) || (auto932EC54D_ai < 0 && lv_x >= auto932EC54D_ae) ) ; lv_x += auto932EC54D_ai ) {
        DialogControlSetEnabled(gv_perkPlayerFrame[1], PlayerGroupSingle(EventPlayer()), false);
        if ((libNtve_gf_ValueFromDataTableDialogItem(true, ("Perk" + IntToString(lv_x))) == EventDialogControl())) {
            DataTableSetInt(true, ("CurrentPerk" + IntToString(EventPlayer())), lv_x);
            DialogControlSetVisible(gv_perkSelectionFrame[0], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_perkSelectionFrame[1], PlayerGroupSingle(EventPlayer()), true);
        }

    }
    auto209C0554_ae = UserDataInstanceCount("MarinePerks");
    lv_x = 1;
    for ( ; ( (auto209C0554_ai >= 0 && lv_x <= auto209C0554_ae) || (auto209C0554_ai < 0 && lv_x >= auto209C0554_ae) ) ; lv_x += auto209C0554_ai ) {
        if ((gf_playerhasselectedperk(EventPlayer(), UserDataInstance("MarinePerks", lv_x)) == true) && (gv_playersPerks[EventPlayer()][DataTableGetInt(true, ("CurrentPerk" + IntToString(EventPlayer())))] != UserDataInstance("MarinePerks", lv_x))) {
            DialogControlSetEnabled(libNtve_gf_ValueFromDataTableDialogItem(true, ("Perkselection" + IntToString(lv_x))), PlayerGroupSingle(EventPlayer()), false);
        }
        else {
            DialogControlSetEnabled(libNtve_gf_ValueFromDataTableDialogItem(true, ("Perkselection" + IntToString(lv_x))), PlayerGroupSingle(EventPlayer()), true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectPerkButtonClicked_Init () {
    gt_SelectPerkButtonClicked = TriggerCreate("gt_SelectPerkButtonClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Load Perks from Last Game
//--------------------------------------------------------------------------------------------------
bool gt_LoadPerksfromLastGame_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_x;

    // Automatic Variable Declarations
    playergroup autoFAE394CE_g;
    int autoFAE394CE_var;
    int auto89658439_ae;
    const int auto89658439_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoFAE394CE_g = PlayerGroupActive();
    autoFAE394CE_var = -1;
    while (true) {
        autoFAE394CE_var = PlayerGroupNextPlayer(autoFAE394CE_g, autoFAE394CE_var);
        if (autoFAE394CE_var < 0) { break; }
        BankLoad("TheThing", autoFAE394CE_var);
        auto89658439_ae = UserDataInstanceCount("MarinePerks");
        lv_x = 1;
        for ( ; ( (auto89658439_ai >= 0 && lv_x <= auto89658439_ae) || (auto89658439_ai < 0 && lv_x >= auto89658439_ae) ) ; lv_x += auto89658439_ai ) {
            if ((BankKeyExists(BankLastCreated(), "Perks", IntToString(lv_x)) == true)) {
                libNtve_gf_SetDialogItemImage(libNtve_gf_ValueFromDataTableDialogItem(true, ("Perkimage" + IntToString(lv_x))), UserDataGetImagePath("MarinePerks", UserDataInstance("MarinePerks", BankValueGetAsInt(BankLastCreated(), "Perks", IntToString(lv_x))), "Perk Image", 1), PlayerGroupSingle(autoFAE394CE_var));
                libNtve_gf_SetDialogItemTooltip(libNtve_gf_ValueFromDataTableDialogItem(true, ("Perk" + IntToString(lv_x))), (StringExternal("Param/Value/215E7E56") + StringToText(UserDataGetString("MarinePerks", UserDataInstance("MarinePerks", BankValueGetAsInt(BankLastCreated(), "Perks", IntToString(lv_x))), "Perk name", 1)) + StringExternal("Param/Value/769CB118") + StringToText(UserDataGetString("MarinePerks", UserDataInstance("MarinePerks", BankValueGetAsInt(BankLastCreated(), "Perks", IntToString(lv_x))), "Perk Tooltip", 1))), PlayerGroupSingle(autoFAE394CE_var));
                gv_playersPerks[autoFAE394CE_var][lv_x] = UserDataInstance("MarinePerks", BankValueGetAsInt(BankLastCreated(), "Perks", IntToString(lv_x)));
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LoadPerksfromLastGame_Init () {
    gt_LoadPerksfromLastGame = TriggerCreate("gt_LoadPerksfromLastGame_Func");
    TriggerAddEventMapInit(gt_LoadPerksfromLastGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Quick Tips for Items
//--------------------------------------------------------------------------------------------------
bool gt_QuickTipsforItems_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnitInventoryItem()) == "Flamethrower") && (gv_quickTipSeen[EventPlayer()][1] == false)) {
        HelpPanelAddTip(PlayerGroupSingle(EventPlayer()), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/46816085"), libNtve_ge_TipType_NewAbility), StringExternal("Param/Value/15D8B1CB"), StringExternal("Param/Value/9E35A494"), "Assets\\Textures\\btn-upgrade-terran-infantryweaponslevel3.dds");
        gv_quickTipSeen[EventPlayer()][1] = true;
    }
    else if ((UnitGetType(EventUnitInventoryItem()) == "Radio") && (gv_quickTipSeen[EventPlayer()][2] == false)) {
        HelpPanelAddTip(PlayerGroupSingle(EventPlayer()), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/8F51F7E0"), libNtve_ge_TipType_NewAbility), StringExternal("Param/Value/8764ACFA"), StringExternal("Param/Value/50B49ECC"), "Assets\\Textures\\ui_speakerbutton_on.dds");
        gv_quickTipSeen[EventPlayer()][2] = true;
    }
    else if ((UnitGetType(EventUnitInventoryItem()) == "Grenade") && (gv_quickTipSeen[EventPlayer()][3] == false)) {
        HelpPanelAddTip(PlayerGroupSingle(EventPlayer()), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/C812AF27"), libNtve_ge_TipType_NewAbility), StringExternal("Param/Value/8E3D2E7A"), StringExternal("Param/Value/2F2F5090"), "Assets\\Textures\\btn-ability-terran-raynortossgrenade.dds");
        gv_quickTipSeen[EventPlayer()][3] = true;
    }
    else if ((UnitGetType(EventUnitInventoryItem()) == "RiotShield") && (gv_quickTipSeen[EventPlayer()][4] == false)) {
        HelpPanelAddTip(PlayerGroupSingle(EventPlayer()), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/AC8166F0"), libNtve_ge_TipType_NewAbility), StringExternal("Param/Value/891E88A3"), StringExternal("Param/Value/005F3D6B"), "Assets\\Textures\\btn-techupgrade-terran-combatshield-color.dds");
        gv_quickTipSeen[EventPlayer()][4] = true;
    }
    else if ((UnitGetType(EventUnitInventoryItem()) == "Molotov") && (gv_quickTipSeen[EventPlayer()][5] == false)) {
        HelpPanelAddTip(PlayerGroupSingle(EventPlayer()), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/908A015B"), libNtve_ge_TipType_NewAbility), StringExternal("Param/Value/E3BC3BA0"), StringExternal("Param/Value/630E0B5B"), "Assets\\Textures\\btn-ability-terran-yamatogun-color.dds");
        gv_quickTipSeen[EventPlayer()][5] = true;
    }
    else if ((UnitGetType(EventUnitInventoryItem()) == "InfraredGoggles") && (gv_quickTipSeen[EventPlayer()][6] == false)) {
        HelpPanelAddTip(PlayerGroupSingle(EventPlayer()), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/90BAB567"), libNtve_ge_TipType_NewAbility), StringExternal("Param/Value/23BA38ED"), StringExternal("Param/Value/46496BF2"), "Assets\\Textures\\aicommand_detection1.dds");
        gv_quickTipSeen[EventPlayer()][6] = true;
    }
    else if ((UnitGetType(EventUnitInventoryItem()) == "Medkit") && (gv_quickTipSeen[EventPlayer()][7] == false)) {
        HelpPanelAddTip(PlayerGroupSingle(EventPlayer()), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/4111C351"), libNtve_ge_TipType_NewAbility), StringExternal("Param/Value/723E5338"), StringExternal("Param/Value/862745F9"), "Assets\\Textures\\btn-ability-terran-heal-color.dds");
        gv_quickTipSeen[EventPlayer()][7] = true;
    }
    else if ((UnitGetType(EventUnitInventoryItem()) == "Wrench") && (gv_quickTipSeen[EventPlayer()][8] == false)) {
        HelpPanelAddTip(PlayerGroupSingle(EventPlayer()), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/8901333E"), libNtve_ge_TipType_NewAbility), StringExternal("Param/Value/CF1321E8"), StringExternal("Param/Value/57308A62"), "Assets\\Textures\\btn-ability-terran-repair.dds");
        gv_quickTipSeen[EventPlayer()][8] = true;
    }
    else if ((UnitGetType(EventUnitInventoryItem()) == "Corpse") && (gv_quickTipSeen[EventPlayer()][9] == false)) {
        HelpPanelAddTip(PlayerGroupSingle(EventPlayer()), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/2FD632BC"), libNtve_ge_TipType_NewAbility), StringExternal("Param/Value/7F939EDA"), StringExternal("Param/Value/70A9B827"), "btn-ability-burn.dds");
        gv_quickTipSeen[EventPlayer()][9] = true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QuickTipsforItems_Init () {
    gt_QuickTipsforItems = TriggerCreate("gt_QuickTipsforItems_Func");
    TriggerAddEventUnitInventoryChange(gt_QuickTipsforItems, null, c_unitInventoryChangePicksUp, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Quick Tips for Effect
//--------------------------------------------------------------------------------------------------
bool gt_QuickTipsforEffect_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitDamageEffect() == "Oxygendamage") && (gv_quickTipSeen[EventPlayer()][11] == false)) {
        HelpPanelAddTip(PlayerGroupSingle(EventPlayer()), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/442EB8B6"), libNtve_ge_TipType_NewAbility), StringExternal("Param/Value/715BC27E"), StringExternal("Param/Value/F9231947"), "Assets\\Textures\\btn-ability-terran-tosh-mindblast.dds");
        gv_quickTipSeen[EventPlayer()][11] = true;
    }
    else if ((EventUnitDamageEffect() == "TheCold") && (gv_quickTipSeen[EventPlayer()][13] == false)) {
        HelpPanelAddTip(PlayerGroupSingle(EventPlayer()), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/6F821D84"), libNtve_ge_TipType_NewAbility), StringExternal("Param/Value/B11A78E7"), StringExternal("Param/Value/C490C6DB"), "Assets\\Textures\\marsara_dark_sandnormal.dds");
        gv_quickTipSeen[EventPlayer()][13] = true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QuickTipsforEffect_Init () {
    gt_QuickTipsforEffect = TriggerCreate("gt_QuickTipsforEffect_Func");
    TriggerAddEventUnitDamaged(gt_QuickTipsforEffect, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Quick Tips for Behavior
//--------------------------------------------------------------------------------------------------
bool gt_QuickTipsforBehavior_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitBehavior() == "MoraleBoost") && (gv_quickTipSeen[EventPlayer()][12] == false)) {
        HelpPanelAddTip(PlayerGroupSingle(EventPlayer()), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/FB78500A"), libNtve_ge_TipType_NewAbility), StringExternal("Param/Value/8E391B75"), StringExternal("Param/Value/7AA13A66"), "Assets\\Textures\\btn-ability-terran-tosh-mindblast.dds");
        gv_quickTipSeen[EventPlayer()][12] = true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QuickTipsforBehavior_Init () {
    gt_QuickTipsforBehavior = TriggerCreate("gt_QuickTipsforBehavior_Func");
    TriggerAddEventUnitBehaviorChange(gt_QuickTipsforBehavior, null, null, c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Evac Ship Enter
//--------------------------------------------------------------------------------------------------
bool gt_EvacShipEnter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitFilterMatch(EventUnit(), EventPlayer(), UnitFilter(0, 0, (1 << c_targetFilterBiological) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_eVACStatusDialog, PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_PauseUnit(EventUnit(), true);
    Wait(0.2, c_timeReal);
    if ((UnitIsAlive(EventUnit()) == true)) {
        libNtve_gf_PauseUnit(EventUnit(), false);
        UnitBehaviorRemove(EventUnit(), "ReducedVision", 1);
        if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(4)) == true)) {
            SoundPlay(SoundLink("Medivac_Unload", 0), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            UnitSetPosition(EventUnit(), PointFromId(660), false);
            CameraSetBounds(PlayerGroupSingle(EventPlayer()), RegionFromId(5), true);
            CameraSetBounds(PlayerGroupSingle(EventPlayer()), RegionEntireMap(), false);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EvacShipEnter_Init () {
    gt_EvacShipEnter = TriggerCreate("gt_EvacShipEnter_Func");
    TriggerEnable(gt_EvacShipEnter, false);
    TriggerAddEventUnitRegion(gt_EvacShipEnter, null, RegionFromId(4), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Divert Left
//--------------------------------------------------------------------------------------------------
bool gt_DivertLeft_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_launchedOff == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(gv_unit[EventPlayer()], RegionFromId(41)) == true))) {
            return false;
        }

        if (!(((UnitGetType(gv_unit[EventPlayer()]) == "Marine2") || (UnitGetType(gv_unit[EventPlayer()]) == "Marine3")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_heading -= 3.0;
    gv_speed = (gv_speed * 0.98);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DivertLeft_Init () {
    gt_DivertLeft = TriggerCreate("gt_DivertLeft_Func");
    TriggerAddEventKeyPressed(gt_DivertLeft, c_playerAny, c_keyI, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Divert Right
//--------------------------------------------------------------------------------------------------
bool gt_DivertRight_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_launchedOff == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(gv_unit[EventPlayer()], RegionFromId(41)) == true))) {
            return false;
        }

        if (!(((UnitGetType(gv_unit[EventPlayer()]) == "Marine2") || (UnitGetType(gv_unit[EventPlayer()]) == "Marine3")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_heading += 3.0;
    gv_speed = (gv_speed * 0.98);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DivertRight_Init () {
    gt_DivertRight = TriggerCreate("gt_DivertRight_Func");
    TriggerAddEventKeyPressed(gt_DivertRight, c_playerAny, c_keyP, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Divert Accelerate
//--------------------------------------------------------------------------------------------------
bool gt_DivertAccelerate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_launchedOff == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(gv_unit[EventPlayer()], RegionFromId(41)) == true))) {
            return false;
        }

        if (!(((UnitGetType(gv_unit[EventPlayer()]) == "Marine2") || (UnitGetType(gv_unit[EventPlayer()]) == "Marine3")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_acceleration += 0.01;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DivertAccelerate_Init () {
    gt_DivertAccelerate = TriggerCreate("gt_DivertAccelerate_Func");
    TriggerAddEventKeyPressed(gt_DivertAccelerate, c_playerAny, c_keyO, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Quit Appear
//--------------------------------------------------------------------------------------------------
bool gt_QuitAppear_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1440, 1080, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(0,0,0), c_triggerBlendModeNormal);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1440, 1080, c_anchorCenter, 0, 0, StringToText(""), "the-thing-2011.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 1200, 200, c_anchorTop, 0, 100, (StringExternal("Param/Value/95B34EE6") + (PlayerName(EventPlayer()) + StringExternal("Param/Value/55895F7C"))), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize64Bold", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 1200, 200, c_anchorBottom, 0, 160, StringExternal("Param/Value/F0964C91"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize32Bold", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 1200, 200, c_anchorBottom, 0, 100, StringExternal("Param/Value/2D77A8B0"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize40", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 800, 200, c_anchorBottom, 0, 0, gf_QuitTip(RandomInt(1, 33)), Color(RandomFixed(0.0, 100.0), RandomFixed(0.0, 100.0), RandomFixed(0.0, 100.0)), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize28", PlayerGroupAll());
    DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(EventPlayer()), true);
    Wait(1.0, c_timeReal);
    DialogDestroy(DialogLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QuitAppear_Init () {
    gt_QuitAppear = TriggerCreate("gt_QuitAppear_Func");
    TriggerAddEventPlayerLeft(gt_QuitAppear, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warning Dialog
//--------------------------------------------------------------------------------------------------
bool gt_WarningDialog_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(800, 350, c_anchorCenter, 0, 0, true);
    gv_warning = DialogLastCreated();
    DialogSetTitle(gv_warning, StringExternal("Param/Value/8840F60E"));
    libNtve_gf_CreateDialogItemLabel(gv_warning, 725, 320, c_anchorCenter, 0, 0, StringExternal("Param/Value/C121A5AB"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize24Bold", PlayerGroupAll());
    gv_warningItems[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_warning, 225, 50, c_anchorBottom, 0, 30, StringToText(""), StringExternal("Param/Value/D083AF1B"), "");
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_warningItems[1] = DialogControlLastCreated();
    DialogSetVisible(gv_warning, PlayerGroupAll(), false);
    DialogSetRenderPriority(gv_warning, 999);
    libNtve_gf_SetDialogItemRenderPriority(gv_warningItems[0], 999, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(gv_warningItems[1], 999, PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarningDialog_Init () {
    gt_WarningDialog = TriggerCreate("gt_WarningDialog_Func");
    TriggerAddEventMapInit(gt_WarningDialog);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warning Controls
//--------------------------------------------------------------------------------------------------
bool gt_WarningControls_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_warningItems[1])) {
        DialogSetVisible(gv_warning, PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_warningItems[1], PlayerGroupSingle(EventPlayer()), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarningControls_Init () {
    gt_WarningControls = TriggerCreate("gt_WarningControls_Func");
    TriggerAddEventDialogControl(gt_WarningControls, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warning Edit Dialog
//--------------------------------------------------------------------------------------------------
bool gt_WarningEditDialog_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(825, 200, c_anchorCenter, 0, 0, true);
    gv_warningEdit = DialogLastCreated();
    DialogSetTitle(gv_warningEdit, StringExternal("Param/Value/040178D1"));
    DialogControlCreate(gv_warningEdit, c_triggerControlTypeEditBox);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 750, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    gv_warningEditItems[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_warningEdit, 250, 50, c_anchorBottom, 0, 30, StringToText(""), StringExternal("Param/Value/6A94B54F"), "");
    gv_warningEditItems[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_warningEdit, 250, 50, c_anchorBottom, 0, 30, StringExternal("Param/Value/5F865321"), StringExternal("Param/Value/B7FC58AB"), "");
    gv_warningEditItems[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_warningEdit, 50, 50, c_anchorTopRight, 0, 0, StringExternal("Param/Value/12909A51"), StringToText(""), "");
    gv_warningEditItems[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_warningEdit, 200, 50, c_anchorBottom, -225, 30, StringToText(""), StringExternal("Param/Value/569889BA"), "");
    gv_warningEditItems[4] = DialogControlLastCreated();
    DialogSetVisible(gv_warningEdit, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarningEditDialog_Init () {
    gt_WarningEditDialog = TriggerCreate("gt_WarningEditDialog_Func");
    TriggerAddEventMapInit(gt_WarningEditDialog);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warning Edit Controls
//--------------------------------------------------------------------------------------------------
bool gt_WarningEditControls_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_warningEditItems[1])) {
        DialogSetVisible(gv_warningEdit, PlayerGroupSingle(EventPlayer()), false);
        gf_WarningSystem(gv_warningPlayer, StringToText(libNtve_gf_DialogItemEditValue(gv_warningEditItems[0], EventPlayer())));
        libNtve_gf_SetDialogItemEditorValue(gv_warningEditItems[0], "", PlayerGroupSingle(EventPlayer()));
    }

    if ((EventDialogControl() == gv_warningEditItems[2])) {
        DialogSetVisible(gv_warningEdit, PlayerGroupSingle(EventPlayer()), false);
        gf_AnnouncementSystem(StringToText(libNtve_gf_DialogItemEditValue(gv_warningEditItems[0], EventPlayer())));
        libNtve_gf_SetDialogItemEditorValue(gv_warningEditItems[0], "", PlayerGroupSingle(EventPlayer()));
    }

    if ((EventDialogControl() == gv_warningEditItems[3])) {
        DialogSetVisible(gv_warningEdit, PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemEditorValue(gv_warningEditItems[0], "", PlayerGroupSingle(EventPlayer()));
    }

    if ((EventDialogControl() == gv_warningEditItems[4])) {
        libNtve_gf_SetDialogItemEditorValue(gv_warningEditItems[0], (libNtve_gf_DialogItemEditValue(gv_warningEditItems[0], EventPlayer()) + "</n>"), PlayerGroupSingle(EventPlayer()));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarningEditControls_Init () {
    gt_WarningEditControls = TriggerCreate("gt_WarningEditControls_Func");
    TriggerAddEventDialogControl(gt_WarningEditControls, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Announce Dialog
//--------------------------------------------------------------------------------------------------
bool gt_AnnounceDialog_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(800, 350, c_anchorTop, 0, 15, true);
    gv_announce = DialogLastCreated();
    DialogSetTitle(gv_announce, StringExternal("Param/Value/119D8124"));
    libNtve_gf_CreateDialogItemLabel(gv_announce, 725, 320, c_anchorCenter, 0, 0, StringExternal("Param/Value/442D555C"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize24Bold", PlayerGroupAll());
    gv_announceItems[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_announce, 200, 50, c_anchorBottom, 0, 30, StringToText(""), StringExternal("Param/Value/3E802571"), "");
    gv_announceItems[1] = DialogControlLastCreated();
    DialogSetVisible(gv_announce, PlayerGroupAll(), false);
    DialogSetRenderPriority(gv_announce, 999);
    libNtve_gf_SetDialogItemRenderPriority(gv_announceItems[0], 999, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(gv_announceItems[1], 999, PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AnnounceDialog_Init () {
    gt_AnnounceDialog = TriggerCreate("gt_AnnounceDialog_Func");
    TriggerAddEventMapInit(gt_AnnounceDialog);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Announce Controls
//--------------------------------------------------------------------------------------------------
bool gt_AnnounceControls_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_announceItems[1])) {
        DialogSetVisible(gv_announce, PlayerGroupSingle(EventPlayer()), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AnnounceControls_Init () {
    gt_AnnounceControls = TriggerCreate("gt_AnnounceControls_Func");
    TriggerAddEventDialogControl(gt_AnnounceControls, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Votekick Press
//--------------------------------------------------------------------------------------------------
bool gt_VotekickPress_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoB8AA375D_g;
    int autoB8AA375D_var;

    // Conditions
    if (testConds) {
        if (!((gv_kicked[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoB8AA375D_g = PlayerGroupActive();
    autoB8AA375D_var = -1;
    while (true) {
        autoB8AA375D_var = PlayerGroupNextPlayer(autoB8AA375D_g, autoB8AA375D_var);
        if (autoB8AA375D_var < 0) { break; }
        if ((EventDialogControl() == gv_kickButton[autoB8AA375D_var]) && (DialogControlIsEnabled(EventDialogControl(), EventPlayer()) == true)) {
            DialogControlSetEnabled(EventDialogControl(), PlayerGroupSingle(EventPlayer()), false);
            libNtve_gf_SetDialogItemCurrentValue(EventDialogControl(), (FixedToInt(libNtve_gf_DialogItemValue(EventDialogControl(), EventPlayer())) - 1), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(EventDialogControl(), IntToText(FixedToInt(libNtve_gf_DialogItemValue(EventDialogControl(), EventPlayer()))), PlayerGroupAll());
            if ((libNtve_gf_DialogItemValue(EventDialogControl(), EventPlayer()) == 0.0)) {
                libNtve_gf_CreateDialogItemImage(DialogControlGetDialog(EventDialogControl()), 100, 100, c_anchorTop, 0, 15, StringToText(""), "Assets\\Textures\\btn-command-cancel.dds", c_triggerImageTypeNormal, false, Color(100.00, 0.00, 0.00), c_triggerBlendModeNormal);
                SoundPlay(SoundLink("UI_GenericError", 0), PlayerGroupAll(), 100.0, 0.0);
                gv_kicked[autoB8AA375D_var] = true;
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VotekickPress_Init () {
    gt_VotekickPress = TriggerCreate("gt_VotekickPress_Func");
    TriggerAddEventDialogControl(gt_VotekickPress, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Skip Pressed
//--------------------------------------------------------------------------------------------------
bool gt_SkipPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libNtve_gf_ValueFromDataTableDialogItem(true, "SkipButton")))) {
            return false;
        }

        if (!((gv_skipVoteRequired > 0))) {
            return false;
        }

        if (!((TimerGetRemaining(gv_startTimer) > 5.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogControlIsEnabled(EventDialogControl(), EventPlayer()) == true)) {
        DialogControlSetEnabled(EventDialogControl(), PlayerGroupSingle(EventPlayer()), false);
        gv_skipVoteRequired -= 1;
        if ((GameIsTestMap(false) == true)) {
            gv_skipVoteRequired = 0;
        }

        libNtve_gf_SetDialogItemCurrentValue(libNtve_gf_ValueFromDataTableDialogItem(true, "SkipButton"), IntToFixed(gv_skipVoteRequired), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libNtve_gf_ValueFromDataTableDialogItem(true, "SkipButton"), (StringExternal("Param/Value/83B3B81D") + IntToText(gv_skipVoteRequired) + StringExternal("Param/Value/B4F60487") + FixedToText(TimerGetRemaining(gv_startTimer), 0) + StringExternal("Param/Value/1BBFF844")), PlayerGroupAll());
        if ((gv_skipVoteRequired <= 0)) {
            TimerStart(gv_startTimer, 5.2, false, c_timeReal);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SkipPressed_Init () {
    gt_SkipPressed = TriggerCreate("gt_SkipPressed_Func");
    TriggerAddEventDialogControl(gt_SkipPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Refresh PlayerCard
//--------------------------------------------------------------------------------------------------
bool gt_RefreshPlayerCard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_ValueFromDataTableDialogItem(true, ("ProfileRefresh" + IntToString(EventPlayer()))) == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetEnabled(gv_playerCardStore[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
    gf_GeneratePlayerCard(EventPlayer(), true, false, 0, 0, c_anchorCenter, "profile");
    DialogSetVisible(gv_playerCardDialog[EventPlayer()], PlayerGroupAll(), false);
    DialogSetVisible(gv_playerCardDialog[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
    DialogSetPositionRelative(gv_playerCardDialog[EventPlayer()], c_anchorTopLeft, DataTableGetDialog(true, ("ProfileBox" + IntToString(EventPlayer()))), c_anchorTopRight, 0, 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RefreshPlayerCard_Init () {
    gt_RefreshPlayerCard = TriggerCreate("gt_RefreshPlayerCard_Func");
    TriggerAddEventDialogControl(gt_RefreshPlayerCard, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Save Profile Quote
//--------------------------------------------------------------------------------------------------
bool gt_SaveProfileQuote_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_ValueFromDataTableDialogItem(true, ("ProfileQuoteDone" + IntToString(EventPlayer()))) == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_pQProfileQuote[EventPlayer()] = libNtve_gf_DialogItemEditValue(libNtve_gf_ValueFromDataTableDialogItem(true, ("ProfileQuoteEditBox" + IntToString(EventPlayer()))), EventPlayer());
    if ((StringLength(gv_pQProfileQuote[EventPlayer()]) > 256)) {
        gv_pQProfileQuote[EventPlayer()] = StringSub(gv_pQProfileQuote[EventPlayer()], 1, 256);
    }

    DialogDestroy(DialogControlGetDialog(EventDialogControl()));
    gf_SaveStats(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SaveProfileQuote_Init () {
    gt_SaveProfileQuote = TriggerCreate("gt_SaveProfileQuote_Func");
    TriggerAddEventDialogControl(gt_SaveProfileQuote, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Click Tab
//--------------------------------------------------------------------------------------------------
bool gt_ClickTab_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto7ACBF1BD_ae = 10;
    int auto7ACBF1BD_var;

    // Conditions
    if (testConds) {
        if (!((DialogControlGetHeight(EventDialogControl(), EventPlayer()) == 20))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DialogItemValue(EventDialogControl(), EventPlayer()) == 222.0)) {
        if ((DialogGetHeight(DialogControlGetDialog(EventDialogControl())) == 30)) {
            DialogSetSize(DialogControlGetDialog(EventDialogControl()), DialogGetWidth(DialogControlGetDialog(EventDialogControl())), FixedToInt(libNtve_gf_DialogItemMaximumValue(EventDialogControl(), EventPlayer())));
        }
        else {
            DialogSetSize(DialogControlGetDialog(EventDialogControl()), DialogGetWidth(DialogControlGetDialog(EventDialogControl())), 30);
        }
    }

    if ((libNtve_gf_DialogItemValue(EventDialogControl(), EventPlayer()) == 333.0)) {
        if ((DialogGetTransparency(DialogControlGetDialog(EventDialogControl())) == 0.0)) {
            DialogSetTransparency(DialogControlGetDialog(EventDialogControl()), 75.0);
        }
        else {
            DialogSetTransparency(DialogControlGetDialog(EventDialogControl()), 0.0);
        }
    }

    if ((libNtve_gf_DialogItemValue(EventDialogControl(), EventPlayer()) == 444.0)) {
        PlayerGroupAdd(gv_movingDialogPlayers, EventPlayer());
        gv_movingDialog[EventPlayer()] = DialogControlGetDialog(EventDialogControl());
        DialogSetTransparency(DialogControlGetDialog(EventDialogControl()), 50.0);
        TriggerEnable(gt_TabMove, true);
    }

    if ((libNtve_gf_DialogItemValue(EventDialogControl(), EventPlayer()) == 111.0)) {
        DialogControlSetEnabled(EventDialogControl(), PlayerGroupSingle(EventPlayer()), false);
        auto7ACBF1BD_var = 1;
        for ( ; auto7ACBF1BD_var <= auto7ACBF1BD_ae; auto7ACBF1BD_var += 1 ) {
            DialogSetTransparency(DialogControlGetDialog(EventDialogControl()), (10 * auto7ACBF1BD_var));
            DialogSetSize(DialogControlGetDialog(EventDialogControl()), DialogGetWidth(DialogControlGetDialog(EventDialogControl())), FixedToInt((DialogGetHeight(DialogControlGetDialog(EventDialogControl())) * (0.01 * (100 - auto7ACBF1BD_var)))));
            Wait(0.01, c_timeReal);
        }
        if ((DialogControlGetDialog(EventDialogControl()) == DataTableGetDialog(true, ("ProfileBox" + IntToString(EventPlayer()))))) {
            DialogDestroy(gv_playerCardDialog[EventPlayer()]);
        }

        DialogDestroy(DialogControlGetDialog(EventDialogControl()));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ClickTab_Init () {
    gt_ClickTab = TriggerCreate("gt_ClickTab_Func");
    TriggerAddEventDialogControl(gt_ClickTab, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tab Move
//--------------------------------------------------------------------------------------------------
bool gt_TabMove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_xmultiplier;
    fixed lv_ymultiplier;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_movingDialogPlayers, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetPosition(gv_movingDialog[EventPlayer()], c_anchorTopLeft, EventMouseClickedPosXUI(), EventMouseClickedPosYUI());
    PlayerGroupRemove(gv_movingDialogPlayers, EventPlayer());
    DialogSetTransparency(gv_movingDialog[EventPlayer()], 0.0);
    if ((PlayerGroupCount(gv_movingDialogPlayers) == 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TabMove_Init () {
    gt_TabMove = TriggerCreate("gt_TabMove_Func");
    TriggerEnable(gt_TabMove, false);
    TriggerAddEventMouseClicked(gt_TabMove, c_playerAny, c_mouseButtonLeft, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open Box
//--------------------------------------------------------------------------------------------------
bool gt_OpenBox_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_ValueFromDataTableDialogItem(true, ("RestoreStatsButton" + IntToString(EventPlayer()))) == EventDialogControl())) {
        gf_LoadBackupStats(EventPlayer());
    }
    else if ((DialogControlGetDialog(EventDialogControl()) == gv_settingsContainerDialog)) {
        gf_GenerateVicOS(EventPlayer());
    }
    else if ((libNtve_gf_ValueFromDataTableDialogItem(true, ("SettingsButton" + IntToString(EventPlayer()))) == EventDialogControl())) {
        gf_GenerateSettingsBox(EventPlayer());
    }
    else if ((libNtve_gf_ValueFromDataTableDialogItem(true, ("ProfileButton" + IntToString(EventPlayer()))) == EventDialogControl())) {
        gf_GenerateProfileBox(EventPlayer());
    }
    else if ((libNtve_gf_ValueFromDataTableDialogItem(true, ("MarketButton" + IntToString(EventPlayer()))) == EventDialogControl())) {
        gf_GenerateProfileBox(EventPlayer());
    }
    else if ((libNtve_gf_ValueFromDataTableDialogItem(true, ("ProfileQuoteButton" + IntToString(EventPlayer()))) == EventDialogControl())) {
        gf_GenerateProfileQuoteBox(EventPlayer());
    }
    else if ((libNtve_gf_ValueFromDataTableDialogItem(true, ("SaveButton" + IntToString(EventPlayer()))) == EventDialogControl())) {
        DialogControlSetEnabled(libNtve_gf_ValueFromDataTableDialogItem(true, ("SaveButton" + IntToString(EventPlayer()))), PlayerGroupAll(), false);
        gf_SaveStats(EventPlayer());
        Wait(10.0, c_timeReal);
        DialogControlSetEnabled(libNtve_gf_ValueFromDataTableDialogItem(true, ("SaveButton" + IntToString(EventPlayer()))), PlayerGroupAll(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OpenBox_Init () {
    gt_OpenBox = TriggerCreate("gt_OpenBox_Func");
    TriggerAddEventDialogControl(gt_OpenBox, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pick Up Item Key
//--------------------------------------------------------------------------------------------------
bool gt_PickUpItemKey_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_itemsaround;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_itemsaround = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_keyboardMovingPlayers, EventPlayer()) == true))) {
            return false;
        }

        if (!((EventKeyPressed() == gv_keyboardMovement[EventPlayer()].lv_pickupKey))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itemsaround = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(gv_unit[EventPlayer()]), 0.5), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitIssueOrder(gv_unit[EventPlayer()], OrderTargetingUnit(null, UnitGroupUnit(lv_itemsaround, RandomInt(1, UnitGroupCount(lv_itemsaround, c_unitCountAlive)))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PickUpItemKey_Init () {
    gt_PickUpItemKey = TriggerCreate("gt_PickUpItemKey_Func");
    TriggerAddEventKeyPressed(gt_PickUpItemKey, c_playerAny, c_keyNone, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Keyboard Pressed
//--------------------------------------------------------------------------------------------------
bool gt_KeyboardPressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto2F106C07_val;

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_keyboardMovingPlayers, EventPlayer()) == true))) {
            return false;
        }

        if (!(((EventKeyPressed() == gv_keyboardMovement[EventPlayer()].lv_downKey) || (EventKeyPressed() == gv_keyboardMovement[EventPlayer()].lv_leftKey) || (EventKeyPressed() == gv_keyboardMovement[EventPlayer()].lv_rightKey) || (EventKeyPressed() == gv_keyboardMovement[EventPlayer()].lv_upKey)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto2F106C07_val = EventKeyPressed();
    if (auto2F106C07_val == gv_keyboardMovement[EventPlayer()].lv_upKey) {
        if ((gv_silentHillControlScheme[EventPlayer()] == true)) {
            gv_moving[EventPlayer()][5] = true;
        }
        else {
            gv_moving[EventPlayer()][1] = true;
        }
    }
    else if (auto2F106C07_val == gv_keyboardMovement[EventPlayer()].lv_leftKey) {
        if ((gv_silentHillControlScheme[EventPlayer()] == true)) {
            gv_moving[EventPlayer()][6] = true;
        }
        else {
            gv_moving[EventPlayer()][2] = true;
        }
    }
    else if (auto2F106C07_val == gv_keyboardMovement[EventPlayer()].lv_downKey) {
        if ((gv_silentHillControlScheme[EventPlayer()] == true)) {
            gv_moving[EventPlayer()][7] = true;
        }
        else {
            gv_moving[EventPlayer()][3] = true;
        }
    }
    else if (auto2F106C07_val == gv_keyboardMovement[EventPlayer()].lv_rightKey) {
        if ((gv_silentHillControlScheme[EventPlayer()] == true)) {
            gv_moving[EventPlayer()][8] = true;
        }
        else {
            gv_moving[EventPlayer()][4] = true;
        }
    }
    else {
    }
    if ((gv_alreadyRunning[EventPlayer()] == false)) {
        gf_Movement(EventPlayer(), gv_unit[EventPlayer()]);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KeyboardPressed_Init () {
    gt_KeyboardPressed = TriggerCreate("gt_KeyboardPressed_Func");
    TriggerAddEventKeyPressed(gt_KeyboardPressed, c_playerAny, c_keyNone, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Keyboard Unpressed
//--------------------------------------------------------------------------------------------------
bool gt_KeyboardUnpressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoE62A8585_val;

    // Conditions
    if (testConds) {
        if (!(((EventKeyPressed() == gv_keyboardMovement[EventPlayer()].lv_downKey) || (EventKeyPressed() == gv_keyboardMovement[EventPlayer()].lv_leftKey) || (EventKeyPressed() == gv_keyboardMovement[EventPlayer()].lv_rightKey) || (EventKeyPressed() == gv_keyboardMovement[EventPlayer()].lv_upKey)))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(gv_keyboardMovingPlayers, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoE62A8585_val = EventKeyPressed();
    if (autoE62A8585_val == gv_keyboardMovement[EventPlayer()].lv_upKey) {
        if ((gv_silentHillControlScheme[EventPlayer()] == true)) {
            gv_moving[EventPlayer()][5] = false;
        }
        else {
            gv_moving[EventPlayer()][1] = false;
        }
    }
    else if (autoE62A8585_val == gv_keyboardMovement[EventPlayer()].lv_leftKey) {
        if ((gv_silentHillControlScheme[EventPlayer()] == true)) {
            gv_moving[EventPlayer()][6] = false;
        }
        else {
            gv_moving[EventPlayer()][2] = false;
        }
    }
    else if (autoE62A8585_val == gv_keyboardMovement[EventPlayer()].lv_downKey) {
        if ((gv_silentHillControlScheme[EventPlayer()] == true)) {
            gv_moving[EventPlayer()][7] = false;
        }
        else {
            gv_moving[EventPlayer()][3] = false;
        }
    }
    else if (autoE62A8585_val == gv_keyboardMovement[EventPlayer()].lv_rightKey) {
        if ((gv_silentHillControlScheme[EventPlayer()] == true)) {
            gv_moving[EventPlayer()][8] = false;
        }
        else {
            gv_moving[EventPlayer()][4] = false;
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KeyboardUnpressed_Init () {
    gt_KeyboardUnpressed = TriggerCreate("gt_KeyboardUnpressed_Func");
    TriggerAddEventKeyPressed(gt_KeyboardUnpressed, c_playerAny, c_keyNone, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set Keys Pressed
//--------------------------------------------------------------------------------------------------
bool gt_SetKeysPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dialogWidth;
    int lv_dialogHeight;
    int lv_xMinSeparation;
    int lv_buttonXSize;
    int lv_buttonYSize;
    int lv_labelYSize;
    int lv_buttonInitialYOffset;
    int lv_textInitialYOffset;
    int lv_secondColumnOffset;
    string lv_identifier;
    int lv_y;
    int lv_x;

    // Automatic Variable Declarations
    int autoC02C81AB_val;

    // Variable Initialization
    lv_dialogWidth = 120;
    lv_dialogHeight = 400;
    lv_xMinSeparation = 10;
    lv_buttonXSize = 100;
    lv_buttonYSize = 50;
    lv_labelYSize = 25;
    lv_buttonInitialYOffset = 25;
    lv_textInitialYOffset = 40;
    lv_secondColumnOffset = 250;
    lv_identifier = ("SetKeys" + IntToString(EventPlayer()));

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_keyboardMovementButton) || (((EventDialogControl() == libNtve_gf_ValueFromDataTableDialogItem(true, ("Upkey" + IntToString(EventPlayer())))) || (EventDialogControl() == libNtve_gf_ValueFromDataTableDialogItem(true, ("Rightkey" + IntToString(EventPlayer())))) || (EventDialogControl() == libNtve_gf_ValueFromDataTableDialogItem(true, ("Downkey" + IntToString(EventPlayer())))) || (EventDialogControl() == libNtve_gf_ValueFromDataTableDialogItem(true, ("Pickupkey" + IntToString(EventPlayer())))) || (EventDialogControl() == libNtve_gf_ValueFromDataTableDialogItem(true, ("Leftkey" + IntToString(EventPlayer()))))) && (PlayerGroupHasPlayer(gv_settingKeys, EventPlayer()) == false))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoC02C81AB_val = EventDialogControl();
    if (autoC02C81AB_val == libNtve_gf_ValueFromDataTableDialogItem(true, ("Upkey" + IntToString(EventPlayer())))) {
        PlayerGroupAdd(gv_settingKeys, EventPlayer());
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText(""), PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturated(EventDialogControl(), true, PlayerGroupAll());
        gv_keyboardMovement[EventPlayer()].lv_up = true;
        TriggerEnable(gt_SetKeys, true);
    }
    else if (autoC02C81AB_val == libNtve_gf_ValueFromDataTableDialogItem(true, ("Downkey" + IntToString(EventPlayer())))) {
        PlayerGroupAdd(gv_settingKeys, EventPlayer());
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText(""), PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturated(EventDialogControl(), true, PlayerGroupAll());
        gv_keyboardMovement[EventPlayer()].lv_down = true;
        TriggerEnable(gt_SetKeys, true);
    }
    else if (autoC02C81AB_val == libNtve_gf_ValueFromDataTableDialogItem(true, ("Leftkey" + IntToString(EventPlayer())))) {
        PlayerGroupAdd(gv_settingKeys, EventPlayer());
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText(""), PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturated(EventDialogControl(), true, PlayerGroupAll());
        gv_keyboardMovement[EventPlayer()].lv_left = true;
        TriggerEnable(gt_SetKeys, true);
    }
    else if (autoC02C81AB_val == libNtve_gf_ValueFromDataTableDialogItem(true, ("Rightkey" + IntToString(EventPlayer())))) {
        PlayerGroupAdd(gv_settingKeys, EventPlayer());
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText(""), PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturated(EventDialogControl(), true, PlayerGroupAll());
        gv_keyboardMovement[EventPlayer()].lv_right = true;
        TriggerEnable(gt_SetKeys, true);
    }
    else if (autoC02C81AB_val == libNtve_gf_ValueFromDataTableDialogItem(true, ("Pickupkey" + IntToString(EventPlayer())))) {
        PlayerGroupAdd(gv_settingKeys, EventPlayer());
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText(""), PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturated(EventDialogControl(), true, PlayerGroupAll());
        gv_keyboardMovement[EventPlayer()].lv_pickup = true;
        TriggerEnable(gt_SetKeys, true);
    }
    else if (autoC02C81AB_val == gv_keyboardMovementButton) {
        DialogDestroy(DataTableGetDialog(true, lv_identifier));
        DialogCreate(lv_dialogWidth, lv_dialogHeight, c_anchorCenter, ((DialogGetOffsetX(DialogControlGetDialog(EventDialogControl())) + (DialogGetWidth(DialogControlGetDialog(EventDialogControl())) + ((lv_dialogWidth / 2) + 50))) / 2), ((DialogGetOffsetY(DialogControlGetDialog(EventDialogControl())) + 20) / 2), true);
        DataTableSetDialog(true, lv_identifier, DialogLastCreated());
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
        DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(EventPlayer()), true);
        DialogSetImageVisible(DialogLastCreated(), false);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_buttonXSize, lv_labelYSize, c_anchorTopLeft, lv_xMinSeparation, (lv_buttonInitialYOffset + ((lv_labelYSize * lv_x) + (lv_buttonYSize * lv_y))), StringExternal("Param/Value/06E6FD93"), Color(0,0,0), false, 2.0);
        lv_x += 1;
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_buttonXSize, lv_buttonYSize);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_xMinSeparation, (lv_buttonInitialYOffset + ((lv_labelYSize * lv_x) + (lv_buttonYSize * lv_y))));
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(gf_Keytostring(gv_keyboardMovement[EventPlayer()].lv_upKey)), PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(100.00, 0.00, 0.00), PlayerGroupAll());
        libNtve_gf_SaveDataTableValueDialogItem(true, ("Upkey" + IntToString(EventPlayer())), DialogControlLastCreated());
        lv_y += 1;
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_buttonXSize, lv_labelYSize, c_anchorTopLeft, lv_xMinSeparation, (lv_buttonInitialYOffset + ((lv_labelYSize * lv_x) + (lv_buttonYSize * lv_y))), StringExternal("Param/Value/F569B710"), Color(0,0,0), false, 2.0);
        lv_x += 1;
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_buttonXSize, lv_buttonYSize);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_xMinSeparation, (lv_buttonInitialYOffset + ((lv_labelYSize * lv_x) + (lv_buttonYSize * lv_y))));
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(gf_Keytostring(gv_keyboardMovement[EventPlayer()].lv_downKey)), PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(100.00, 0.00, 0.00), PlayerGroupAll());
        libNtve_gf_SaveDataTableValueDialogItem(true, ("Downkey" + IntToString(EventPlayer())), DialogControlLastCreated());
        lv_y += 1;
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_buttonXSize, lv_labelYSize, c_anchorTopLeft, lv_xMinSeparation, (lv_buttonInitialYOffset + ((lv_labelYSize * lv_x) + (lv_buttonYSize * lv_y))), StringExternal("Param/Value/5C728463"), Color(0,0,0), false, 2.0);
        lv_x += 1;
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_buttonXSize, lv_buttonYSize);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_xMinSeparation, (lv_buttonInitialYOffset + ((lv_labelYSize * lv_x) + (lv_buttonYSize * lv_y))));
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(gf_Keytostring(gv_keyboardMovement[EventPlayer()].lv_leftKey)), PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(100.00, 0.00, 0.00), PlayerGroupAll());
        libNtve_gf_SaveDataTableValueDialogItem(true, ("Leftkey" + IntToString(EventPlayer())), DialogControlLastCreated());
        lv_y += 1;
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_buttonXSize, lv_labelYSize, c_anchorTopLeft, lv_xMinSeparation, (lv_buttonInitialYOffset + ((lv_labelYSize * lv_x) + (lv_buttonYSize * lv_y))), StringExternal("Param/Value/0CA47D42"), Color(0,0,0), false, 2.0);
        lv_x += 1;
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_buttonXSize, lv_buttonYSize);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_xMinSeparation, (lv_buttonInitialYOffset + ((lv_labelYSize * lv_x) + (lv_buttonYSize * lv_y))));
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(gf_Keytostring(gv_keyboardMovement[EventPlayer()].lv_rightKey)), PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(100.00, 0.00, 0.00), PlayerGroupAll());
        libNtve_gf_SaveDataTableValueDialogItem(true, ("Rightkey" + IntToString(EventPlayer())), DialogControlLastCreated());
        lv_y += 1;
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_buttonXSize, lv_labelYSize, c_anchorTopLeft, lv_xMinSeparation, (lv_buttonInitialYOffset + ((lv_labelYSize * lv_x) + (lv_buttonYSize * lv_y))), StringExternal("Param/Value/DDF21DB8"), Color(0,0,0), false, 2.0);
        lv_x += 1;
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_buttonXSize, lv_buttonYSize);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_xMinSeparation, (lv_buttonInitialYOffset + ((lv_labelYSize * lv_x) + (lv_buttonYSize * lv_y))));
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(gf_Keytostring(gv_keyboardMovement[EventPlayer()].lv_pickupKey)), PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(100.00, 0.00, 0.00), PlayerGroupAll());
        libNtve_gf_SaveDataTableValueDialogItem(true, ("Pickupkey" + IntToString(EventPlayer())), DialogControlLastCreated());
        lv_y += 1;
        DialogSetSize(DialogLastCreated(), lv_dialogWidth, ((lv_buttonInitialYOffset + ((lv_labelYSize * lv_x) + (lv_buttonYSize * lv_y))) + 10));
        gf_GenerateWindowTab(DialogLastCreated(), true, true, true, true, 5, 5, c_anchorTopLeft, c_anchorTopRight, StringExternal("Param/Value/2988DFF1"));
        gf_GenerateWindowUI(DialogLastCreated(), Color(100.00, 100.00, 100.00), Color(9.80, 9.80, 9.80));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetKeysPressed_Init () {
    gt_SetKeysPressed = TriggerCreate("gt_SetKeysPressed_Func");
    TriggerAddEventDialogControl(gt_SetKeysPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set Keys
//--------------------------------------------------------------------------------------------------
bool gt_SetKeys_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_settingKeys, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_keyboardMovement[EventPlayer()].lv_up == true)) {
        PlayerGroupRemove(gv_settingKeys, EventPlayer());
        if ((PlayerGroupCount(gv_settingKeys) == 0)) {
            TriggerEnable(TriggerGetCurrent(), false);
        }

        libNtve_gf_SetDialogItemDesaturated(libNtve_gf_ValueFromDataTableDialogItem(true, ("Upkey" + IntToString(EventPlayer()))), false, PlayerGroupAll());
        if ((gv_keyboardMovement[EventPlayer()].lv_downKey != EventKeyPressed()) && (gv_keyboardMovement[EventPlayer()].lv_leftKey != EventKeyPressed()) && (gv_keyboardMovement[EventPlayer()].lv_rightKey != EventKeyPressed()) && (gv_keyboardMovement[EventPlayer()].lv_pickupKey != EventKeyPressed())) {
            libNtve_gf_SetDialogItemText(libNtve_gf_ValueFromDataTableDialogItem(true, ("Upkey" + IntToString(EventPlayer()))), StringToText(gf_Keytostring(EventKeyPressed())), PlayerGroupAll());
            gv_keyboardMovement[EventPlayer()].lv_upKey = EventKeyPressed();
            gv_keyboardMovement[EventPlayer()].lv_up = false;
            BankValueSetFromString(gv_settingsBank[EventPlayer()], "Controls", "Upkey", gf_Keytostring(EventKeyPressed()));
            BankSave(gv_settingsBank[EventPlayer()]);
        }
        else {
            libNtve_gf_SetDialogItemText(libNtve_gf_ValueFromDataTableDialogItem(true, ("Upkey" + IntToString(EventPlayer()))), StringToText(gf_Keytostring(c_keyNone)), PlayerGroupAll());
            gv_keyboardMovement[EventPlayer()].lv_upKey = c_keyNone;
            gv_keyboardMovement[EventPlayer()].lv_up = false;
            BankValueSetFromString(gv_settingsBank[EventPlayer()], "Controls", "Upkey", gf_Keytostring(c_keyNone));
            BankSave(gv_settingsBank[EventPlayer()]);
        }
    }
    else if ((gv_keyboardMovement[EventPlayer()].lv_down == true)) {
        PlayerGroupRemove(gv_settingKeys, EventPlayer());
        if ((PlayerGroupCount(gv_settingKeys) == 0)) {
            TriggerEnable(TriggerGetCurrent(), false);
        }

        libNtve_gf_SetDialogItemDesaturated(libNtve_gf_ValueFromDataTableDialogItem(true, ("Downkey" + IntToString(EventPlayer()))), false, PlayerGroupAll());
        if ((gv_keyboardMovement[EventPlayer()].lv_upKey != EventKeyPressed()) && (gv_keyboardMovement[EventPlayer()].lv_leftKey != EventKeyPressed()) && (gv_keyboardMovement[EventPlayer()].lv_rightKey != EventKeyPressed()) && (gv_keyboardMovement[EventPlayer()].lv_pickupKey != EventKeyPressed())) {
            libNtve_gf_SetDialogItemText(libNtve_gf_ValueFromDataTableDialogItem(true, ("Downkey" + IntToString(EventPlayer()))), StringToText(gf_Keytostring(EventKeyPressed())), PlayerGroupAll());
            gv_keyboardMovement[EventPlayer()].lv_downKey = EventKeyPressed();
            gv_keyboardMovement[EventPlayer()].lv_down = false;
            BankValueSetFromString(gv_settingsBank[EventPlayer()], "Controls", "Downkey", gf_Keytostring(EventKeyPressed()));
            BankSave(gv_settingsBank[EventPlayer()]);
        }
        else {
            libNtve_gf_SetDialogItemText(libNtve_gf_ValueFromDataTableDialogItem(true, ("Downkey" + IntToString(EventPlayer()))), StringToText(gf_Keytostring(c_keyNone)), PlayerGroupAll());
            gv_keyboardMovement[EventPlayer()].lv_downKey = c_keyNone;
            gv_keyboardMovement[EventPlayer()].lv_down = false;
            BankValueSetFromString(gv_settingsBank[EventPlayer()], "Controls", "Downkey", gf_Keytostring(c_keyNone));
            BankSave(gv_settingsBank[EventPlayer()]);
        }
    }
    else if ((gv_keyboardMovement[EventPlayer()].lv_left == true)) {
        PlayerGroupRemove(gv_settingKeys, EventPlayer());
        if ((PlayerGroupCount(gv_settingKeys) == 0)) {
            TriggerEnable(TriggerGetCurrent(), false);
        }

        libNtve_gf_SetDialogItemDesaturated(libNtve_gf_ValueFromDataTableDialogItem(true, ("Leftkey" + IntToString(EventPlayer()))), false, PlayerGroupAll());
        if ((gv_keyboardMovement[EventPlayer()].lv_downKey != EventKeyPressed()) && (gv_keyboardMovement[EventPlayer()].lv_upKey != EventKeyPressed()) && (gv_keyboardMovement[EventPlayer()].lv_rightKey != EventKeyPressed()) && (gv_keyboardMovement[EventPlayer()].lv_pickupKey != EventKeyPressed())) {
            libNtve_gf_SetDialogItemText(libNtve_gf_ValueFromDataTableDialogItem(true, ("Leftkey" + IntToString(EventPlayer()))), StringToText(gf_Keytostring(EventKeyPressed())), PlayerGroupAll());
            gv_keyboardMovement[EventPlayer()].lv_leftKey = EventKeyPressed();
            gv_keyboardMovement[EventPlayer()].lv_left = false;
            BankValueSetFromString(gv_settingsBank[EventPlayer()], "Controls", "Leftkey", gf_Keytostring(EventKeyPressed()));
            BankSave(gv_settingsBank[EventPlayer()]);
        }
        else {
            libNtve_gf_SetDialogItemText(libNtve_gf_ValueFromDataTableDialogItem(true, ("Leftkey" + IntToString(EventPlayer()))), StringToText(gf_Keytostring(c_keyNone)), PlayerGroupAll());
            gv_keyboardMovement[EventPlayer()].lv_leftKey = c_keyNone;
            gv_keyboardMovement[EventPlayer()].lv_left = false;
            BankValueSetFromString(gv_settingsBank[EventPlayer()], "Controls", "Leftkey", gf_Keytostring(c_keyNone));
            BankSave(gv_settingsBank[EventPlayer()]);
        }
    }
    else if ((gv_keyboardMovement[EventPlayer()].lv_right == true)) {
        PlayerGroupRemove(gv_settingKeys, EventPlayer());
        if ((PlayerGroupCount(gv_settingKeys) == 0)) {
            TriggerEnable(TriggerGetCurrent(), false);
        }

        libNtve_gf_SetDialogItemDesaturated(libNtve_gf_ValueFromDataTableDialogItem(true, ("Rightkey" + IntToString(EventPlayer()))), false, PlayerGroupAll());
        if ((gv_keyboardMovement[EventPlayer()].lv_downKey != EventKeyPressed()) && (gv_keyboardMovement[EventPlayer()].lv_leftKey != EventKeyPressed()) && (gv_keyboardMovement[EventPlayer()].lv_upKey != EventKeyPressed()) && (gv_keyboardMovement[EventPlayer()].lv_pickupKey != EventKeyPressed())) {
            libNtve_gf_SetDialogItemText(libNtve_gf_ValueFromDataTableDialogItem(true, ("Rightkey" + IntToString(EventPlayer()))), StringToText(gf_Keytostring(EventKeyPressed())), PlayerGroupAll());
            gv_keyboardMovement[EventPlayer()].lv_rightKey = EventKeyPressed();
            gv_keyboardMovement[EventPlayer()].lv_right = false;
            BankValueSetFromString(gv_settingsBank[EventPlayer()], "Controls", "Rightkey", gf_Keytostring(EventKeyPressed()));
            BankSave(gv_settingsBank[EventPlayer()]);
        }
        else {
            libNtve_gf_SetDialogItemText(libNtve_gf_ValueFromDataTableDialogItem(true, ("Rightkey" + IntToString(EventPlayer()))), StringToText(gf_Keytostring(c_keyNone)), PlayerGroupAll());
            gv_keyboardMovement[EventPlayer()].lv_rightKey = c_keyNone;
            gv_keyboardMovement[EventPlayer()].lv_right = false;
            BankValueSetFromString(gv_settingsBank[EventPlayer()], "Controls", "Rightkey", gf_Keytostring(c_keyNone));
            BankSave(gv_settingsBank[EventPlayer()]);
        }
    }
    else if ((gv_keyboardMovement[EventPlayer()].lv_pickup == true)) {
        PlayerGroupRemove(gv_settingKeys, EventPlayer());
        if ((PlayerGroupCount(gv_settingKeys) == 0)) {
            TriggerEnable(TriggerGetCurrent(), false);
        }

        libNtve_gf_SetDialogItemDesaturated(libNtve_gf_ValueFromDataTableDialogItem(true, ("Pickupkey" + IntToString(EventPlayer()))), false, PlayerGroupAll());
        if ((gv_keyboardMovement[EventPlayer()].lv_downKey != EventKeyPressed()) && (gv_keyboardMovement[EventPlayer()].lv_leftKey != EventKeyPressed()) && (gv_keyboardMovement[EventPlayer()].lv_rightKey != EventKeyPressed()) && (gv_keyboardMovement[EventPlayer()].lv_upKey != EventKeyPressed())) {
            libNtve_gf_SetDialogItemText(libNtve_gf_ValueFromDataTableDialogItem(true, ("Pickupkey" + IntToString(EventPlayer()))), StringToText(gf_Keytostring(EventKeyPressed())), PlayerGroupAll());
            gv_keyboardMovement[EventPlayer()].lv_pickupKey = EventKeyPressed();
            gv_keyboardMovement[EventPlayer()].lv_pickup = false;
            BankValueSetFromString(gv_settingsBank[EventPlayer()], "Controls", "Pickupkey", gf_Keytostring(EventKeyPressed()));
            BankSave(gv_settingsBank[EventPlayer()]);
        }
        else {
            libNtve_gf_SetDialogItemText(libNtve_gf_ValueFromDataTableDialogItem(true, ("Pickupkey" + IntToString(EventPlayer()))), StringToText(gf_Keytostring(c_keyNone)), PlayerGroupAll());
            gv_keyboardMovement[EventPlayer()].lv_pickupKey = c_keyNone;
            gv_keyboardMovement[EventPlayer()].lv_pickup = false;
            BankValueSetFromString(gv_settingsBank[EventPlayer()], "Controls", "Pickupkey", gf_Keytostring(c_keyNone));
            BankSave(gv_settingsBank[EventPlayer()]);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetKeys_Init () {
    gt_SetKeys = TriggerCreate("gt_SetKeys_Func");
    TriggerEnable(gt_SetKeys, false);
    TriggerAddEventKeyPressed(gt_SetKeys, c_playerAny, c_keyNone, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select Lighting Visuals
//--------------------------------------------------------------------------------------------------
bool gt_SelectLightingVisuals_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((gv_visualsSettingsDropList[EventPlayer()] == EventDialogControl()) || (gv_visualsChatDropList == EventDialogControl())))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerSetLighting(EventPlayer(), gf_GetLightingfromIndex(DialogControlGetSelectedItem(EventDialogControl(), EventPlayer())), 2.0);
    gv_visualsSelection[EventPlayer()] = DialogControlGetSelectedItem(EventDialogControl(), EventPlayer());
    DialogControlSelectItem(gv_visualsChatDropList, PlayerGroupSingle(EventPlayer()), DialogControlGetSelectedItem(EventDialogControl(), EventPlayer()));
    BankValueSetFromInt(gv_settingsBank[EventPlayer()], "Visuals", "Lighting", gv_visualsSelection[EventPlayer()]);
    BankSave(gv_settingsBank[EventPlayer()]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectLightingVisuals_Init () {
    gt_SelectLightingVisuals = TriggerCreate("gt_SelectLightingVisuals_Func");
    TriggerAddEventDialogControl(gt_SelectLightingVisuals, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Color Tags Always Show Override
//--------------------------------------------------------------------------------------------------
bool gt_ColorTagsAlwaysShowOverride_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoD20F958C_g;
    int autoD20F958C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoD20F958C_g = PlayerGroupActive();
    autoD20F958C_var = -1;
    while (true) {
        autoD20F958C_var = PlayerGroupNextPlayer(autoD20F958C_g, autoD20F958C_var);
        if (autoD20F958C_var < 0) { break; }
        gv_colorTagAlwaysShow[autoD20F958C_var] = true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ColorTagsAlwaysShowOverride_Init () {
    gt_ColorTagsAlwaysShowOverride = TriggerCreate("gt_ColorTagsAlwaysShowOverride_Func");
    TriggerAddEventMapInit(gt_ColorTagsAlwaysShowOverride);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Silent Hill Scheme
//--------------------------------------------------------------------------------------------------
bool gt_ToggleSilentHillScheme_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_silentHillControlSchemeCheckBox[EventPlayer()]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), EventPlayer()) == true)) {
        gv_silentHillControlScheme[EventPlayer()] = true;
        gv_moving[EventPlayer()][1] = false;
        gv_moving[EventPlayer()][2] = false;
        gv_moving[EventPlayer()][3] = false;
        gv_moving[EventPlayer()][4] = false;
        if ((gv_cameraFollowsFacing[EventPlayer()] == true)) {
            gf_RotateCamera(EventPlayer(), UnitGetFacing(gv_unit[EventPlayer()]), 1.5);
        }

        DialogControlSetEnabled(gv_cameraFollowsFacingCheckBox[EventPlayer()], PlayerGroupAll(), true);
    }
    else {
        gv_silentHillControlScheme[EventPlayer()] = false;
        gv_moving[EventPlayer()][5] = false;
        gv_moving[EventPlayer()][6] = false;
        gv_moving[EventPlayer()][7] = false;
        gv_moving[EventPlayer()][8] = false;
        if ((gv_cameraFollowsFacing[EventPlayer()] == true)) {
            gf_RestoreRotation(EventPlayer());
        }

        libNtve_gf_SetDialogItemChecked(gv_cameraFollowsFacingCheckBox[EventPlayer()], false, PlayerGroupAll());
        DialogControlSetEnabled(gv_cameraFollowsFacingCheckBox[EventPlayer()], PlayerGroupAll(), false);
    }
    BankValueSetFromFlag(gv_settingsBank[EventPlayer()], "Controls", "SilentHillScheme", gv_silentHillControlScheme[EventPlayer()]);
    BankSave(gv_settingsBank[EventPlayer()]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleSilentHillScheme_Init () {
    gt_ToggleSilentHillScheme = TriggerCreate("gt_ToggleSilentHillScheme_Func");
    TriggerAddEventDialogControl(gt_ToggleSilentHillScheme, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Camera Follows Facing
//--------------------------------------------------------------------------------------------------
bool gt_ToggleCameraFollowsFacing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_cameraFollowsFacingCheckBox[EventPlayer()]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), EventPlayer()) == true)) {
        gv_cameraFollowsFacing[EventPlayer()] = true;
        gf_RotateCamera(EventPlayer(), UnitGetFacing(gv_unit[EventPlayer()]), 1.5);
    }
    else {
        gv_cameraFollowsFacing[EventPlayer()] = false;
        gf_RestoreRotation(EventPlayer());
    }
    BankValueSetFromFlag(gv_settingsBank[EventPlayer()], "Visuals", "FollowFacing", gv_cameraFollowsFacing[EventPlayer()]);
    BankSave(gv_settingsBank[EventPlayer()]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleCameraFollowsFacing_Init () {
    gt_ToggleCameraFollowsFacing = TriggerCreate("gt_ToggleCameraFollowsFacing_Func");
    TriggerAddEventDialogControl(gt_ToggleCameraFollowsFacing, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Keyboard Movement
//--------------------------------------------------------------------------------------------------
bool gt_ToggleKeyboardMovement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_keyboardMovementCheckBox[EventPlayer()]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), EventPlayer()) == true)) {
        DialogControlSetEnabled(gv_silentHillControlSchemeCheckBox[EventPlayer()], PlayerGroupAll(), true);
        PlayerGroupAdd(gv_keyboardMovingPlayers, EventPlayer());
        BankValueSetFromFlag(gv_settingsBank[EventPlayer()], "Controls", "KeyboardMovement", true);
    }
    else {
        gf_RestoreRotation(EventPlayer());
        gv_moving[EventPlayer()][1] = false;
        gv_moving[EventPlayer()][2] = false;
        gv_moving[EventPlayer()][3] = false;
        gv_moving[EventPlayer()][4] = false;
        gv_moving[EventPlayer()][5] = false;
        gv_moving[EventPlayer()][6] = false;
        gv_moving[EventPlayer()][7] = false;
        gv_moving[EventPlayer()][8] = false;
        libNtve_gf_SetDialogItemChecked(gv_silentHillControlSchemeCheckBox[EventPlayer()], false, PlayerGroupAll());
        DialogControlSetEnabled(gv_silentHillControlSchemeCheckBox[EventPlayer()], PlayerGroupAll(), false);
        PlayerGroupRemove(gv_keyboardMovingPlayers, EventPlayer());
        BankValueSetFromFlag(gv_settingsBank[EventPlayer()], "Controls", "KeyboardMovement", false);
    }
    BankSave(gv_settingsBank[EventPlayer()]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleKeyboardMovement_Init () {
    gt_ToggleKeyboardMovement = TriggerCreate("gt_ToggleKeyboardMovement_Func");
    TriggerAddEventDialogControl(gt_ToggleKeyboardMovement, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PlayerCard Store
//--------------------------------------------------------------------------------------------------
bool gt_PlayerCardStore_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_x;

    // Automatic Variable Declarations
    const int autoD8231FA5_ae = 98;
    int autoD8231FA5_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_playerCardStore[EventPlayer()] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogControlGetDialog(EventDialogControl()) == gv_playerCardDialog[EventPlayer()])) {
        DialogControlSetVisible(gv_playerCardStore[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
    }
    else {
        DialogControlSetEnabled(gv_playerCardStore[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
    }
    DialogControlSetVisible(gv_playerCardStats[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_playerCardPortrait[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
    DialogControlCreate(gv_playerCardDialog[EventPlayer()], c_triggerControlTypePortrait);
    gv_cardStorePortrait[EventPlayer()] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 210, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 12);
    PortraitSetOffscreen(PortraitLastCreated(), true);
    PortraitSetBorderVisible(PortraitGetTriggerControl(DialogControlLastCreated()), false);
    DialogControlCreate(gv_playerCardDialog[EventPlayer()], c_triggerControlTypeListBox);
    gv_cardStorePurchasedList[EventPlayer()] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 170);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, 0, 25);
    autoD8231FA5_var = 1;
    for ( ; autoD8231FA5_var <= autoD8231FA5_ae; autoD8231FA5_var += 1 ) {
        if ((gv_portraitPaid[EventPlayer()][autoD8231FA5_var] == true)) {
            DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringToText(StringReplaceWord(gv_portrait[autoD8231FA5_var].lv_portraitPath, "Portrait", "", c_stringReplaceAll, c_stringCase)));
            lv_x += 1;
            gv_cardStoreListItemIndex[EventPlayer()][lv_x] = autoD8231FA5_var;
        }
        else {
            lv_x += 1;
            gv_cardStoreListItemIndex[EventPlayer()][lv_x] = autoD8231FA5_var;
            DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringToText(StringReplaceWord(gv_portrait[autoD8231FA5_var].lv_portraitPath, "Portrait", "", c_stringReplaceAll, c_stringCase)));
        }
    }
    PortraitSetModelAnim(PortraitGetTriggerControl(gv_cardStorePortrait[EventPlayer()]), (gv_portrait[gv_pCPortraitCurrent[EventPlayer()]].lv_portraitPath), "Stand", c_animFlagPlayForever, false);
    libNtve_gf_CreateDialogItemButton(gv_playerCardDialog[EventPlayer()], 220, 30, c_anchorBottom, 0, 5, StringToText(""), StringExternal("Param/Value/D27217B9"), "");
    gv_cardStoreBuy[EventPlayer()] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemText(gv_playerCardName[EventPlayer()], (IntToText(gv_vPVicPoints[EventPlayer()]) + StringExternal("Param/Value/DF5C8C9C")), PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerCardStore_Init () {
    gt_PlayerCardStore = TriggerCreate("gt_PlayerCardStore_Func");
    TriggerAddEventDialogControl(gt_PlayerCardStore, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PlayerCard Purchase
//--------------------------------------------------------------------------------------------------
bool gt_PlayerCardPurchase_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_cardStoreBuy[EventPlayer()] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_portraitPaid[EventPlayer()][DialogControlGetSelectedItem(gv_cardStorePurchasedList[EventPlayer()], EventPlayer())] == true)) {
        gv_pCPortraitCurrent[EventPlayer()] = DialogControlGetSelectedItem(gv_cardStorePurchasedList[EventPlayer()], EventPlayer());
        libNtve_gf_SetDialogItemText(gv_cardStoreBuy[EventPlayer()], StringExternal("Param/Value/32BD98D5"), PlayerGroupAll());
        SoundPlay(SoundLink("TUI_ArmoryConsolePurchase", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        gf_SaveStats(EventPlayer());
    }
    else {
        if ((gv_vPVicPoints[EventPlayer()] >= gv_portrait[DialogControlGetSelectedItem(gv_cardStorePurchasedList[EventPlayer()], EventPlayer())].lv_portraitCost)) {
            gv_portraitPaid[EventPlayer()][DialogControlGetSelectedItem(gv_cardStorePurchasedList[EventPlayer()], EventPlayer())] = true;
            gv_pCPortraitCurrent[EventPlayer()] = DialogControlGetSelectedItem(gv_cardStorePurchasedList[EventPlayer()], EventPlayer());
            gv_vPVicPoints[EventPlayer()] = (gv_vPVicPoints[EventPlayer()] - gv_portrait[DialogControlGetSelectedItem(gv_cardStorePurchasedList[EventPlayer()], EventPlayer())].lv_portraitCost);
            libNtve_gf_SetDialogItemText(gv_cardStoreBuy[EventPlayer()], StringExternal("Param/Value/40B2CAEE"), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(gv_playerCardName[EventPlayer()], (IntToText(gv_vPVicPoints[EventPlayer()]) + StringExternal("Param/Value/CBAF7AF4")), PlayerGroupSingle(EventPlayer()));
            SoundPlay(SoundLink("TUI_ArmoryConsolePurchase", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            gf_SaveStats(EventPlayer());
        }
        else {
            SoundPlay(SoundLink("UI_GenericError", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerCardPurchase_Init () {
    gt_PlayerCardPurchase = TriggerCreate("gt_PlayerCardPurchase_Func");
    TriggerAddEventDialogControl(gt_PlayerCardPurchase, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PlayerCard Browse Store
//--------------------------------------------------------------------------------------------------
bool gt_PlayerCardBrowseStore_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_cardStorePurchasedList[EventPlayer()] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PortraitSetModelAnim(PortraitGetTriggerControl(gv_cardStorePortrait[EventPlayer()]), (gv_portrait[DialogControlGetSelectedItem(EventDialogControl(), EventPlayer())].lv_portraitPath), "Stand", c_animFlagPlayForever, false);
    if ((gv_portraitPaid[EventPlayer()][DialogControlGetSelectedItem(EventDialogControl(), EventPlayer())] == false)) {
        libNtve_gf_SetDialogItemText(gv_cardStoreBuy[EventPlayer()], (IntToText(gv_portrait[DialogControlGetSelectedItem(EventDialogControl(), EventPlayer())].lv_portraitCost) + StringExternal("Param/Value/3D5A953B")), PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemText(gv_cardStoreBuy[EventPlayer()], StringExternal("Param/Value/A59E7252"), PlayerGroupAll());
    }
    if ((gv_pCPortraitCurrent[EventPlayer()] == DialogControlGetSelectedItem(EventDialogControl(), EventPlayer()))) {
        libNtve_gf_SetDialogItemText(gv_cardStoreBuy[EventPlayer()], StringExternal("Param/Value/77B3991E"), PlayerGroupAll());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerCardBrowseStore_Init () {
    gt_PlayerCardBrowseStore = TriggerCreate("gt_PlayerCardBrowseStore_Func");
    TriggerAddEventDialogControl(gt_PlayerCardBrowseStore, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PlayerCard Record Stats
//--------------------------------------------------------------------------------------------------
bool gt_PlayerCardRecordStats_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_playerCardRecordStats[EventPlayer()] == EventDialogControl()))) {
            return false;
        }

        if (!((gv_enableSaving[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlDestroy(gv_playerCardRecordStats[EventPlayer()]);
    gv_enableSaving[EventPlayer()] = true;
    gf_SaveStats(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerCardRecordStats_Init () {
    gt_PlayerCardRecordStats = TriggerCreate("gt_PlayerCardRecordStats_Func");
    TriggerAddEventDialogControl(gt_PlayerCardRecordStats, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PlayerCard Selection
//--------------------------------------------------------------------------------------------------
bool gt_PlayerCardSelection_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto7DB803FB_g;
    int auto7DB803FB_var;

    // Conditions
    if (testConds) {
        if (!((gv_playerCardStats[EventPlayer()] == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto7DB803FB_g = gv_playing;
    auto7DB803FB_var = -1;
    while (true) {
        auto7DB803FB_var = PlayerGroupNextPlayer(auto7DB803FB_g, auto7DB803FB_var);
        if (auto7DB803FB_var < 0) { break; }
        DialogControlSelectItem(gv_playerCardStats[auto7DB803FB_var], PlayerGroupSingle(EventPlayer()), DialogControlGetSelectedItem(EventDialogControl(), EventPlayer()));
        DialogControlAddItem(gv_playerCardStats[auto7DB803FB_var], PlayerGroupSingle(EventPlayer()), StringToText(""));
        DialogControlRemoveItem(gv_playerCardStats[auto7DB803FB_var], PlayerGroupSingle(EventPlayer()), DialogControlGetItemCount(gv_playerCardStats[auto7DB803FB_var], EventPlayer()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerCardSelection_Init () {
    gt_PlayerCardSelection = TriggerCreate("gt_PlayerCardSelection_Func");
    TriggerEnable(gt_PlayerCardSelection, false);
    TriggerAddEventDialogControl(gt_PlayerCardSelection, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Global Visibility
//--------------------------------------------------------------------------------------------------
bool gt_GlobalVisibility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoA94C05E8_g;
    int autoA94C05E8_var;

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_dead, EventPlayer()) == true))) {
            return false;
        }

        if (!((DialogControlGetSelectedItem(gv_spectatorVisibilityDialogItem, EventPlayer()) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoA94C05E8_g = PlayerGroupAll();
    autoA94C05E8_var = -1;
    while (true) {
        autoA94C05E8_var = PlayerGroupNextPlayer(autoA94C05E8_g, autoA94C05E8_var);
        if (autoA94C05E8_var < 0) { break; }
        PlayerSetAlliance(autoA94C05E8_var, c_allianceIdVision, EventPlayer(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GlobalVisibility_Init () {
    gt_GlobalVisibility = TriggerCreate("gt_GlobalVisibility_Func");
    TriggerAddEventDialogControl(gt_GlobalVisibility, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Single Visibility
//--------------------------------------------------------------------------------------------------
bool gt_SingleVisibility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoC374FDD7_g;
    int autoC374FDD7_var;

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_dead, EventPlayer()) == true))) {
            return false;
        }

        if (!((DialogControlGetSelectedItem(gv_spectatorVisibilityDialogItem, EventPlayer()) == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoC374FDD7_g = PlayerGroupAll();
    autoC374FDD7_var = -1;
    while (true) {
        autoC374FDD7_var = PlayerGroupNextPlayer(autoC374FDD7_g, autoC374FDD7_var);
        if (autoC374FDD7_var < 0) { break; }
        PlayerSetAlliance(autoC374FDD7_var, c_allianceIdVision, EventPlayer(), false);
    }
    PlayerSetAlliance(gv_spectatingPlayer[EventPlayer()], c_allianceIdVision, EventPlayer(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SingleVisibility_Init () {
    gt_SingleVisibility = TriggerCreate("gt_SingleVisibility_Func");
    TriggerAddEventDialogControl(gt_SingleVisibility, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Selective Visibility
//--------------------------------------------------------------------------------------------------
bool gt_SelectiveVisibility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_dead, EventPlayer()) == true))) {
            return false;
        }

        if (!((DialogControlGetSelectedItem(gv_spectatorVisibilityDialogItem, EventPlayer()) == 3))) {
            return false;
        }

        if (!((gv_spectatingPlayer[EventPlayer()] != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerSetAlliance(gv_spectatingPlayer[EventPlayer()], c_allianceIdVision, EventPlayer(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectiveVisibility_Init () {
    gt_SelectiveVisibility = TriggerCreate("gt_SelectiveVisibility_Func");
    TriggerAddEventDialogControl(gt_SelectiveVisibility, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Marines Visibility
//--------------------------------------------------------------------------------------------------
bool gt_MarinesVisibility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto7EFC7F59_g;
    int auto7EFC7F59_var;
    playergroup autoB333F6B8_g;
    int autoB333F6B8_var;

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_dead, EventPlayer()) == true))) {
            return false;
        }

        if (!((DialogControlGetSelectedItem(gv_spectatorVisibilityDialogItem, EventPlayer()) == 4))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto7EFC7F59_g = PlayerGroupAll();
    auto7EFC7F59_var = -1;
    while (true) {
        auto7EFC7F59_var = PlayerGroupNextPlayer(auto7EFC7F59_g, auto7EFC7F59_var);
        if (auto7EFC7F59_var < 0) { break; }
        PlayerSetAlliance(auto7EFC7F59_var, c_allianceIdVision, EventPlayer(), false);
    }
    autoB333F6B8_g = gv_marines;
    autoB333F6B8_var = -1;
    while (true) {
        autoB333F6B8_var = PlayerGroupNextPlayer(autoB333F6B8_g, autoB333F6B8_var);
        if (autoB333F6B8_var < 0) { break; }
        PlayerSetAlliance(autoB333F6B8_var, c_allianceIdVision, EventPlayer(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarinesVisibility_Init () {
    gt_MarinesVisibility = TriggerCreate("gt_MarinesVisibility_Func");
    TriggerAddEventDialogControl(gt_MarinesVisibility, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Players Visibility
//--------------------------------------------------------------------------------------------------
bool gt_PlayersVisibility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto2DF24E11_g;
    int auto2DF24E11_var;
    playergroup auto00A05D8F_g;
    int auto00A05D8F_var;
    playergroup autoB49ACE38_g;
    int autoB49ACE38_var;

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_dead, EventPlayer()) == true))) {
            return false;
        }

        if (!((DialogControlGetSelectedItem(gv_spectatorVisibilityDialogItem, EventPlayer()) == 5))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto2DF24E11_g = PlayerGroupAll();
    auto2DF24E11_var = -1;
    while (true) {
        auto2DF24E11_var = PlayerGroupNextPlayer(auto2DF24E11_g, auto2DF24E11_var);
        if (auto2DF24E11_var < 0) { break; }
        PlayerSetAlliance(auto2DF24E11_var, c_allianceIdVision, EventPlayer(), false);
    }
    auto00A05D8F_g = gv_marines;
    auto00A05D8F_var = -1;
    while (true) {
        auto00A05D8F_var = PlayerGroupNextPlayer(auto00A05D8F_g, auto00A05D8F_var);
        if (auto00A05D8F_var < 0) { break; }
        PlayerSetAlliance(auto00A05D8F_var, c_allianceIdVision, EventPlayer(), true);
    }
    autoB49ACE38_g = gv_things;
    autoB49ACE38_var = -1;
    while (true) {
        autoB49ACE38_var = PlayerGroupNextPlayer(autoB49ACE38_g, autoB49ACE38_var);
        if (autoB49ACE38_var < 0) { break; }
        PlayerSetAlliance(autoB49ACE38_var, c_allianceIdVision, EventPlayer(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayersVisibility_Init () {
    gt_PlayersVisibility = TriggerCreate("gt_PlayersVisibility_Func");
    TriggerAddEventDialogControl(gt_PlayersVisibility, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spectate Click
//--------------------------------------------------------------------------------------------------
bool gt_SpectateClick_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto3022575D_g;
    int auto3022575D_var;

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_dead, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSelectItem(gv_spectatorFollowDialogItem, PlayerGroupSingle(EventPlayer()), 1);
    auto3022575D_g = PlayerGroupActive();
    auto3022575D_var = -1;
    while (true) {
        auto3022575D_var = PlayerGroupNextPlayer(auto3022575D_g, auto3022575D_var);
        if (auto3022575D_var < 0) { break; }
        if ((UnitIsAlive(gv_unit[auto3022575D_var]) == true)) {
            if ((DistanceBetweenPoints(UnitGetPosition(gv_unit[auto3022575D_var]), Point(EventMouseClickedPosXWorld(), EventMouseClickedPosYWorld())) < 1.0)) {
                DialogControlSelectItem(gv_spectatorFollowDialogItem, PlayerGroupSingle(EventPlayer()), gv_playerIndex[auto3022575D_var]);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpectateClick_Init () {
    gt_SpectateClick = TriggerCreate("gt_SpectateClick_Func");
    TriggerAddEventMouseClicked(gt_SpectateClick, c_playerAny, c_mouseButtonLeft, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spectate Left
//--------------------------------------------------------------------------------------------------
bool gt_SpectateLeft_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_dead, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogControlGetSelectedItem(gv_spectatorFollowDialogItem, EventPlayer()) == 1)) {
        DialogControlSelectItem(gv_spectatorFollowDialogItem, PlayerGroupSingle(EventPlayer()), DialogControlGetItemCount(gv_spectatorFollowDialogItem, EventPlayer()));
    }
    else {
        DialogControlSelectItem(gv_spectatorFollowDialogItem, PlayerGroupSingle(EventPlayer()), (DialogControlGetSelectedItem(gv_spectatorFollowDialogItem, EventPlayer()) - 1));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpectateLeft_Init () {
    gt_SpectateLeft = TriggerCreate("gt_SpectateLeft_Func");
    TriggerAddEventKeyPressed(gt_SpectateLeft, c_playerAny, c_keyLeft, true, c_keyModifierStateIgnore, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spectate Right
//--------------------------------------------------------------------------------------------------
bool gt_SpectateRight_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_dead, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogControlGetSelectedItem(gv_spectatorFollowDialogItem, EventPlayer()) == DialogControlGetItemCount(gv_spectatorFollowDialogItem, EventPlayer()))) {
        DialogControlSelectItem(gv_spectatorFollowDialogItem, PlayerGroupSingle(EventPlayer()), 1);
    }
    else {
        DialogControlSelectItem(gv_spectatorFollowDialogItem, PlayerGroupSingle(EventPlayer()), (DialogControlGetSelectedItem(gv_spectatorFollowDialogItem, EventPlayer()) + 1));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpectateRight_Init () {
    gt_SpectateRight = TriggerCreate("gt_SpectateRight_Func");
    TriggerAddEventKeyPressed(gt_SpectateRight, c_playerAny, c_keyRight, true, c_keyModifierStateIgnore, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spectate Select
//--------------------------------------------------------------------------------------------------
bool gt_SpectateSelect_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_spectatorFollowDialogItem == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogControlGetSelectedItem(gv_spectatorFollowDialogItem, EventPlayer()) != 1)) {
        CameraFollowUnitGroup(EventPlayer(), libNtve_gf_ConvertUnitToUnitGroup(gv_unit[gv_spectatingPlayer[EventPlayer()]]), false, false);
        gv_spectatingPlayer[EventPlayer()] = gv_spectatorIndex[DialogControlGetSelectedItem(EventDialogControl(), EventPlayer())];
        CameraPan(EventPlayer(), UnitGetPosition(gv_unit[gv_spectatingPlayer[EventPlayer()]]), 0.0, -1, 10.0, false);
        CameraFollowUnitGroup(EventPlayer(), libNtve_gf_ConvertUnitToUnitGroup(gv_unit[gv_spectatingPlayer[EventPlayer()]]), true, false);
        if ((PlayerGroupPlayer(gv_things, 1) == gv_spectatingPlayer[EventPlayer()])) {
            PlayerGroupAdd(gv_playersSpectatingThing, EventPlayer());
        }
        else {
            PlayerGroupRemove(gv_playersSpectatingThing, EventPlayer());
        }
        if ((DialogControlGetSelectedItem(gv_spectatorVisibilityDialogItem, EventPlayer()) == 2)) {
            DialogControlSelectItem(gv_spectatorVisibilityDialogItem, PlayerGroupSingle(EventPlayer()), 1);
            DialogControlSelectItem(gv_spectatorVisibilityDialogItem, PlayerGroupSingle(EventPlayer()), 2);
        }

        if ((DialogControlGetSelectedItem(gv_spectatorVisibilityDialogItem, EventPlayer()) == 3)) {
            DialogControlSelectItem(gv_spectatorVisibilityDialogItem, PlayerGroupSingle(EventPlayer()), 1);
            DialogControlSelectItem(gv_spectatorVisibilityDialogItem, PlayerGroupSingle(EventPlayer()), 3);
        }

    }
    else {
        CameraFollowUnitGroup(EventPlayer(), libNtve_gf_ConvertUnitToUnitGroup(gv_unit[gv_spectatingPlayer[EventPlayer()]]), false, false);
        PlayerGroupRemove(gv_playersSpectatingThing, EventPlayer());
        gv_spectatingPlayer[EventPlayer()] = 0;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpectateSelect_Init () {
    gt_SpectateSelect = TriggerCreate("gt_SpectateSelect_Func");
    TriggerAddEventDialogControl(gt_SpectateSelect, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Camera Rotate System
//--------------------------------------------------------------------------------------------------
bool gt_CameraRotateSystem_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_cameraFollowsFacing[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventKeyPressed() == c_keyRight)) {
        gv_currentRotation[EventPlayer()] = (gv_currentRotation[EventPlayer()] + 90.0);
        if ((gv_currentRotation[EventPlayer()] == 360.0)) {
            gv_currentRotation[EventPlayer()] = 0.0;
        }

        CameraSetValue(EventPlayer(), c_cameraValueYaw, gv_currentRotation[EventPlayer()], 1.0, -1, 10.0);
    }

    if ((EventKeyPressed() == c_keyLeft)) {
        gv_currentRotation[EventPlayer()] = (gv_currentRotation[EventPlayer()] - 90.0);
        if ((gv_currentRotation[EventPlayer()] == -90.0)) {
            gv_currentRotation[EventPlayer()] = 270.0;
        }

        CameraSetValue(EventPlayer(), c_cameraValueYaw, gv_currentRotation[EventPlayer()], 1.0, -1, 10.0);
    }

    if ((EventKeyPressed() == c_keyUp)) {
        CameraSetValue(EventPlayer(), c_cameraValuePitch, 90.0, 1.0, -1, 10.0);
    }

    if ((EventKeyPressed() == c_keyDown)) {
        CameraSetValue(EventPlayer(), c_cameraValuePitch, 56.0, 1.0, -1, 10.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CameraRotateSystem_Init () {
    gt_CameraRotateSystem = TriggerCreate("gt_CameraRotateSystem_Func");
    TriggerAddEventKeyPressed(gt_CameraRotateSystem, c_playerAny, c_keyLeft, true, c_keyModifierStateRequire, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(gt_CameraRotateSystem, c_playerAny, c_keyRight, true, c_keyModifierStateRequire, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(gt_CameraRotateSystem, c_playerAny, c_keyDown, true, c_keyModifierStateRequire, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(gt_CameraRotateSystem, c_playerAny, c_keyUp, true, c_keyModifierStateRequire, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit UI Select Update
//--------------------------------------------------------------------------------------------------
bool gt_UnitUISelectUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemMaximumValue(gv_unitBarItem[EventPlayer()][1], UnitGetPropertyFixed(gv_unit[EventPlayer()], c_unitPropLifeMax, c_unitPropCurrent), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemMinimumValue(gv_unitBarItem[EventPlayer()][1], 0.0, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemCurrentValue(gv_unitBarItem[EventPlayer()][1], UnitGetPropertyFixed(gv_unit[EventPlayer()], c_unitPropLife, c_unitPropCurrent), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemMaximumValue(gv_unitBarItem[EventPlayer()][2], UnitGetPropertyFixed(gv_unit[EventPlayer()], c_unitPropEnergyMax, c_unitPropCurrent), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemMinimumValue(gv_unitBarItem[EventPlayer()][2], 0.0, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemCurrentValue(gv_unitBarItem[EventPlayer()][2], UnitGetPropertyFixed(gv_unit[EventPlayer()], c_unitPropEnergy, c_unitPropCurrent), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_unitBarHealthDisplay[EventPlayer()], (IntToText(FixedToInt(UnitGetPropertyFixed(gv_unit[EventPlayer()], c_unitPropLife, c_unitPropCurrent))) + StringExternal("Param/Value/2447E5FB") + IntToText(FixedToInt(UnitGetPropertyFixed(gv_unit[EventPlayer()], c_unitPropLifeMax, c_unitPropCurrent)))), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitUISelectUpdate_Init () {
    gt_UnitUISelectUpdate = TriggerCreate("gt_UnitUISelectUpdate_Func");
    TriggerEnable(gt_UnitUISelectUpdate, false);
    TriggerAddEventUnitSelected(gt_UnitUISelectUpdate, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit UI Periodic Update
//--------------------------------------------------------------------------------------------------
bool gt_UnitUIPeriodicUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto85149481_g;
    int auto85149481_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto85149481_g = PlayerGroupActive();
    auto85149481_var = -1;
    while (true) {
        auto85149481_var = PlayerGroupNextPlayer(auto85149481_g, auto85149481_var);
        if (auto85149481_var < 0) { break; }
        libNtve_gf_SetDialogItemCurrentValue(gv_unitBarItem[auto85149481_var][1], UnitGetPropertyFixed(gv_unit[auto85149481_var], c_unitPropLife, c_unitPropCurrent), PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(gv_unitBarItem[auto85149481_var][1], Color((100.0 - UnitGetPropertyFixed(gv_unit[auto85149481_var], c_unitPropLifePercent, c_unitPropCurrent)), UnitGetPropertyFixed(gv_unit[auto85149481_var], c_unitPropLifePercent, c_unitPropCurrent), 0.0), PlayerGroupAll());
        libNtve_gf_SetDialogItemCurrentValue(gv_unitBarItem[auto85149481_var][2], UnitGetPropertyFixed(gv_unit[auto85149481_var], c_unitPropEnergy, c_unitPropCurrent), PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(gv_unitBarItem[auto85149481_var][2], Color((100.0 - UnitGetPropertyFixed(gv_unit[auto85149481_var], c_unitPropEnergyPercent, c_unitPropCurrent)), UnitGetPropertyFixed(gv_unit[auto85149481_var], c_unitPropEnergyPercent, c_unitPropCurrent), 0.0), PlayerGroupAll());
        libNtve_gf_SetDialogItemCurrentValue(gv_unitBarItem[auto85149481_var][3], PlayerGetPropertyInt(auto85149481_var, c_playerPropVespene), PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(gv_unitBarItem[auto85149481_var][3], Color((100.0 - ((PlayerGetPropertyInt(auto85149481_var, c_playerPropVespene) / 400.0) * 100.0)), ((PlayerGetPropertyInt(auto85149481_var, c_playerPropVespene) / 400.0) * 100.0), 0.0), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_unitBarHealthDisplay[auto85149481_var], (IntToText(FixedToInt(UnitGetPropertyFixed(gv_unit[auto85149481_var], c_unitPropLife, c_unitPropCurrent))) + StringExternal("Param/Value/DAF715D3") + IntToText(FixedToInt(UnitGetPropertyFixed(gv_unit[auto85149481_var], c_unitPropLifeMax, c_unitPropCurrent)))), PlayerGroupAll());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitUIPeriodicUpdate_Init () {
    gt_UnitUIPeriodicUpdate = TriggerCreate("gt_UnitUIPeriodicUpdate_Func");
    TriggerEnable(gt_UnitUIPeriodicUpdate, false);
    TriggerAddEventTimePeriodic(gt_UnitUIPeriodicUpdate, 1.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Health UI Instanteneous Update
//--------------------------------------------------------------------------------------------------
bool gt_UnitHealthUIInstanteneousUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemCurrentValue(gv_unitBarItem[EventPlayer()][1], UnitGetPropertyFixed(gv_unit[EventPlayer()], c_unitPropLife, c_unitPropCurrent), PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(gv_unitBarItem[EventPlayer()][1], UnitGetPropertyFixed(gv_unit[EventPlayer()], c_unitPropLifeMax, c_unitPropCurrent), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_unitBarItem[EventPlayer()][1], Color((100.0 - UnitGetPropertyFixed(gv_unit[EventPlayer()], c_unitPropLifePercent, c_unitPropCurrent)), UnitGetPropertyFixed(gv_unit[EventPlayer()], c_unitPropLifePercent, c_unitPropCurrent), 0.0), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_unitBarHealthDisplay[EventPlayer()], (IntToText(FixedToInt(UnitGetPropertyFixed(gv_unit[EventPlayer()], c_unitPropLife, c_unitPropCurrent))) + StringExternal("Param/Value/1E63585E") + IntToText(FixedToInt(UnitGetPropertyFixed(gv_unit[EventPlayer()], c_unitPropLifeMax, c_unitPropCurrent)))), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitHealthUIInstanteneousUpdate_Init () {
    gt_UnitHealthUIInstanteneousUpdate = TriggerCreate("gt_UnitHealthUIInstanteneousUpdate_Func");
    TriggerEnable(gt_UnitHealthUIInstanteneousUpdate, false);
    TriggerAddEventUnitDamaged(gt_UnitHealthUIInstanteneousUpdate, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Energy UI Instanteneous Update
//--------------------------------------------------------------------------------------------------
bool gt_UnitEnergyUIInstanteneousUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemCurrentValue(gv_unitBarItem[EventPlayer()][2], UnitGetPropertyFixed(gv_unit[EventPlayer()], c_unitPropEnergy, c_unitPropCurrent), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_unitBarItem[EventPlayer()][2], Color((100.0 - UnitGetPropertyFixed(gv_unit[EventPlayer()], c_unitPropEnergyPercent, c_unitPropCurrent)), UnitGetPropertyFixed(gv_unit[EventPlayer()], c_unitPropEnergyPercent, c_unitPropCurrent), 0.0), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitEnergyUIInstanteneousUpdate_Init () {
    gt_UnitEnergyUIInstanteneousUpdate = TriggerCreate("gt_UnitEnergyUIInstanteneousUpdate_Func");
    TriggerAddEventUnitAbility(gt_UnitEnergyUIInstanteneousUpdate, null, AbilityCommand("Stimpack", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Oxygen UI Instanteneous Update
//--------------------------------------------------------------------------------------------------
bool gt_UnitOxygenUIInstanteneousUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(gt_UnitUIPeriodicUpdate) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemCurrentValue(gv_unitBarItem[EventPlayer()][3], PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_unitBarItem[EventPlayer()][3], Color((100.0 - ((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) / 400.0) * 100.0)), ((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) / 400.0) * 100.0), 0.0), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitOxygenUIInstanteneousUpdate_Init () {
    gt_UnitOxygenUIInstanteneousUpdate = TriggerCreate("gt_UnitOxygenUIInstanteneousUpdate_Func");
    TriggerAddEventPlayerPropChange(gt_UnitOxygenUIInstanteneousUpdate, 1, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_UnitOxygenUIInstanteneousUpdate, 2, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_UnitOxygenUIInstanteneousUpdate, 3, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_UnitOxygenUIInstanteneousUpdate, 4, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_UnitOxygenUIInstanteneousUpdate, 5, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_UnitOxygenUIInstanteneousUpdate, 6, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_UnitOxygenUIInstanteneousUpdate, 7, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_UnitOxygenUIInstanteneousUpdate, 8, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_UnitOxygenUIInstanteneousUpdate, 9, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_UnitOxygenUIInstanteneousUpdate, 10, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_UnitOxygenUIInstanteneousUpdate, 11, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_UnitOxygenUIInstanteneousUpdate, 12, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_UnitOxygenUIInstanteneousUpdate, 13, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_UnitOxygenUIInstanteneousUpdate, 14, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_UnitOxygenUIInstanteneousUpdate, 15, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control Regen Thing
//--------------------------------------------------------------------------------------------------
bool gt_ControlRegenThing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(gv_unit[PlayerGroupPlayer(gv_things, 1)]) == "InfestedAbomination") || (UnitGetType(gv_unit[PlayerGroupPlayer(gv_things, 1)]) == "InfestedAbominationBurrowed")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((gv_control + 11) > 3200)) {
        gv_control = 3200;
    }
    else {
        gv_control += 11;
    }
    if ((gv_control < 0)) {
        gv_control = 0;
    }

    libNtve_gf_SetDialogItemCurrentValue(gv_unitBarItem[PlayerGroupPlayer(gv_things, 1)][4], gv_control, PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_unitBarItem[PlayerGroupPlayer(gv_things, 1)][4], Color((100.0 - (gv_control / 32.0)), (gv_control / 32.0), 0.0), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ControlRegenThing_Init () {
    gt_ControlRegenThing = TriggerCreate("gt_ControlRegenThing_Func");
    TriggerEnable(gt_ControlRegenThing, false);
    TriggerAddEventTimePeriodic(gt_ControlRegenThing, 1.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control Regen/Degen Marine
//--------------------------------------------------------------------------------------------------
bool gt_ControlRegenDegenMarine_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoF5B8CA52_g;
    int autoF5B8CA52_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(gv_unit[PlayerGroupPlayer(gv_things, 1)]) == "Marine2"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoF5B8CA52_g = gv_marines;
    autoF5B8CA52_var = -1;
    while (true) {
        autoF5B8CA52_var = PlayerGroupNextPlayer(autoF5B8CA52_g, autoF5B8CA52_var);
        if (autoF5B8CA52_var < 0) { break; }
        if ((libNtve_gf_UnitIsVisibleToPlayer(gv_unit[autoF5B8CA52_var], PlayerGroupPlayer(gv_things, 1)) == true) && (gv_control > 0)) {
            gv_control -= 3;
        }

    }
    if ((gv_control <= 1)) {
        TriggerExecute(gt_BTNTheThing, true, false);
    }

    if (((gv_control + 1) > 3200)) {
        gv_control = 3200;
    }
    else {
        gv_control -= 1;
    }
    libNtve_gf_SetDialogItemCurrentValue(gv_unitBarItem[PlayerGroupPlayer(gv_things, 1)][4], gv_control, PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_unitBarItem[PlayerGroupPlayer(gv_things, 1)][4], Color((100.0 - (gv_control / 10.0)), (gv_control / 10.0), 0.0), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ControlRegenDegenMarine_Init () {
    gt_ControlRegenDegenMarine = TriggerCreate("gt_ControlRegenDegenMarine_Func");
    TriggerEnable(gt_ControlRegenDegenMarine, false);
    TriggerAddEventTimePeriodic(gt_ControlRegenDegenMarine, 1.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ranking Selection
//--------------------------------------------------------------------------------------------------
bool gt_RankingSelection_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_rankingSelection == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogControlGetSelectedItem(EventDialogControl(), EventPlayer()) == 1)) {
        if ((gv_ranking[EventPlayer()] != 1) && (!(gf_Developers(EventPlayer())))) {
            DialogControlSelectItem(EventDialogControl(), PlayerGroupSingle(EventPlayer()), 2);
        }
        else {
            if (gf_Developers(EventPlayer())) {
                gf_SetRankingforPlayer(EventPlayer(), 1);
            }

        }
    }
    else {
        if (((DialogControlGetItemCount(EventDialogControl(), EventPlayer()) - DialogControlGetSelectedItem(EventDialogControl(), EventPlayer())) > 3) && (!(gf_Developers(EventPlayer())))) {
            DialogControlSelectItem(EventDialogControl(), PlayerGroupSingle(EventPlayer()), (DialogControlGetItemCount(EventDialogControl(), EventPlayer()) - 3));
        }
        else {
            gf_SetRankingforPlayer(EventPlayer(), DialogControlGetSelectedItem(EventDialogControl(), EventPlayer()));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RankingSelection_Init () {
    gt_RankingSelection = TriggerCreate("gt_RankingSelection_Func");
    TriggerAddEventDialogControl(gt_RankingSelection, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mouse In Unit Tag
//--------------------------------------------------------------------------------------------------
bool gt_MouseInUnitTag_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_colorTagAlwaysShow[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagShow(gv_unitTag[UnitGetOwner(EventUnit())], PlayerGroupSingle(EventPlayer()), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MouseInUnitTag_Init () {
    gt_MouseInUnitTag = TriggerCreate("gt_MouseInUnitTag_Func");
    TriggerAddEventUnitHighlight(gt_MouseInUnitTag, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mouse Out Unit Tag
//--------------------------------------------------------------------------------------------------
bool gt_MouseOutUnitTag_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_colorTagAlwaysShow[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagShow(gv_unitTag[UnitGetOwner(EventUnit())], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MouseOutUnitTag_Init () {
    gt_MouseOutUnitTag = TriggerCreate("gt_MouseOutUnitTag_Func");
    TriggerAddEventUnitHighlight(gt_MouseOutUnitTag, null, c_playerAny, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Global Chat
//--------------------------------------------------------------------------------------------------
bool gt_GlobalChat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_muted[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerGetExecCount(gt_InitialIntro) < 1)) {
        gf_GlobalChatUpdate((TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(0)) + StringExternal("Param/Value/482A93F8") + StringToText(EventChatMessage(false))));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GlobalChat_Init () {
    gt_GlobalChat = TriggerCreate("gt_GlobalChat_Func");
    TriggerAddEventChatMessage(gt_GlobalChat, c_playerAny, "", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Text Speak
//--------------------------------------------------------------------------------------------------
bool gt_TextSpeak_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_chatNumber;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_unit[EventPlayer()]) == true))) {
            return false;
        }

        if (!((gv_muted[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((PlayerGroupHasPlayer(gv_marines, EventPlayer()) == true) || (PlayerGroupHasPlayer(gv_things, EventPlayer()) == true))) {
        UIDisplayMessage(gv_dead, c_messageAreaError, TextWithColor(TextReplaceWord(StringToText(EventChatMessage(false)), StringExternal("Param/Value/1FEF3DED"), StringToText(""), c_stringReplaceAll, c_stringCase), libNtve_gf_ConvertPlayerColorToColor(gv_thePlayerColor[EventPlayer()])));
    }

    gv_chatTextCount[EventPlayer()] = (gv_chatTextCount[EventPlayer()] + 1);
    lv_chatNumber = gv_chatTextCount[EventPlayer()];
    gv_chatText[EventPlayer()] = EventChatMessage(false);
    gv_chatText[EventPlayer()] = StringReplaceWord(gv_chatText[EventPlayer()], "<", "", c_stringReplaceAll, c_stringNoCase);
    gv_chatText[EventPlayer()] = StringReplaceWord(gv_chatText[EventPlayer()], "c val", "", c_stringReplaceAll, c_stringNoCase);
    gv_chatText[EventPlayer()] = StringReplaceWord(gv_chatText[EventPlayer()], "s val", "", c_stringReplaceAll, c_stringNoCase);
    TextTagAttachToUnit(gv_chatTextLabel[EventPlayer()], gv_unit[EventPlayer()], 1.0);
    TextTagSetText(gv_chatTextLabel[EventPlayer()], StringToText(gv_chatText[EventPlayer()]));
    TextTagSetFontSize(gv_chatTextLabel[EventPlayer()], 24);
    gf_DeadAliveChatUpdate((TextWithColor(gv_unitTagText[EventPlayer()], libNtve_gf_ConvertPlayerColorToColor(gv_thePlayerColor[EventPlayer()])) + StringExternal("Param/Value/5D18BE73") + StringToText(EventChatMessage(false))));
    Wait(((IntToFixed(StringLength(gv_chatText[EventPlayer()])) * 0.25) + 3.0), c_timeReal);
    if ((lv_chatNumber == gv_chatTextCount[EventPlayer()])) {
        if ((StringSub(gv_chatText[EventPlayer()], (StringLength(gv_chatText[EventPlayer()]) - 3), StringLength(gv_chatText[EventPlayer()])) != "...")) {
            gv_chatText[EventPlayer()] = "";
            TextTagSetText(gv_chatTextLabel[EventPlayer()], StringToText(""));
        }
        else {
            gv_chatText[EventPlayer()] = StringSub(gv_chatText[EventPlayer()], 1, (StringLength(gv_chatText[EventPlayer()]) - 3));
            TextTagSetText(gv_chatTextLabel[EventPlayer()], StringToText(gv_chatText[EventPlayer()]));
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TextSpeak_Init () {
    gt_TextSpeak = TriggerCreate("gt_TextSpeak_Func");
    TriggerAddEventChatMessage(gt_TextSpeak, c_playerAny, "", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Speak Indicator
//--------------------------------------------------------------------------------------------------
bool gt_SpeakIndicator_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_chatNumber;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_chatText[EventPlayer()] != "..."))) {
            return false;
        }

        if (!((StringSub(gv_chatText[EventPlayer()], (StringLength(gv_chatText[EventPlayer()]) - 2), StringLength(gv_chatText[EventPlayer()])) != "..."))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_chatNumber = gv_chatTextCount[EventPlayer()];
    gv_chatText[EventPlayer()] = (gv_chatText[EventPlayer()] + "...");
    TextTagSetText(gv_chatTextLabel[EventPlayer()], StringToText(gv_chatText[EventPlayer()]));
    Wait(5.0, c_timeReal);
    if ((lv_chatNumber == gv_chatTextCount[EventPlayer()])) {
        gv_chatText[EventPlayer()] = StringSub(gv_chatText[EventPlayer()], 1, (StringLength(gv_chatText[EventPlayer()]) - 3));
        TextTagSetText(gv_chatTextLabel[EventPlayer()], StringToText(gv_chatText[EventPlayer()]));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpeakIndicator_Init () {
    gt_SpeakIndicator = TriggerCreate("gt_SpeakIndicator_Func");
    TriggerAddEventKeyPressed(gt_SpeakIndicator, c_playerAny, c_keyEnter, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dead Speak
//--------------------------------------------------------------------------------------------------
bool gt_DeadSpeak_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((StringSub(EventChatMessage(false), 1, 1) != " "))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_muted[EventPlayer()] == false) && (PlayerGroupHasPlayer(gv_dead, EventPlayer()) == true)) {
        gf_DeadChatUpdate((TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(gv_thePlayerColor[EventPlayer()])) + StringExternal("Param/Value/DCE03BE3") + StringToText(EventChatMessage(false))), EventChatMessage(false), EventPlayer());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeadSpeak_Init () {
    gt_DeadSpeak = TriggerCreate("gt_DeadSpeak_Func");
    TriggerAddEventChatMessage(gt_DeadSpeak, c_playerAny, "", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dead Lounge Toggle AutofadeFollow
//--------------------------------------------------------------------------------------------------
bool gt_DeadLoungeToggleAutofadeFollow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_deadLoungeAutoFadeFollow))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), EventPlayer()) == true)) {
        DialogControlFadeTransparency(gv_deadChatItem, PlayerGroupSingle(EventPlayer()), 0.0, 0.0);
        DialogControlFadeTransparency(gv_deadAliveChatItem, PlayerGroupSingle(EventPlayer()), 0.0, 0.0);
    }
    else {
        DialogControlClearSelectedItem(gv_deadChatItem, PlayerGroupSingle(EventPlayer()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeadLoungeToggleAutofadeFollow_Init () {
    gt_DeadLoungeToggleAutofadeFollow = TriggerCreate("gt_DeadLoungeToggleAutofadeFollow_Func");
    TriggerAddEventDialogControl(gt_DeadLoungeToggleAutofadeFollow, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dead Dialog Enter
//--------------------------------------------------------------------------------------------------
bool gt_DeadDialogEnter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_deadChatItem))) {
            return false;
        }

        if (!((libNtve_gf_DialogItemIsChecked(gv_deadLoungeAutoFadeFollow, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlFadeTransparency(gv_deadChatItem, PlayerGroupSingle(EventPlayer()), 0.0, 0.0);
    DialogControlFadeTransparency(gv_deadChatOnlineItem, PlayerGroupSingle(EventPlayer()), 0.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeadDialogEnter_Init () {
    gt_DeadDialogEnter = TriggerCreate("gt_DeadDialogEnter_Func");
    TriggerAddEventDialogControl(gt_DeadDialogEnter, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dead Dialog Exit
//--------------------------------------------------------------------------------------------------
bool gt_DeadDialogExit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_deadChatItem))) {
            return false;
        }

        if (!((libNtve_gf_DialogItemIsChecked(gv_deadLoungeAutoFadeFollow, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlFadeTransparency(gv_deadChatItem, PlayerGroupSingle(EventPlayer()), 1.0, 50.0);
    DialogControlFadeTransparency(gv_deadChatOnlineItem, PlayerGroupSingle(EventPlayer()), 1.0, 50.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeadDialogExit_Init () {
    gt_DeadDialogExit = TriggerCreate("gt_DeadDialogExit_Func");
    TriggerAddEventDialogControl(gt_DeadDialogExit, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dead Alive Dialog Enter
//--------------------------------------------------------------------------------------------------
bool gt_DeadAliveDialogEnter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_deadAliveChatItem))) {
            return false;
        }

        if (!((libNtve_gf_DialogItemIsChecked(gv_deadLoungeAutoFadeFollow, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlFadeTransparency(gv_deadAliveChatItem, PlayerGroupSingle(EventPlayer()), 0.0, 0.0);
    DialogControlFadeTransparency(gv_deadAliveChatOnlineItem, PlayerGroupSingle(EventPlayer()), 0.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeadAliveDialogEnter_Init () {
    gt_DeadAliveDialogEnter = TriggerCreate("gt_DeadAliveDialogEnter_Func");
    TriggerAddEventDialogControl(gt_DeadAliveDialogEnter, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dead Alive Dialog Exit
//--------------------------------------------------------------------------------------------------
bool gt_DeadAliveDialogExit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_deadAliveChatItem))) {
            return false;
        }

        if (!((libNtve_gf_DialogItemIsChecked(gv_deadLoungeAutoFadeFollow, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlFadeTransparency(gv_deadAliveChatItem, PlayerGroupSingle(EventPlayer()), 1.0, 50.0);
    DialogControlFadeTransparency(gv_deadAliveChatOnlineItem, PlayerGroupSingle(EventPlayer()), 1.0, 50.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeadAliveDialogExit_Init () {
    gt_DeadAliveDialogExit = TriggerCreate("gt_DeadAliveDialogExit_Func");
    TriggerAddEventDialogControl(gt_DeadAliveDialogExit, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dead Dialog Selection
//--------------------------------------------------------------------------------------------------
bool gt_DeadDialogSelection_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoFD1D3F17_val;

    // Conditions
    if (testConds) {
        if (!((gv_deadChatSelection == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_deadChatItem, PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_deadChatOnlineItem, PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_deadAliveChatItem, PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_deadAliveChatOnlineItem, PlayerGroupSingle(EventPlayer()), false);
    autoFD1D3F17_val = DialogControlGetSelectedItem(EventDialogControl(), EventPlayer());
    if (autoFD1D3F17_val == 1) {
    }
    else if (autoFD1D3F17_val == 2) {
        DialogControlSetVisible(gv_deadChatItem, PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_deadChatOnlineItem, PlayerGroupSingle(EventPlayer()), true);
    }
    else if (autoFD1D3F17_val == 3) {
        DialogControlSetVisible(gv_deadAliveChatItem, PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_deadAliveChatOnlineItem, PlayerGroupSingle(EventPlayer()), true);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeadDialogSelection_Init () {
    gt_DeadDialogSelection = TriggerCreate("gt_DeadDialogSelection_Func");
    TriggerAddEventDialogControl(gt_DeadDialogSelection, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rating Instance
//--------------------------------------------------------------------------------------------------
bool gt_RatingInstance_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoE7CFA368_ae = 5;
    int autoE7CFA368_var;

    // Conditions
    if (testConds) {
        if (!(((gv_playerCardRatingButtons[1] == EventDialogControl()) || (gv_playerCardRatingButtons[2] == EventDialogControl()) || (gv_playerCardRatingButtons[3] == EventDialogControl()) || (gv_playerCardRatingButtons[4] == EventDialogControl()) || (gv_playerCardRatingButtons[5] == EventDialogControl())))) {
            return false;
        }

        if (!((gv_hasRated[EventPlayer()] == false))) {
            return false;
        }

        if (!((gv_kicked[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_ratingBan[EventPlayer()] == false)) {
        gv_hasRated[EventPlayer()] = true;
        autoE7CFA368_var = 1;
        for ( ; autoE7CFA368_var <= autoE7CFA368_ae; autoE7CFA368_var += 1 ) {
            DialogControlSetVisible(gv_playerCardRatingButtons[autoE7CFA368_var], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetEnabled(gv_playerCardRatingButtons[autoE7CFA368_var], PlayerGroupSingle(EventPlayer()), false);
            if ((gv_playerCardRatingButtons[autoE7CFA368_var] == EventDialogControl())) {
                gv_tRPThingRatingPoints[PlayerGroupPlayer(gv_things, 1)] += autoE7CFA368_var;
                gv_tRIThingRatingInstances[PlayerGroupPlayer(gv_things, 1)] += 1;
                gv_xTRP += autoE7CFA368_var;
                gv_xTRI += 1;
                gf_DeadChatUpdate((TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(gv_thePlayerColor[EventPlayer()])) + StringExternal("Param/Value/46683F90") + IntToText(autoE7CFA368_var) + StringExternal("Param/Value/1DFF8D92")), "", 0);
            }

        }
        gf_RefreshThingRatingBars(PlayerGroupPlayer(gv_things, 1));
        gf_SaveStats(PlayerGroupPlayer(gv_things, 1));
        gf_TellDrDebug(("Stats - " + "Player " + IntToString(PlayerGroupPlayer(gv_things, 1)) + " is saving his stats."));
        libNtve_gf_CreateDialogItemImage(gv_playerCardDialog[EventPlayer()], 51, 51, c_anchorTopRight, 2, 7, StringToText(""), "Assets\\Textures\\ui_battlenet_challenge_button_checkmark.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeAdd);
        SoundPlay(SoundLink("UI_Horner05sTerminalButton", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        libNtve_gf_SetDialogItemText(gv_playerCardName[PlayerGroupPlayer(gv_things, 1)], PlayerName(PlayerGroupPlayer(gv_things, 1)), PlayerGroupSingle(EventPlayer()));
    }
    else {
        gf_WarningSystem(EventPlayer(), (StringExternal("Param/Value/00A631C8") + StringExternal("Param/Value/09BF0E41") + IntToText(gv_playerRoundsRatingBanned[EventPlayer()])));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RatingInstance_Init () {
    gt_RatingInstance = TriggerCreate("gt_RatingInstance_Func");
    TriggerAddEventDialogControl(gt_RatingInstance, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scorescreen
//--------------------------------------------------------------------------------------------------
bool gt_Scorescreen_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoC4C45A31_g;
    int autoC4C45A31_var;
    playergroup auto3FA7FF39_g;
    int auto3FA7FF39_var;
    int auto67815DF3_ae;
    int auto67815DF3_var;
    playergroup autoBC90DFF1_g;
    int autoBC90DFF1_var;

    // Conditions
    if (testConds) {
        if (!((TriggerGetExecCount(TriggerGetCurrent()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerPause(gv_timer, true);
    SoundStop(gv_music, false);
    if ((UnitIsAlive(gv_unit[PlayerGroupPlayer(gv_things, 1)]) == true)) {
        SoundPlay(SoundLink("TheThingTheme", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    else {
        SoundPlay(SoundLink("ComingHome", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    libNtve_gf_SetPlayerGroupAlliance(PlayerGroupActive(), libNtve_ge_AllianceSetting_Ally);
    TriggerEnable(gt_MarineDIESSave, false);
    TriggerEnable(gt_UnitUIPeriodicUpdate, false);
    TriggerEnable(gt_ProxInExit, false);
    TriggerEnable(gt_GameMinutes, false);
    TriggerEnable(gt_ProxInEnter, false);
    TriggerEnable(gt_SpectateClick, false);
    TriggerEnable(gt_CameraRotateSystem, false);
    VisEnable(c_visTypeFog, false);
    VisEnable(c_visTypeMask, false);
    libNtve_gf_HideGameUI(false, PlayerGroupActive());
    UIClearMessages(PlayerGroupActive(), c_messageAreaDirective);
    libNtve_gf_AddPlayerGroupToPlayerGroup(PlayerGroupActive(), gv_dead);
    DialogSetVisible(gv_deadDialog, PlayerGroupActive(), true);
    DialogControlSetVisible(gv_deadChatItem, PlayerGroupActive(), true);
    DialogControlSetVisible(gv_deadChatOnlineItem, PlayerGroupActive(), true);
    DialogControlSetVisible(gv_deadAliveChatItem, PlayerGroupActive(), false);
    DialogControlSetVisible(gv_deadAliveChatOnlineItem, PlayerGroupActive(), false);
    DialogControlSelectItem(gv_deadChatSelection, PlayerGroupAll(), 2);
    DialogSetVisible(gv_spectatorDialog, PlayerGroupActive(), false);
    DialogSetVisible(gv_tTT, PlayerGroupActive(), false);
    DialogSetVisible(gv_settingsBoxDialog, PlayerGroupActive(), false);
    DialogSetVisible(gv_settingsContainerDialog, PlayerGroupActive(), false);
    DialogDestroy(DataTableGetDialog(true, "AcidPoolToggle"));
    autoC4C45A31_g = PlayerGroupActive();
    autoC4C45A31_var = -1;
    while (true) {
        autoC4C45A31_var = PlayerGroupNextPlayer(autoC4C45A31_g, autoC4C45A31_var);
        if (autoC4C45A31_var < 0) { break; }
        DialogDestroy(DataTableGetDialog(true, ("VicOS" + IntToString(autoC4C45A31_var))));
        DialogSetVisible(gv_unitPanel[autoC4C45A31_var], PlayerGroupActive(), false);
    }
    UnitPauseAll(true);
    if ((UnitIsAlive(gv_unit[PlayerGroupPlayer(gv_things, 1)]) == true)) {
        gv_endGameState[PlayerGroupPlayer(gv_things, 1)] = StringExternal("Param/Value/2BF3E3A3");
    }

    auto3FA7FF39_g = gv_marines;
    auto3FA7FF39_var = -1;
    while (true) {
        auto3FA7FF39_var = PlayerGroupNextPlayer(auto3FA7FF39_g, auto3FA7FF39_var);
        if (auto3FA7FF39_var < 0) { break; }
        if ((UnitIsAlive(gv_unit[auto3FA7FF39_var]) == true)) {
            gv_endGameState[auto3FA7FF39_var] = StringExternal("Param/Value/E78FF64F");
        }

    }
    GameSetLighting("BattleNetGlue", 0.0);
    gf_ShowPlanet(ge_Planets_BattlenetGlue);
    gf_FlashScreen(0.0, 1.5, 6.0, 0.0, PlayerGroupAll(), 25.0, 100.0, Color(0,0,0), "Assets\\Textures\\white32.dds");
    Wait(3.0, c_timeReal);
    DialogSetPosition(gv_deadDialog, c_anchorBottomRight, 0, 0);
    DialogCreate(1600, 1200, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    if ((UnitIsAlive(gv_unit[PlayerGroupPlayer(gv_things, 1)]) == true)) {
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 1000, 300, c_anchorCenter, 0, 0, StringExternal("Param/Value/FAF7989A"), Color(100.00, 0.00, 0.00), true, 3.0);
    }
    else {
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 1000, 300, c_anchorCenter, 0, 0, StringExternal("Param/Value/A770CE56"), Color(100.00, 0.00, 0.00), true, 3.0);
    }
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize52Bold", PlayerGroupAll());
    Wait(6.0, c_timeReal);
    DialogControlDestroy(DialogControlLastCreated());
    TriggerEnable(gt_PlayerCardSelection, false);
    auto67815DF3_ae = PlayerGroupCount(gv_playing);
    auto67815DF3_var = 1;
    for ( ; auto67815DF3_var <= auto67815DF3_ae; auto67815DF3_var += 1 ) {
        Wait(0.1, c_timeReal);
        if ((auto67815DF3_var <= 7)) {
            gf_GeneratePlayerCard(PlayerGroupPlayer(gv_playing, auto67815DF3_var), true, true, ((auto67815DF3_var - 4) * 235), 0, c_anchorTop, "scorescreen");
        }
        else if ((auto67815DF3_var >= 8)) {
            gf_GeneratePlayerCard(PlayerGroupPlayer(gv_playing, auto67815DF3_var), true, true, ((auto67815DF3_var - 11) * 235), 375, c_anchorTop, "scorescreen");
        }
    }
    TriggerEnable(gt_PlayerCardSelection, true);
    autoBC90DFF1_g = gv_playing;
    autoBC90DFF1_var = -1;
    while (true) {
        autoBC90DFF1_var = PlayerGroupNextPlayer(autoBC90DFF1_g, autoBC90DFF1_var);
        if (autoBC90DFF1_var < 0) { break; }
        if ((PlayerGroupHasPlayer(gv_things, autoBC90DFF1_var) == true)) {
            gf_GenerateProgressBar(autoBC90DFF1_var, gf_FindMaxXPfromLevel((gf_FindLevelfromPoints(gv_tPThingPointsPrev[autoBC90DFF1_var]) - 1)), gf_FindMaxXPfromLevel(gf_FindLevelfromPoints(gv_tPThingPointsPrev[autoBC90DFF1_var])), gv_tPThingPointsPrev[autoBC90DFF1_var], gv_tPThingPoints[autoBC90DFF1_var], StringExternal("Param/Value/3E83B170"), gf_FindLevelfromPoints(gv_tPThingPointsPrev[autoBC90DFF1_var]));
        }
        else {
            gf_GenerateProgressBar(autoBC90DFF1_var, gf_FindMaxXPfromLevel((gf_FindLevelfromPoints(gv_mPMarinePointsPrev[autoBC90DFF1_var]) - 1)), gf_FindMaxXPfromLevel(gf_FindLevelfromPoints(gv_mPMarinePointsPrev[autoBC90DFF1_var])), gv_mPMarinePointsPrev[autoBC90DFF1_var], gv_mPMarinePoints[autoBC90DFF1_var], StringExternal("Param/Value/3AE69A3A"), gf_FindLevelfromPoints(gv_mPMarinePointsPrev[autoBC90DFF1_var]));
        }
    }
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 75, c_anchorRight, 0, 200, StringToText(""), StringExternal("Param/Value/A2B8E6DE"), "");
    gv_quitButton = DialogControlLastCreated();
    gf_GenerateThingRatingBars(PlayerGroupPlayer(gv_things, 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Scorescreen_Init () {
    gt_Scorescreen = TriggerCreate("gt_Scorescreen_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scorescreen Quit
//--------------------------------------------------------------------------------------------------
bool gt_ScorescreenQuit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_quitButton == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(gv_unit[PlayerGroupPlayer(gv_things, 1)]) == true)) {
        if ((EventPlayer() == PlayerGroupPlayer(gv_things, 1))) {
            GameOver(EventPlayer(), c_gameOverVictory, false, false);
        }
        else {
            GameOver(EventPlayer(), c_gameOverDefeat, false, false);
        }
    }
    else {
        if ((EventPlayer() == PlayerGroupPlayer(gv_things, 1))) {
            GameOver(EventPlayer(), c_gameOverDefeat, false, false);
        }
        else {
            GameOver(EventPlayer(), c_gameOverVictory, false, false);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScorescreenQuit_Init () {
    gt_ScorescreenQuit = TriggerCreate("gt_ScorescreenQuit_Func");
    TriggerAddEventDialogControl(gt_ScorescreenQuit, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Killed by Grenade
//--------------------------------------------------------------------------------------------------
bool gt_KilledbyGrenade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_endGameState[EventPlayer()] = (StringExternal("Param/Value/6C101E54") + TextWithColor(StringExternal("Param/Value/7351958F"), libNtve_gf_ConvertPlayerColorToColor(gv_thePlayerColor[EventUnitDamageSourcePlayer()])));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KilledbyGrenade_Init () {
    gt_KilledbyGrenade = TriggerCreate("gt_KilledbyGrenade_Func");
    TriggerAddEventUnitDamaged(gt_KilledbyGrenade, null, c_unitDamageTypeAny, c_unitDamageFatal, "Damage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Killed by Flamethrower
//--------------------------------------------------------------------------------------------------
bool gt_KilledbyFlamethrower_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_endGameState[EventPlayer()] = (StringExternal("Param/Value/6A3E1091") + TextWithColor(StringExternal("Param/Value/B28F1C94"), libNtve_gf_ConvertPlayerColorToColor(gv_thePlayerColor[EventUnitDamageSourcePlayer()])));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KilledbyFlamethrower_Init () {
    gt_KilledbyFlamethrower = TriggerCreate("gt_KilledbyFlamethrower_Func");
    TriggerAddEventUnitDamaged(gt_KilledbyFlamethrower, null, c_unitDamageTypeAny, c_unitDamageFatal, "InfernalFlameThrower");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Killed by Gun
//--------------------------------------------------------------------------------------------------
bool gt_KilledbyGun_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_endGameState[EventPlayer()] = (StringExternal("Param/Value/16B7F92A") + TextWithColor(StringExternal("Param/Value/5FB9F661"), libNtve_gf_ConvertPlayerColorToColor(gv_thePlayerColor[EventUnitDamageSourcePlayer()])));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KilledbyGun_Init () {
    gt_KilledbyGun = TriggerCreate("gt_KilledbyGun_Func");
    TriggerAddEventUnitDamaged(gt_KilledbyGun, null, c_unitDamageTypeAny, c_unitDamageFatal, "GuassRifle");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Killed by the Cold
//--------------------------------------------------------------------------------------------------
bool gt_KilledbytheCold_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_endGameState[EventPlayer()] = (StringExternal("Param/Value/3350AC4B") + TextWithColor(StringExternal("Param/Value/E743E36E"), libNtve_gf_ConvertPlayerColorToColor(gv_thePlayerColor[EventPlayer()])));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KilledbytheCold_Init () {
    gt_KilledbytheCold = TriggerCreate("gt_KilledbytheCold_Func");
    TriggerAddEventUnitDamaged(gt_KilledbytheCold, null, c_unitDamageTypeAny, c_unitDamageFatal, "TheCold");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Killed by the Acid
//--------------------------------------------------------------------------------------------------
bool gt_KilledbytheAcid_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_endGameState[EventPlayer()] = (StringExternal("Param/Value/D4C82F32") + TextWithColor(StringExternal("Param/Value/92C8DA15"), libNtve_gf_ConvertPlayerColorToColor(gv_thePlayerColor[EventPlayer()])));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KilledbytheAcid_Init () {
    gt_KilledbytheAcid = TriggerCreate("gt_KilledbytheAcid_Func");
    TriggerAddEventUnitDamaged(gt_KilledbytheAcid, null, c_unitDamageTypeAny, c_unitDamageFatal, "Acid");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Killed by Thing
//--------------------------------------------------------------------------------------------------
bool gt_KilledbyThing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_endGameState[EventPlayer()] = (StringExternal("Param/Value/0561DA9B") + TextWithColor(StringExternal("Param/Value/EA03A9BE"), libNtve_gf_ConvertPlayerColorToColor(gv_thePlayerColor[EventUnitDamageSourcePlayer()])));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KilledbyThing_Init () {
    gt_KilledbyThing = TriggerCreate("gt_KilledbyThing_Func");
    TriggerAddEventUnitDamaged(gt_KilledbyThing, null, c_unitDamageTypeAny, c_unitDamageFatal, "InfestedAbomination");
    TriggerAddEventUnitDamaged(gt_KilledbyThing, null, c_unitDamageTypeAny, c_unitDamageFatal, "ThrowDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Killed by Leaving
//--------------------------------------------------------------------------------------------------
bool gt_KilledbyLeaving_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_unit[EventPlayer()]) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_endGameState[EventPlayer()] = (StringExternal("Param/Value/BDD67281") + TextWithColor(StringExternal("Param/Value/EE76AD52"), libNtve_gf_ConvertPlayerColorToColor(gv_thePlayerColor[EventPlayer()])));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KilledbyLeaving_Init () {
    gt_KilledbyLeaving = TriggerCreate("gt_KilledbyLeaving_Func");
    TriggerAddEventPlayerLeft(gt_KilledbyLeaving, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Killed by Suffocation
//--------------------------------------------------------------------------------------------------
bool gt_KilledbySuffocation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_unit[EventPlayer()]) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_endGameState[EventPlayer()] = (StringExternal("Param/Value/D16BB972") + TextWithColor(StringExternal("Param/Value/09C60D98"), libNtve_gf_ConvertPlayerColorToColor(gv_thePlayerColor[EventPlayer()])));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KilledbySuffocation_Init () {
    gt_KilledbySuffocation = TriggerCreate("gt_KilledbySuffocation_Func");
    TriggerAddEventUnitDamaged(gt_KilledbySuffocation, null, c_unitDamageTypeAny, c_unitDamageFatal, "Oxygendamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Killed by Molotov
//--------------------------------------------------------------------------------------------------
bool gt_KilledbyMolotov_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_endGameState[EventPlayer()] = (StringExternal("Param/Value/39ED56E9") + TextWithColor(StringExternal("Param/Value/86913FD2"), libNtve_gf_ConvertPlayerColorToColor(gv_thePlayerColor[EventPlayer()])));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KilledbyMolotov_Init () {
    gt_KilledbyMolotov = TriggerCreate("gt_KilledbyMolotov_Func");
    TriggerAddEventUnitDamaged(gt_KilledbyMolotov, null, c_unitDamageTypeAny, c_unitDamageFatal, "MolotovDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create TTT
//--------------------------------------------------------------------------------------------------
bool gt_CreateTTT_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int autoC052533F_ae = 3;
    const int autoC052533F_ai = 1;
    const int autoB094EED4_ae = 3;
    const int autoB094EED4_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_tttcurrent = 0;
    gv_tttplayers[1] = 0;
    gv_tttplayers[2] = 0;
    DialogCreate(250, 325, c_anchorRight, 0, 0, true);
    gv_tTT = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    DialogSetVisible(DialogLastCreated(), gv_dead, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 25, 25, c_anchorTopRight, 0, 0, StringExternal("Param/Value/A310014A"), StringToText(""), "");
    gv_tttsettings[3] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), false, PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 175, 50, c_anchorTopLeft, 0, 0, StringToText(""), StringExternal("Param/Value/DD6BEE4B"), "");
    gv_tttplayersbutton[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 50, 50, c_anchorTopLeft, 175, 0, StringExternal("Param/Value/39810746"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize40Bold", PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 175, 50, c_anchorBottomRight, 25, 0, StringToText(""), StringExternal("Param/Value/8B25CD60"), "");
    gv_tttplayersbutton[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 50, 50, c_anchorBottomRight, 200, 0, StringExternal("Param/Value/F81C1003"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize40Bold", PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeSlider);
    gv_tttsettings[1] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 1.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 10.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 4.0, PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 225, 50, c_anchorCenter, 50, 0, (StringExternal("Param/Value/B46B9E3D") + FixedToText(libNtve_gf_DialogItemValue(gv_tttsettings[1], 1), 1)), Color(100,100,100), false, 2.0);
    gv_tttsettings[2] = DialogControlLastCreated();
    lv_x = 1;
    for ( ; ( (autoC052533F_ai >= 0 && lv_x <= autoC052533F_ae) || (autoC052533F_ai < 0 && lv_x >= autoC052533F_ae) ) ; lv_x += autoC052533F_ai ) {
        lv_y = 1;
        for ( ; ( (autoB094EED4_ai >= 0 && lv_y <= autoB094EED4_ae) || (autoB094EED4_ai < 0 && lv_y >= autoB094EED4_ae) ) ; lv_y += autoB094EED4_ai ) {
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 75, 75, c_anchorTopLeft, (0 + (75 * (lv_x - 1))), (50 + (75 * (lv_y - 1))), StringToText(""), StringToText(""), "");
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
            libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(100,100,100), PlayerGroupAll());
            libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), false, PlayerGroupAll());
            gv_tttbuttonspaces[lv_x][lv_y] = DialogControlLastCreated();
            gv_tttspaces[lv_x][lv_y] = (((3 * lv_x) + (5 * lv_y)) + 15);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize64Bold", PlayerGroupAll());
        }
        libNtve_gf_SetDialogItemText(gv_tttbuttonspaces[1][lv_x], StringExternal("Param/Value/74FC3C09"), PlayerGroupAll());
    }
    libNtve_gf_SetDialogItemText(gv_tttbuttonspaces[2][1], StringExternal("Param/Value/92A23BC6"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_tttbuttonspaces[2][2], StringExternal("Param/Value/0FEE0106"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_tttbuttonspaces[2][3], StringExternal("Param/Value/6FDC8A4A"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_tttbuttonspaces[3][1], StringExternal("Param/Value/8709B79E"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_tttbuttonspaces[3][2], StringExternal("Param/Value/8CC866EB"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_tttbuttonspaces[3][3], StringExternal("Param/Value/FF10F8EA"), PlayerGroupAll());
    TriggerEnable(gt_slider, true);
    TriggerEnable(gt_check, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateTTT_Init () {
    gt_CreateTTT = TriggerCreate("gt_CreateTTT_Func");
    TriggerAddEventMapInit(gt_CreateTTT);
}

//--------------------------------------------------------------------------------------------------
// Trigger: check
//--------------------------------------------------------------------------------------------------
bool gt_check_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int auto46D2E6ED_ae = 3;
    const int auto46D2E6ED_ai = 1;
    const int auto5C642815_ae = 3;
    const int auto5C642815_ai = 1;
    const int autoF78EF5AA_ae = 3;
    const int autoF78EF5AA_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventPlayer() == gv_tttplayers[gv_tttcurrent]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_x = 1;
    for ( ; ( (auto46D2E6ED_ai >= 0 && lv_x <= auto46D2E6ED_ae) || (auto46D2E6ED_ai < 0 && lv_x >= auto46D2E6ED_ae) ) ; lv_x += auto46D2E6ED_ai ) {
        lv_y = 1;
        for ( ; ( (auto5C642815_ai >= 0 && lv_y <= auto5C642815_ae) || (auto5C642815_ai < 0 && lv_y >= auto5C642815_ae) ) ; lv_y += auto5C642815_ai ) {
            if ((gv_tttbuttonspaces[lv_x][lv_y] == EventDialogControl())) {
                gv_tttspaces[lv_x][lv_y] = EventPlayer();
                libNtve_gf_SetDialogItemAcceptMouse(gv_tttbuttonspaces[lv_x][lv_y], false, PlayerGroupAll());
                libNtve_gf_SetDialogItemDesaturationColor(gv_tttbuttonspaces[lv_x][lv_y], libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), true)), PlayerGroupAll());
                libNtve_gf_SetDialogItemDesaturated(gv_tttbuttonspaces[lv_x][lv_y], true, PlayerGroupAll());
                if ((gv_tttcurrent == 1)) {
                    gv_tttcurrent = 2;
                    libNtve_gf_SetDialogItemText(gv_tttbuttonspaces[lv_x][lv_y], StringExternal("Param/Value/70CA1E47"), PlayerGroupAll());
                    gv_ttttimer = libNtve_gf_DialogItemValue(gv_tttsettings[1], 1);
                    libNtve_gf_SetDialogItemText(gv_tttplayersbutton[1], FixedToText(gv_ttttimer, 1), PlayerGroupAll());
                    libNtve_gf_SetDialogItemDesaturationColor(gv_tttplayersbutton[1], Color(100,100,100), PlayerGroupAll());
                    libNtve_gf_SetDialogItemText(gv_tttplayersbutton[2], PlayerName(gv_tttplayers[2]), PlayerGroupAll());
                    libNtve_gf_SetDialogItemDesaturationColor(gv_tttplayersbutton[2], libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_tttplayers[2], true)), PlayerGroupAll());
                    TriggerEnable(gt_timer, true);
                }
                else {
                    gv_tttcurrent = 1;
                    libNtve_gf_SetDialogItemText(gv_tttbuttonspaces[lv_x][lv_y], StringExternal("Param/Value/3B1A349D"), PlayerGroupAll());
                    gv_ttttimer = libNtve_gf_DialogItemValue(gv_tttsettings[1], 1);
                    libNtve_gf_SetDialogItemText(gv_tttplayersbutton[2], FixedToText(gv_ttttimer, 1), PlayerGroupAll());
                    libNtve_gf_SetDialogItemDesaturationColor(gv_tttplayersbutton[2], Color(100,100,100), PlayerGroupAll());
                    libNtve_gf_SetDialogItemText(gv_tttplayersbutton[1], PlayerName(gv_tttplayers[1]), PlayerGroupAll());
                    libNtve_gf_SetDialogItemDesaturationColor(gv_tttplayersbutton[1], libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_tttplayers[1], true)), PlayerGroupAll());
                    TriggerEnable(gt_timer, true);
                }
            }

        }
    }
    lv_x = 1;
    for ( ; ( (autoF78EF5AA_ai >= 0 && lv_x <= autoF78EF5AA_ae) || (autoF78EF5AA_ai < 0 && lv_x >= autoF78EF5AA_ae) ) ; lv_x += autoF78EF5AA_ai ) {
        if (((gv_tttspaces[lv_x][1] == gv_tttspaces[lv_x][2]) && (gv_tttspaces[lv_x][2] == gv_tttspaces[lv_x][3]))) {
            TriggerEnable(gt_timer, false);
            TriggerEnable(gt_check, false);
            Wait(2.0, c_timeReal);
            DialogDestroy(gv_tTT);
            TriggerExecute(gt_CreateTTT, true, false);
        }

        if (((gv_tttspaces[1][lv_x] == gv_tttspaces[2][lv_x]) && (gv_tttspaces[2][lv_x] == gv_tttspaces[3][lv_x]))) {
            TriggerEnable(gt_timer, false);
            TriggerEnable(gt_check, false);
            Wait(2.0, c_timeReal);
            DialogDestroy(gv_tTT);
            TriggerExecute(gt_CreateTTT, true, false);
        }

    }
    if (((gv_tttspaces[1][1] == gv_tttspaces[2][2]) && (gv_tttspaces[2][2] == gv_tttspaces[3][3]))) {
        TriggerEnable(gt_timer, false);
        TriggerEnable(gt_check, false);
        Wait(2.0, c_timeReal);
        DialogDestroy(gv_tTT);
        TriggerExecute(gt_CreateTTT, true, false);
    }

    if (((gv_tttspaces[1][3] == gv_tttspaces[2][2]) && (gv_tttspaces[2][2] == gv_tttspaces[3][1]))) {
        TriggerEnable(gt_timer, false);
        TriggerEnable(gt_check, false);
        Wait(2.0, c_timeReal);
        DialogDestroy(gv_tTT);
        TriggerExecute(gt_CreateTTT, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_check_Init () {
    gt_check = TriggerCreate("gt_check_Func");
    TriggerAddEventDialogControl(gt_check, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: timer
//--------------------------------------------------------------------------------------------------
bool gt_timer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_ttttimer -= 0.1;
    if ((gv_tttcurrent == 1)) {
        libNtve_gf_SetDialogItemText(gv_tttplayersbutton[2], FixedToText(gv_ttttimer, 1), PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemText(gv_tttplayersbutton[1], FixedToText(gv_ttttimer, 1), PlayerGroupAll());
    }
    if ((gv_ttttimer < 0.0)) {
        if ((gv_tttcurrent == 1)) {
            gv_tttcurrent = 2;
            gv_ttttimer = libNtve_gf_DialogItemValue(gv_tttsettings[1], 1);
            libNtve_gf_SetDialogItemText(gv_tttplayersbutton[1], FixedToText(gv_ttttimer, 1), PlayerGroupAll());
            libNtve_gf_SetDialogItemDesaturationColor(gv_tttplayersbutton[1], Color(100,100,100), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(gv_tttplayersbutton[2], PlayerName(gv_tttplayers[2]), PlayerGroupAll());
            libNtve_gf_SetDialogItemDesaturationColor(gv_tttplayersbutton[2], libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_tttplayers[2], true)), PlayerGroupAll());
        }
        else {
            gv_tttcurrent = 1;
            gv_ttttimer = libNtve_gf_DialogItemValue(gv_tttsettings[1], 1);
            libNtve_gf_SetDialogItemText(gv_tttplayersbutton[2], FixedToText(gv_ttttimer, 1), PlayerGroupAll());
            libNtve_gf_SetDialogItemDesaturationColor(gv_tttplayersbutton[2], Color(100,100,100), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(gv_tttplayersbutton[1], PlayerName(gv_tttplayers[1]), PlayerGroupAll());
            libNtve_gf_SetDialogItemDesaturationColor(gv_tttplayersbutton[1], libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_tttplayers[1], true)), PlayerGroupAll());
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_timer_Init () {
    gt_timer = TriggerCreate("gt_timer_Func");
    TriggerEnable(gt_timer, false);
    TriggerAddEventTimePeriodic(gt_timer, 0.1, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: playerjoins
//--------------------------------------------------------------------------------------------------
bool gt_playerjoins_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int auto9CFB8693_ae = 3;
    const int auto9CFB8693_ai = 1;
    const int auto5FE47FEE_ae = 3;
    const int auto5FE47FEE_ai = 1;
    const int auto7A5454B8_ae = 3;
    const int auto7A5454B8_ai = 1;
    const int auto7E908F59_ae = 3;
    const int auto7E908F59_ai = 1;
    const int auto6A7D483B_ae = 3;
    const int auto6A7D483B_ai = 1;
    const int auto62F19AAE_ae = 3;
    const int auto62F19AAE_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((gv_tttplayersbutton[1] == EventDialogControl()) || (gv_tttplayersbutton[2] == EventDialogControl())))) {
            return false;
        }

        if (!((gv_tttplayers[1] != EventPlayer()))) {
            return false;
        }

        if (!((gv_tttplayers[2] != EventPlayer()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_tttplayersbutton[1] == EventDialogControl())) {
        gv_tttplayers[1] = EventPlayer();
        libNtve_gf_SetDialogItemText(EventDialogControl(), PlayerName(EventPlayer()), PlayerGroupAll());
        libNtve_gf_SetDialogItemAcceptMouse(EventDialogControl(), false, PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(EventDialogControl(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), true)), PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturated(EventDialogControl(), true, PlayerGroupAll());
        DialogControlSetVisible(gv_tttsettings[1], PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemDesaturated(gv_tttsettings[3], false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemAcceptMouse(gv_tttsettings[3], true, PlayerGroupSingle(EventPlayer()));
    }
    else {
        gv_tttplayers[2] = EventPlayer();
        libNtve_gf_SetDialogItemText(EventDialogControl(), PlayerName(EventPlayer()), PlayerGroupAll());
        libNtve_gf_SetDialogItemAcceptMouse(EventDialogControl(), false, PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(EventDialogControl(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), true)), PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturated(EventDialogControl(), true, PlayerGroupAll());
        DialogControlSetVisible(gv_tttsettings[1], PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemDesaturated(gv_tttsettings[3], false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemAcceptMouse(gv_tttsettings[3], true, PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_tttplayers[1] != 0) && (gv_tttplayers[2] != 0)) {
        TriggerEnable(gt_slider, false);
        gv_ttttimer = libNtve_gf_DialogItemValue(gv_tttsettings[1], 1);
        DialogControlSetVisible(gv_tttsettings[1], PlayerGroupAll(), false);
        libNtve_gf_SetDialogItemText(gv_tttsettings[2], StringExternal("Param/Value/02FB43F1"), PlayerGroupAll());
        Wait(2.0, c_timeReal);
        DialogControlSetVisible(gv_tttsettings[2], PlayerGroupAll(), false);
        libNtve_gf_SetDialogItemText(gv_tttbuttonspaces[2][1], StringExternal("Param/Value/620C58D3"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_tttbuttonspaces[2][2], StringExternal("Param/Value/58A67B10"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_tttbuttonspaces[2][3], StringExternal("Param/Value/7CA45EE3"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_tttbuttonspaces[3][1], StringExternal("Param/Value/78D10620"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_tttbuttonspaces[3][2], StringExternal("Param/Value/0DD28A21"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_tttbuttonspaces[3][3], StringExternal("Param/Value/36CDB945"), PlayerGroupAll());
        lv_y = 1;
        for ( ; ( (auto9CFB8693_ai >= 0 && lv_y <= auto9CFB8693_ae) || (auto9CFB8693_ai < 0 && lv_y >= auto9CFB8693_ae) ) ; lv_y += auto9CFB8693_ai ) {
            lv_x = 1;
            for ( ; ( (auto5FE47FEE_ai >= 0 && lv_x <= auto5FE47FEE_ae) || (auto5FE47FEE_ai < 0 && lv_x >= auto5FE47FEE_ae) ) ; lv_x += auto5FE47FEE_ai ) {
                Wait(0.1, c_timeReal);
                libNtve_gf_SetDialogItemText(gv_tttbuttonspaces[1][lv_x], StringExternal("Param/Value/831BE3DF"), PlayerGroupAll());
                DialogControlSetVisible(gv_tttbuttonspaces[lv_x][lv_y], PlayerGroupAll(), true);
            }
        }
        Wait(3.0, c_timeReal);
        lv_y = 1;
        for ( ; ( (auto7A5454B8_ai >= 0 && lv_y <= auto7A5454B8_ae) || (auto7A5454B8_ai < 0 && lv_y >= auto7A5454B8_ae) ) ; lv_y += auto7A5454B8_ai ) {
            Wait(0.1, c_timeReal);
            libNtve_gf_SetDialogItemText(gv_tttbuttonspaces[1][lv_y], StringToText(""), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(gv_tttbuttonspaces[3][(4 - lv_y)], StringToText(""), PlayerGroupAll());
        }
        Wait(0.1, c_timeReal);
        libNtve_gf_SetDialogItemText(gv_tttbuttonspaces[2][1], StringToText(""), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_tttbuttonspaces[2][3], StringToText(""), PlayerGroupAll());
        Wait(0.1, c_timeReal);
        libNtve_gf_SetDialogItemText(gv_tttplayersbutton[1], FixedToText(gv_ttttimer, 1), PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(gv_tttplayersbutton[1], Color(100,100,100), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_tttbuttonspaces[2][2], IntToText(3), PlayerGroupAll());
        lv_x = 1;
        for ( ; ( (auto7E908F59_ai >= 0 && lv_x <= auto7E908F59_ae) || (auto7E908F59_ai < 0 && lv_x >= auto7E908F59_ae) ) ; lv_x += auto7E908F59_ai ) {
            Wait(1.0, c_timeReal);
            libNtve_gf_SetDialogItemText(gv_tttbuttonspaces[2][2], IntToText((3 - lv_x)), PlayerGroupAll());
        }
        lv_y = 1;
        for ( ; ( (auto6A7D483B_ai >= 0 && lv_y <= auto6A7D483B_ae) || (auto6A7D483B_ai < 0 && lv_y >= auto6A7D483B_ae) ) ; lv_y += auto6A7D483B_ai ) {
            lv_x = 1;
            for ( ; ( (auto62F19AAE_ai >= 0 && lv_x <= auto62F19AAE_ae) || (auto62F19AAE_ai < 0 && lv_x >= auto62F19AAE_ae) ) ; lv_x += auto62F19AAE_ai ) {
                libNtve_gf_SetDialogItemAcceptMouse(gv_tttbuttonspaces[lv_x][lv_y], true, PlayerGroupAll());
                libNtve_gf_SetDialogItemDesaturationColor(gv_tttbuttonspaces[lv_x][lv_y], Color(100,100,100), PlayerGroupAll());
            }
        }
        libNtve_gf_SetDialogItemText(gv_tttbuttonspaces[2][2], StringToText(""), PlayerGroupAll());
        gv_tttcurrent = 2;
        TriggerEnable(gt_timer, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_playerjoins_Init () {
    gt_playerjoins = TriggerCreate("gt_playerjoins_Func");
    TriggerAddEventDialogControl(gt_playerjoins, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: slider
//--------------------------------------------------------------------------------------------------
bool gt_slider_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_tttsettings[1] == EventDialogControl()))) {
            return false;
        }

        if (!(((EventPlayer() == gv_tttplayers[1]) || (EventPlayer() == gv_tttplayers[2])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemText(gv_tttsettings[2], (StringExternal("Param/Value/416407B0") + FixedToText(libNtve_gf_DialogItemValue(gv_tttsettings[1], 1), 1)), PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(gv_tttsettings[1], libNtve_gf_DialogItemValue(gv_tttsettings[1], EventPlayer()), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_slider_Init () {
    gt_slider = TriggerCreate("gt_slider_Func");
    TriggerEnable(gt_slider, false);
    TriggerAddEventDialogControl(gt_slider, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeValueChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: reset
//--------------------------------------------------------------------------------------------------
bool gt_reset_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_tttsettings[3] == EventDialogControl()))) {
            return false;
        }

        if (!(((gv_tttplayers[1] == EventPlayer()) || (gv_tttplayers[2] == EventPlayer())))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_timer, false);
    DialogDestroy(gv_tTT);
    TriggerExecute(gt_CreateTTT, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_reset_Init () {
    gt_reset = TriggerCreate("gt_reset_Func");
    TriggerAddEventDialogControl(gt_reset, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Record On
//--------------------------------------------------------------------------------------------------
bool gt_RecordOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_admin, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_RecordOff, true);
    libNtve_gf_HideGameUI(false, PlayerGroupSingle(EventPlayer()));
    DialogSetVisible(gv_tTT, PlayerGroupSingle(EventPlayer()), false);
    DialogSetVisible(gv_spectatorDialog, PlayerGroupSingle(EventPlayer()), false);
    DialogSetVisible(gv_settingsContainerDialog, PlayerGroupSingle(EventPlayer()), false);
    DialogSetVisible(gv_deadDialog, PlayerGroupSingle(EventPlayer()), false);
    UISetCursorVisible(PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RecordOn_Init () {
    gt_RecordOn = TriggerCreate("gt_RecordOn_Func");
    TriggerAddEventKeyPressed(gt_RecordOn, c_playerAny, c_keyR, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Record Off
//--------------------------------------------------------------------------------------------------
bool gt_RecordOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_admin, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_RecordOn, true);
    libNtve_gf_HideGameUI(true, PlayerGroupSingle(EventPlayer()));
    DialogSetVisible(gv_tTT, PlayerGroupSingle(EventPlayer()), true);
    DialogSetVisible(gv_spectatorDialog, PlayerGroupSingle(EventPlayer()), true);
    DialogSetVisible(gv_settingsContainerDialog, PlayerGroupSingle(EventPlayer()), true);
    DialogSetVisible(gv_deadDialog, PlayerGroupSingle(EventPlayer()), true);
    UISetCursorVisible(PlayerGroupSingle(EventPlayer()), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RecordOff_Init () {
    gt_RecordOff = TriggerCreate("gt_RecordOff_Func");
    TriggerAddEventKeyPressed(gt_RecordOff, c_playerAny, c_keyR, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Load Ban List
//--------------------------------------------------------------------------------------------------
bool gt_LoadBanList_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_admin, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(550, 550, c_anchorCenter, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gf_GenerateWindowTab(DialogLastCreated(), true, true, true, true, 5, 5, c_anchorTopLeft, c_anchorTopRight, StringExternal("Param/Value/047F6063"));
    gf_GenerateWindowUI(DialogLastCreated(), Color(100.00, 100.00, 100.00), Color(9.80, 9.80, 9.80));
    gv_banListDialog = DialogLastCreated();
    DialogControlCreate(gv_banListDialog, c_triggerControlTypeEditBox);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 500, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 25);
    gv_banListItems[0] = DialogControlLastCreated();
    DialogControlCreate(gv_banListDialog, c_triggerControlTypeListBox);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 240, 325);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, 25, 0);
    gv_banListItems[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 100, 90, StringExternal("Param/Value/A4E225B2"), ColorWithAlpha(0,0,0,0), false, 2.0);
    DialogControlCreate(gv_banListDialog, c_triggerControlTypeListBox);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 240, 325);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorRight, 25, 0);
    gv_banListItems[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopRight, 0, 90, StringExternal("Param/Value/EEC63F13"), ColorWithAlpha(0,0,0,0), false, 2.0);
    DialogControlCreate(gv_banListDialog, c_triggerControlTypeEditBox);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 240, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, -130, 60);
    gv_banListItems[3] = DialogControlLastCreated();
    DialogControlCreate(gv_banListDialog, c_triggerControlTypeEditBox);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 240, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, 130, 60);
    gv_banListItems[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 240, 50, c_anchorBottom, -130, 15, StringToText(""), StringExternal("Param/Value/042F1012"), "");
    gv_banListItems[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 240, 50, c_anchorBottom, 130, 15, StringToText(""), StringExternal("Param/Value/782169F9"), "");
    gv_banListItems[6] = DialogControlLastCreated();
    TriggerExecute(gt_BanListTrigger, true, false);
    DialogSetVisible(gv_banListDialog, PlayerGroupSingle(EventPlayer()), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LoadBanList_Init () {
    gt_LoadBanList = TriggerCreate("gt_LoadBanList_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ban List Trigger
//--------------------------------------------------------------------------------------------------
bool gt_BanListTrigger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto5931C5E3_g;
    int auto5931C5E3_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemEditorValue(gv_banListItems[0], gv_latestVBIData, PlayerGroupAll());
    DialogControlAddItem(gv_banListItems[1], PlayerGroupAll(), StringToText(gv_latestVBIData));
    auto5931C5E3_g = PlayerGroupActive();
    auto5931C5E3_var = -1;
    while (true) {
        auto5931C5E3_var = PlayerGroupNextPlayer(auto5931C5E3_g, auto5931C5E3_var);
        if (auto5931C5E3_var < 0) { break; }
        DialogControlAddItem(gv_banListItems[2], PlayerGroupAll(), PlayerName(auto5931C5E3_var));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BanListTrigger_Init () {
    gt_BanListTrigger = TriggerCreate("gt_BanListTrigger_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button Controls
//--------------------------------------------------------------------------------------------------
bool gt_ButtonControls_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_admin, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_banListItems[5])) {
    }

    if ((EventDialogControl() == gv_banListItems[6])) {
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ButtonControls_Init () {
    gt_ButtonControls = TriggerCreate("gt_ButtonControls_Func");
    TriggerAddEventDialogControl(gt_ButtonControls, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Selected List
//--------------------------------------------------------------------------------------------------
bool gt_SelectedList_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_admin, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogControlGetSelectedItem(gv_banListItems[1], EventPlayer()) != 0)) {
        libNtve_gf_SetDialogItemEditorValue(gv_banListItems[3], FixedToString(DialogControlGetSelectedItem(gv_banListItems[1], EventPlayer()), c_fixedPrecisionAny), PlayerGroupSingle(EventPlayer()));
    }

    if ((DialogControlGetSelectedItem(gv_banListItems[2], EventPlayer()) != 0)) {
        libNtve_gf_SetDialogItemEditorValue(gv_banListItems[4], FixedToString(DialogControlGetSelectedItem(gv_banListItems[2], EventPlayer()), c_fixedPrecisionAny), PlayerGroupSingle(EventPlayer()));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectedList_Init () {
    gt_SelectedList = TriggerCreate("gt_SelectedList_Func");
    TriggerAddEventMouseClicked(gt_SelectedList, c_playerAny, c_mouseButtonNone, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spectator View Evac Dialog
//--------------------------------------------------------------------------------------------------
bool gt_SpectatorViewEvacDialog_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_spectatorViewEvacDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_spectatorViewEvacDialog, 225, 50, c_anchorTop, 0, 50, StringToText(""), StringExternal("Param/Value/E14FAA7F"), "");
    gv_spectatorViewEvacItems[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_spectatorViewEvacDialog, 225, 50, c_anchorTop, 0, 50, StringToText(""), StringExternal("Param/Value/5544E778"), "");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_spectatorViewEvacItems[1] = DialogControlLastCreated();
    DialogSetVisible(gv_spectatorViewEvacDialog, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpectatorViewEvacDialog_Init () {
    gt_SpectatorViewEvacDialog = TriggerCreate("gt_SpectatorViewEvacDialog_Func");
    TriggerAddEventMapInit(gt_SpectatorViewEvacDialog);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spectator View Evac Controls
//--------------------------------------------------------------------------------------------------
bool gt_SpectatorViewEvacControls_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_spectatorViewEvacItems[0])) {
        UISetFrameVisible(PlayerGroupSingle(EventPlayer()), c_syncFrameTypeMinimapPanel, false);
        CameraSetBounds(PlayerGroupSingle(EventPlayer()), RegionFromId(46), true);
        CameraPan(EventPlayer(), RegionGetCenter(RegionFromId(46)), 0.0, -1, 10.0, false);
        DialogControlSetVisible(gv_spectatorViewEvacItems[0], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_spectatorViewEvacItems[1], PlayerGroupSingle(EventPlayer()), true);
    }

    if ((EventDialogControl() == gv_spectatorViewEvacItems[1])) {
        UISetFrameVisible(PlayerGroupSingle(EventPlayer()), c_syncFrameTypeMinimapPanel, true);
        CameraSetBounds(PlayerGroupSingle(EventPlayer()), gv_selectedRegion, true);
        CameraPan(EventPlayer(), RegionGetCenter(gv_selectedRegion), 0.0, -1, 10.0, false);
        DialogControlSetVisible(gv_spectatorViewEvacItems[1], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_spectatorViewEvacItems[0], PlayerGroupSingle(EventPlayer()), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpectatorViewEvacControls_Init () {
    gt_SpectatorViewEvacControls = TriggerCreate("gt_SpectatorViewEvacControls_Func");
    TriggerAddEventDialogControl(gt_SpectatorViewEvacControls, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cold
//--------------------------------------------------------------------------------------------------
bool gt_Cold_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(40)) == true)) {
        if (((TerrainTexture(UnitGetPosition(EventUnit())) == "IceWorld4") || (TerrainTexture(UnitGetPosition(EventUnit())) == "IceWorld1"))) {
            gf_QuickTipsforString("The Cold", UnitGetOwner(EventUnit()));
            UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyRegen, 0.0);
            UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyPercent, (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergyPercent, c_unitPropCurrent) - 0.35));
            if ((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergyPercent, c_unitPropCurrent) <= 1.0)) {
                PlayerCreateEffectUnit(0, "TheCold", EventUnit());
            }

        }
        else {
            UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyRegen, UnitGetPropertyFixed(EventUnit(), c_unitPropEnergyRegen, c_unitPropNormal));
        }
        if ((TerrainTexture(UnitGetPosition(EventUnit())) == "BraxisAlphaRock") && (gv_acidPoolFlamesOn == true)) {
            PlayerCreateEffectUnit(0, "Acid", EventUnit());
        }

        Wait(1.0, c_timeReal);
    }
    UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyRegen, UnitGetPropertyFixed(EventUnit(), c_unitPropEnergyRegen, c_unitPropNormal));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Cold_Init () {
    gt_Cold = TriggerCreate("gt_Cold_Func");
    TriggerEnable(gt_Cold, false);
    TriggerAddEventUnitRegion(gt_Cold, null, RegionFromId(40), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Broken Vitals
//--------------------------------------------------------------------------------------------------
bool gt_BrokenVitals_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_fuelStation == EventUnit()) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) <= 100.0)) {
        UnitSetState(EventUnit(), c_unitStateInvulnerable, true);
        UnitSetPropertyFixed(EventUnit(), c_unitPropLife, 100.0);
        gf_BrokenFuelStation();
    }

    if ((gv_fusionCore == EventUnit()) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) <= 100.0)) {
        UnitSetState(EventUnit(), c_unitStateInvulnerable, true);
        UnitSetPropertyFixed(EventUnit(), c_unitPropLife, 100.0);
        gf_BrokenFusionCore();
    }

    if ((gv_commsLink == EventUnit()) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) <= 100.0) && (TriggerIsEnabled(gt_EvacShipEnter) == false)) {
        UnitSetState(EventUnit(), c_unitStateInvulnerable, true);
        UnitSetPropertyFixed(EventUnit(), c_unitPropLife, 100.0);
        gf_BrokenCommsLink();
    }

    if ((gv_beaconRelay == EventUnit()) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) <= 100.0)) {
        UnitSetState(EventUnit(), c_unitStateInvulnerable, true);
        UnitSetPropertyFixed(EventUnit(), c_unitPropLife, 100.0);
        gf_BrokenBeaconRelay();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BrokenVitals_Init () {
    gt_BrokenVitals = TriggerCreate("gt_BrokenVitals_Func");
    TriggerAddEventUnitDamaged(gt_BrokenVitals, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beacon Relay Boost
//--------------------------------------------------------------------------------------------------
bool gt_BeaconRelayBoost_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_beaconregion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_beaconregion = RegionCircle(UnitGetPosition(gv_beaconRelay), 3.0);

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitCount("Marine2", c_playerAny, lv_beaconregion, UnitFilter(0, 0, (1 << c_targetFilterSelf) | (1 << c_targetFilterMassive) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0)) && (TriggerIsEnabled(gt_EvacShipEnter) == false)) {
        if ((libNtve_gf_UnitIsInvulnerable(gv_commsLink) == false)) {
            TimerStart(gv_timer, (TimerGetRemaining(gv_timer) - ((TimerGetRemaining(gv_timer) * 0.12) / 60.0)), false, c_timeReal);
        }
        else {
            TimerStart(gv_timer, (TimerGetRemaining(gv_timer) - 0.75), false, c_timeReal);
            TimerPause(gv_timer, true);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BeaconRelayBoost_Init () {
    gt_BeaconRelayBoost = TriggerCreate("gt_BeaconRelayBoost_Func");
    TriggerEnable(gt_BeaconRelayBoost, false);
    TriggerAddEventTimePeriodic(gt_BeaconRelayBoost, 1.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fuel Station Provision
//--------------------------------------------------------------------------------------------------
bool gt_FuelStationProvision_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((DistanceBetweenPoints(UnitGetPosition(gv_fuelStation), UnitGetPosition(gv_flamethrower)) <= 3.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_flamethrowerGas = libNtve_gf_ArithmeticIntClamp((gv_flamethrowerGas + 5), 0, 70);
    libNtve_gf_SetDialogItemCurrentValue(gv_unitBarItem[PlayerGroupPlayer(gv_flamethrowerOwner, 1)][gv_flamethrowerBarNumber], gv_flamethrowerGas, PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_unitBarItem[PlayerGroupPlayer(gv_flamethrowerOwner, 1)][gv_flamethrowerBarNumber], Color((100.0 - (gv_flamethrowerGas / 2.0)), (gv_flamethrowerGas / 2.0), 0.0), PlayerGroupAll());
    if ((gv_flamethrowerGas >= 10)) {
        UnitBehaviorAdd(gv_unit[PlayerGroupPlayer(gv_flamethrowerOwner, 1)], "Fire", gv_unit[PlayerGroupPlayer(gv_flamethrowerOwner, 1)], 1);
    }

    if ((gv_flamethrowerGas < 10)) {
        UnitBehaviorRemove(gv_unit[PlayerGroupPlayer(gv_flamethrowerOwner, 1)], "Fire", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FuelStationProvision_Init () {
    gt_FuelStationProvision = TriggerCreate("gt_FuelStationProvision_Func");
    TriggerEnable(gt_FuelStationProvision, false);
    TriggerAddEventTimePeriodic(gt_FuelStationProvision, 1.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dead Doors
//--------------------------------------------------------------------------------------------------
bool gt_DeadDoors_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "DestructibleGateStraightHorizontal") || (UnitGetType(EventUnit()) == "DestructibleGateStraightHorizontalLowered") || (UnitGetType(EventUnit()) == "DestructibleGateStraightVertical") || (UnitGetType(EventUnit()) == "DestructibleGateStraightVerticalLowered")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetType(EventUnit()) == "DestructibleGateStraightHorizontal") || (UnitGetType(EventUnit()) == "DestructibleGateStraightHorizontalLowered"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Gate", c_unitCreateIgnorePlacement, 0, UnitGetPosition(EventUnit()));
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "DestructibleGateStraightVerticalLowered2", c_unitCreateIgnorePlacement, 0, UnitGetPosition(EventUnit()));
    }
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, 1.0);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    gf_DeadDoor(UnitLastCreated(), 0.0625);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeadDoors_Init () {
    gt_DeadDoors = TriggerCreate("gt_DeadDoors_Func");
    TriggerAddEventUnitDamaged(gt_DeadDoors, null, c_unitDamageTypeAny, c_unitDamageFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show/Hide Toggle for Acid Pool
//--------------------------------------------------------------------------------------------------
bool gt_ShowHideToggleforAcidPool_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_unit[EventPlayer()] == EventUnit()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(39)) == true)) {
        gf_ShowHideAcidPoolToggle(true, EventPlayer());
    }
    else {
        gf_ShowHideAcidPoolToggle(false, EventPlayer());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowHideToggleforAcidPool_Init () {
    gt_ShowHideToggleforAcidPool = TriggerCreate("gt_ShowHideToggleforAcidPool_Func");
    TriggerAddEventUnitRegion(gt_ShowHideToggleforAcidPool, null, RegionFromId(39), true);
    TriggerAddEventUnitRegion(gt_ShowHideToggleforAcidPool, null, RegionFromId(39), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Acid Pool
//--------------------------------------------------------------------------------------------------
bool gt_ToggleAcidPool_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((DialogControlGetDialog(EventDialogControl()) == DataTableGetDialog(true, "AcidPoolToggle")))) {
            return false;
        }

        if (!((DialogControlGetDialog(EventDialogControl()) != DataTableGetDialog(true, ("ProfileQuoteDone" + IntToString(EventPlayer())))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_acidPoolFlamesOn == false)) {
        gf_ToggleAcidPool(true);
    }
    else {
        gf_ToggleAcidPool(false);
    }
    gf_ShowHideAcidPoolToggle(false, EventPlayer());
    gf_ShowHideAcidPoolToggle(true, EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleAcidPool_Init () {
    gt_ToggleAcidPool = TriggerCreate("gt_ToggleAcidPool_Func");
    TriggerAddEventDialogControl(gt_ToggleAcidPool, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Anti Cliff Climb
//--------------------------------------------------------------------------------------------------
bool gt_AntiCliffClimb_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto0CD2CF5F_g;
    int auto0CD2CF5F_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto0CD2CF5F_g = gv_playing;
    auto0CD2CF5F_var = -1;
    while (true) {
        auto0CD2CF5F_var = PlayerGroupNextPlayer(auto0CD2CF5F_g, auto0CD2CF5F_var);
        if (auto0CD2CF5F_var < 0) { break; }
        if ((UnitIsAlive(gv_unit[auto0CD2CF5F_var]) == true)) {
            if ((CliffLevel(UnitGetPosition(gv_unit[auto0CD2CF5F_var])) != 1)) {
                gf_KilledbyTrigger(gv_unit[auto0CD2CF5F_var], auto0CD2CF5F_var, 0, StringExternal("Param/Value/11E66D2F"), "Ram", 4);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AntiCliffClimb_Init () {
    gt_AntiCliffClimb = TriggerCreate("gt_AntiCliffClimb_Func");
    TriggerEnable(gt_AntiCliffClimb, false);
    TriggerAddEventTimePeriodic(gt_AntiCliffClimb, 3.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attacked
//--------------------------------------------------------------------------------------------------
bool gt_Attacked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_FlashScreen(0.0, 0.3, 0.1, 0.0, PlayerGroupSingle(EventPlayer()), 0.0, 100.0, Color(57.65, 0.00, 0.00), "Assets\\Textures\\white32.dds");
    libNtve_gf_CreateModelAtPoint("BloodSplats", PointWithOffsetPolar(UnitGetPosition(EventUnit()), RandomFixed(0.0, 0.5), libNtve_gf_RandomAngle()));
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScaleAbsolute(RandomFixed(0.5, 2.0), RandomFixed(0.25, 0.5), 1.0, 0.0));
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetFacing(AngleBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(EventUnitDamageSourceUnit()))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Attacked_Init () {
    gt_Attacked = TriggerCreate("gt_Attacked_Func");
    TriggerAddEventUnitDamaged(gt_Attacked, null, c_unitDamageTypeAny, c_unitDamageNonFatal, "InfestedAbomination");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initiated TK Attack
//--------------------------------------------------------------------------------------------------
bool gt_InitiatedTKAttack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitDamageSourceUnit()) == "Marine3"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Marine3"))) {
            return false;
        }

        if (!((gv_attackInitiator[EventPlayer()] == 0))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(gv_attackInitiatorBlacklist[EventUnitDamageSourcePlayer()], EventPlayer()) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_attackInitiator[EventPlayer()] = EventUnitDamageSourcePlayer();
    PlayerGroupAdd(gv_attackInitiatorBlacklist[EventPlayer()], EventUnitDamageSourcePlayer());
    Wait(30.0, c_timeReal);
    gv_attackInitiator[EventPlayer()] = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitiatedTKAttack_Init () {
    gt_InitiatedTKAttack = TriggerCreate("gt_InitiatedTKAttack_Func");
    TriggerAddEventUnitDamaged(gt_InitiatedTKAttack, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ProxIn Enter
//--------------------------------------------------------------------------------------------------
bool gt_ProxInEnter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((RegionGetAttachUnit(EventUnitRegion()) != null))) {
            return false;
        }

        if (!((gv_unit[EventPlayer()] == EventUnit()))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != UnitGetOwner(RegionGetAttachUnit(EventUnitRegion()))))) {
            return false;
        }

        if (!((UnitGetType(RegionGetAttachUnit(EventUnitRegion())) != "InfestedAbomination"))) {
            return false;
        }

        if (!((UnitGetType(RegionGetAttachUnit(EventUnitRegion())) != "InfestedAbominationBurrowed"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "InfestedAbomination"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "InfestedAbominationBurrowed"))) {
            return false;
        }

        if (!((gv_unit[EventPlayer()] == EventUnit()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(UnitGetOwner(EventUnit()), UnitGetOwner(RegionGetAttachUnit(EventUnitRegion())), libNtve_ge_AllianceSetting_Ally);
    PlayerSetAlliance(UnitGetOwner(EventUnit()), c_allianceIdChat, UnitGetOwner(RegionGetAttachUnit(EventUnitRegion())), true);
    PlayerSetAlliance(UnitGetOwner(EventUnit()), c_allianceIdPassive, UnitGetOwner(RegionGetAttachUnit(EventUnitRegion())), true);
    if ((gv_colorTagAlwaysShow[UnitGetOwner(RegionGetAttachUnit(EventUnitRegion()))] == false)) {
        while (!(((UnitIsAlive(EventUnit()) == false) || (UnitIsAlive(RegionGetAttachUnit(EventUnitRegion())) == false) || (libNtve_gf_UnitIsVisibleToPlayer(EventUnit(), UnitGetOwner(RegionGetAttachUnit(EventUnitRegion()))) == true) || (libNtve_gf_UnitInRegion(EventUnit(), EventUnitRegion()) == false)))) {
            Wait(0.25, c_timeGame);
        }
        if ((libNtve_gf_UnitInRegion(EventUnit(), EventUnitRegion()) == true) && (UnitIsAlive(EventUnit()) == true) && (UnitIsAlive(RegionGetAttachUnit(EventUnitRegion())) == true)) {
            TextTagShow(gv_unitTag[EventPlayer()], PlayerGroupSingle(UnitGetOwner(RegionGetAttachUnit(EventUnitRegion()))), true);
            Wait(3.0, c_timeReal);
            if ((gv_colorTagAlwaysShow[UnitGetOwner(RegionGetAttachUnit(EventUnitRegion()))] == false) && (UnitIsAlive(EventUnit()) == true) && (UnitIsAlive(RegionGetAttachUnit(EventUnitRegion())) == true)) {
                TextTagShow(gv_unitTag[EventPlayer()], PlayerGroupSingle(UnitGetOwner(RegionGetAttachUnit(EventUnitRegion()))), false);
            }

        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProxInEnter_Init () {
    gt_ProxInEnter = TriggerCreate("gt_ProxInEnter_Func");
    TriggerAddEventUnitRegion(gt_ProxInEnter, null, RegionFromId(10), true);
    TriggerAddEventUnitRegion(gt_ProxInEnter, null, RegionFromId(11), true);
    TriggerAddEventUnitRegion(gt_ProxInEnter, null, RegionFromId(12), true);
    TriggerAddEventUnitRegion(gt_ProxInEnter, null, RegionFromId(13), true);
    TriggerAddEventUnitRegion(gt_ProxInEnter, null, RegionFromId(14), true);
    TriggerAddEventUnitRegion(gt_ProxInEnter, null, RegionFromId(15), true);
    TriggerAddEventUnitRegion(gt_ProxInEnter, null, RegionFromId(16), true);
    TriggerAddEventUnitRegion(gt_ProxInEnter, null, RegionFromId(17), true);
    TriggerAddEventUnitRegion(gt_ProxInEnter, null, RegionFromId(18), true);
    TriggerAddEventUnitRegion(gt_ProxInEnter, null, RegionFromId(19), true);
    TriggerAddEventUnitRegion(gt_ProxInEnter, null, RegionFromId(20), true);
    TriggerAddEventUnitRegion(gt_ProxInEnter, null, RegionFromId(21), true);
    TriggerAddEventUnitRegion(gt_ProxInEnter, null, RegionFromId(22), true);
    TriggerAddEventUnitRegion(gt_ProxInEnter, null, RegionFromId(23), true);
    TriggerAddEventUnitRegion(gt_ProxInEnter, null, RegionFromId(23), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ProxIn Exit
//--------------------------------------------------------------------------------------------------
bool gt_ProxInExit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((RegionGetAttachUnit(EventUnitRegion()) != null))) {
            return false;
        }

        if (!((gv_unit[EventPlayer()] == EventUnit()))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != UnitGetOwner(RegionGetAttachUnit(EventUnitRegion()))))) {
            return false;
        }

        if (!((UnitGetType(RegionGetAttachUnit(EventUnitRegion())) != "InfestedAbomination"))) {
            return false;
        }

        if (!((UnitGetType(RegionGetAttachUnit(EventUnitRegion())) != "InfestedAbominationBurrowed"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "InfestedAbomination"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "InfestedAbominationBurrowed"))) {
            return false;
        }

        if (!((gv_unit[EventPlayer()] == EventUnit()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(UnitGetOwner(EventUnit()), UnitGetOwner(RegionGetAttachUnit(EventUnitRegion())), libNtve_ge_AllianceSetting_Enemy);
    PlayerSetAlliance(UnitGetOwner(EventUnit()), c_allianceIdChat, UnitGetOwner(RegionGetAttachUnit(EventUnitRegion())), false);
    PlayerSetAlliance(UnitGetOwner(EventUnit()), c_allianceIdPassive, UnitGetOwner(RegionGetAttachUnit(EventUnitRegion())), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProxInExit_Init () {
    gt_ProxInExit = TriggerCreate("gt_ProxInExit_Func");
    TriggerAddEventUnitRegion(gt_ProxInExit, null, RegionFromId(10), false);
    TriggerAddEventUnitRegion(gt_ProxInExit, null, RegionFromId(11), false);
    TriggerAddEventUnitRegion(gt_ProxInExit, null, RegionFromId(12), false);
    TriggerAddEventUnitRegion(gt_ProxInExit, null, RegionFromId(13), false);
    TriggerAddEventUnitRegion(gt_ProxInExit, null, RegionFromId(14), false);
    TriggerAddEventUnitRegion(gt_ProxInExit, null, RegionFromId(15), false);
    TriggerAddEventUnitRegion(gt_ProxInExit, null, RegionFromId(16), false);
    TriggerAddEventUnitRegion(gt_ProxInExit, null, RegionFromId(17), false);
    TriggerAddEventUnitRegion(gt_ProxInExit, null, RegionFromId(18), false);
    TriggerAddEventUnitRegion(gt_ProxInExit, null, RegionFromId(19), false);
    TriggerAddEventUnitRegion(gt_ProxInExit, null, RegionFromId(20), false);
    TriggerAddEventUnitRegion(gt_ProxInExit, null, RegionFromId(21), false);
    TriggerAddEventUnitRegion(gt_ProxInExit, null, RegionFromId(22), false);
    TriggerAddEventUnitRegion(gt_ProxInExit, null, RegionFromId(23), false);
    TriggerAddEventUnitRegion(gt_ProxInExit, null, RegionFromId(23), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: The Thing KILLS
//--------------------------------------------------------------------------------------------------
bool gt_TheThingKILLS_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_rand;

    // Automatic Variable Declarations
    const int autoB70D0ECD_ae = 15;
    int autoB70D0ECD_var;
    int autoC707AE43_ae;
    int autoC707AE43_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(libNtve_gf_KillingUnit()) == "InfestedAbomination"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Marine3"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayAtPoint(SoundLink("Marine_DeathFXBloodSpray", -1), PlayerGroupAll(), UnitGetPosition(EventUnit()), 0.0, 100.0, 0.0);
    gv_consumedByThing[EventPlayer()] = true;
    gv_lastConsumedPlayer = EventPlayer();
    UnitSetPropertyFixed(libNtve_gf_KillingUnit(), c_unitPropLifePercent, (UnitGetPropertyFixed(libNtve_gf_KillingUnit(), c_unitPropLifePercent, c_unitPropCurrent) + (UnitGroupCount(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(libNtve_gf_KillingUnit()), 7.0), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) * 7)));
    gv_marineKills[libNtve_gf_KillingPlayer()] = (gv_marineKills[libNtve_gf_KillingPlayer()] + 1);
    autoB70D0ECD_var = 1;
    for ( ; autoB70D0ECD_var <= autoB70D0ECD_ae; autoB70D0ECD_var += 1 ) {
        if ((gv_consumedByThing[autoB70D0ECD_var] == false)) {
            UnitAbilityShow(gv_unit[PlayerGroupPlayer(gv_things, 1)], gv_playerAbilityThingtoMarine[autoB70D0ECD_var], false);
        }
        else {
            UnitAbilityShow(gv_unit[PlayerGroupPlayer(gv_things, 1)], gv_playerAbilityThingtoMarine[autoB70D0ECD_var], true);
        }
    }
    autoC707AE43_ae = RandomInt(3, 6);
    autoC707AE43_var = 1;
    for ( ; autoC707AE43_var <= autoC707AE43_ae; autoC707AE43_var += 1 ) {
        lv_rand = RandomFixed(-25.0, 25.0);
        libNtve_gf_CreateModelAtPoint("BloodSplats", PointWithOffsetPolar(UnitGetPosition(EventUnit()), RandomFixed(0.5, 2.0), (AngleBetweenPoints(UnitGetPosition(libNtve_gf_KillingUnit()), UnitGetPosition(EventUnit())) + lv_rand)));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScaleAbsolute(RandomFixed(0.5, 2.0), RandomFixed(0.25, 0.5), 1.0, 0.0));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetFacing((AngleBetweenPoints(UnitGetPosition(libNtve_gf_KillingUnit()), UnitGetPosition(EventUnit())) + lv_rand)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TheThingKILLS_Init () {
    gt_TheThingKILLS = TriggerCreate("gt_TheThingKILLS_Func");
    TriggerAddEventUnitDied(gt_TheThingKILLS, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Anti-Cliff Hide
//--------------------------------------------------------------------------------------------------
bool gt_AntiCliffHide_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "Marine3") || (UnitGetType(EventUnit()) == "Marine2")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((CrossCliff(UnitGetPosition(gv_unit[EventPlayer()]), PointWithOffsetPolar(UnitGetPosition(gv_unit[EventPlayer()]), 1.0, 270.0)) == true)) {
        UnitIssueOrder(gv_unit[EventPlayer()], OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(gv_unit[EventPlayer()]), 1.0, 90.0)), c_orderQueueAddToFront);
        TechTreeAbilityAllow(EventPlayer(), AbilityCommand("stop", 0), false);
        TechTreeAbilityAllow(EventPlayer(), AbilityCommand("move", 2), false);
        TechTreeAbilityAllow(EventPlayer(), AbilityCommand("move", 0), false);
        UnitAbilityEnable(gv_unit[EventPlayer()], "attack", false);
        Wait(0.5, c_timeGame);
        TechTreeAbilityAllow(EventPlayer(), AbilityCommand("stop", 0), true);
        TechTreeAbilityAllow(EventPlayer(), AbilityCommand("move", 2), true);
        TechTreeAbilityAllow(EventPlayer(), AbilityCommand("move", 0), true);
        if ((gv_phase != "grace") && ((PlayerGroupHasPlayer(gv_flamethrowerOwner, EventPlayer()) == false) || (UnitHasBehavior(gv_unit[EventPlayer()], "FlamethrowerDummy") == true))) {
            UnitAbilityEnable(gv_unit[EventPlayer()], "attack", true);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AntiCliffHide_Init () {
    gt_AntiCliffHide = TriggerCreate("gt_AntiCliffHide_Func");
    TriggerAddEventUnitBecomesIdle(gt_AntiCliffHide, null, true);
    TriggerAddEventUnitOrder(gt_AntiCliffHide, null, AbilityCommand("move", 2));
    TriggerAddEventUnitOrder(gt_AntiCliffHide, null, AbilityCommand("stop", 0));
    TriggerAddEventUnitStartedAttack2(gt_AntiCliffHide, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Incapacitated
//--------------------------------------------------------------------------------------------------
bool gt_Incapacitated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_temp;
    actor lv_indicator;

    // Automatic Variable Declarations
    unitgroup auto3C07B5BF_g;
    int auto3C07B5BF_u;
    unit auto3C07B5BF_var;
    fixed auto2DA6CBC1_at;
    fixed auto497FBCE7_at;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) <= 2.0))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Marine3") || (UnitGetType(EventUnit()) == "Marine2")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto3C07B5BF_g = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 0.5), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto3C07B5BF_u = UnitGroupCount(auto3C07B5BF_g, c_unitCountAll);
    for (;; auto3C07B5BF_u -= 1) {
        auto3C07B5BF_var = UnitGroupUnitFromEnd(auto3C07B5BF_g, auto3C07B5BF_u);
        if (auto3C07B5BF_var == null) { break; }
        UnitSetPosition(auto3C07B5BF_var, gf_FindProperRandomPointforSpawninRegion(RegionCircle(UnitGetPosition(EventUnit()), 1.0)), false);
    }
    UnitSetState(EventUnit(), c_unitStateStunned, true);
    libNtve_gf_MakeUnitInvulnerable(EventUnit(), true);
    UnitBehaviorRemove(EventUnit(), "Medkit", 4);
    libNtve_gf_AttachModelToUnit(EventUnit(), "PsiDisruptorDebuff", "Ref_Origin");
    lv_indicator = libNtve_gf_ActorLastCreated();
    libNtve_gf_SendActorMessageToUnit(EventUnit(), libNtve_gf_SetOpacity(0.0, 0));
    libNtve_gf_AttachModelToUnit(EventUnit(), "MarineCorpse", "Ref_Origin");
    lv_temp = libNtve_gf_ActorLastCreated();
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTintColor(gv_unitPlayerColor[EventPlayer()], 2.0, 0.0));
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetHeight(0.2));
    auto2DA6CBC1_at = 0;
    while (!((UnitHasBehavior(EventUnit(), "Medkit") == true)) && auto2DA6CBC1_at <= 10.0) {
        Wait(0.1, c_timeReal);
        auto2DA6CBC1_at = auto2DA6CBC1_at + 0.1;
    }
    if ((UnitIsAlive(EventUnit()) == true)) {
        if ((UnitHasBehavior(EventUnit(), "Medkit") == true)) {
            auto497FBCE7_at = 0;
            while (!((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) >= 25.0)) && auto497FBCE7_at <= 30.0) {
                Wait(0.1, c_timeReal);
                auto497FBCE7_at = auto497FBCE7_at + 0.1;
            }
            if ((UnitIsAlive(EventUnit()) == true)) {
                UnitSetState(EventUnit(), c_unitStateStunned, false);
                libNtve_gf_MakeUnitInvulnerable(EventUnit(), false);
                libNtve_gf_SendActorMessageToUnit(EventUnit(), libNtve_gf_SetOpacity(1.0, 0));
                libNtve_gf_KillModel(lv_temp);
                libNtve_gf_KillModel(lv_indicator);
            }

        }
        else {
            gf_KilledbyTrigger(EventUnit(), EventPlayer(), EventUnitDamageSourcePlayer(), StringExternal("Param/Value/5C628882"), "GuassRifle", 10);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Incapacitated_Init () {
    gt_Incapacitated = TriggerCreate("gt_Incapacitated_Func");
    TriggerAddEventUnitDamaged(gt_Incapacitated, null, c_unitDamageTypeAny, c_unitDamageNonFatal, "GuassRifle");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Detection
//--------------------------------------------------------------------------------------------------
bool gt_Detection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomPlayerDetection;

    // Automatic Variable Declarations
    const int autoD7D63971_ae = 50;
    int autoD7D63971_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(gv_marines) > 0))) {
            return false;
        }

        if (!((PlayerType(PlayerGroupPlayer(gv_things, 1)) != c_playerTypeComputer))) {
            return false;
        }

        if (!((TriggerGetExecCount(gt_InitialIntro) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_randomPlayerDetection = PlayerGroupPlayer(gv_marines, RandomInt(1, PlayerGroupCount(gv_marines)));
    libNtve_gf_CreatePingFacingAngle(gv_things, "PingArrow", UnitGetPosition(gv_unit[lv_randomPlayerDetection]), libNtve_gf_ConvertPlayerColorToColor(gv_thePlayerColor[lv_randomPlayerDetection]), 999.0, UnitGetFacing(gv_unit[lv_randomPlayerDetection]));
    PingSetUnit(PingLastCreated(), gv_unit[lv_randomPlayerDetection]);
    PingSetScale(PingLastCreated(), 0.75);
    SoundPlay(SoundLink("UI_TerranReminderPing", -1), gv_things, 100.0, 0.0);
    autoD7D63971_var = 1;
    for ( ; autoD7D63971_var <= autoD7D63971_ae; autoD7D63971_var += 1 ) {
        Wait(0.1, c_timeReal);
        PingSetRotation(PingLastCreated(), UnitGetFacing(gv_unit[lv_randomPlayerDetection]));
    }
    PingDestroy(PingLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Detection_Init () {
    gt_Detection = TriggerCreate("gt_Detection_Func");
    TriggerEnable(gt_Detection, false);
    TriggerAddEventTimePeriodic(gt_Detection, 30.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Corpse Kill
//--------------------------------------------------------------------------------------------------
bool gt_CorpseKill_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_corpseplayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_corpseplayer = FixedToInt(UnitGetCustomValue(EventUnit(), 0));

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Corpse"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateModelAtPoint("BloodSplats", UnitGetPosition(EventUnit()));
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetFacing(libNtve_gf_RandomAngle()));
    if ((UnitGetType(libNtve_gf_KillingUnit()) == "InfestedAbomination")) {
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(EventUnit()));
        gv_consumedByThing[lv_corpseplayer] = true;
        gv_lastConsumedPlayer = lv_corpseplayer;
    }
    else if ((UnitGetType(libNtve_gf_KillingUnit()) != "InfestedAbomination")) {
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Terran, UnitGetPosition(EventUnit()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CorpseKill_Init () {
    gt_CorpseKill = TriggerCreate("gt_CorpseKill_Func");
    TriggerAddEventUnitDied(gt_CorpseKill, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pick Thing Model
//--------------------------------------------------------------------------------------------------
bool gt_PickThingModel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_thingModelPicker == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_thingModel = gf_GetThingModelID(DialogControlGetSelectedItem(EventDialogControl(), EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PickThingModel_Init () {
    gt_PickThingModel = TriggerCreate("gt_PickThingModel_Func");
    TriggerAddEventDialogControl(gt_PickThingModel, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BTN TheThing
//--------------------------------------------------------------------------------------------------
bool gt_BTNTheThing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_transformingunit;
    fixed lv_duration;
    fixed lv_maxscale;
    fixed lv_healthcarryover;
    point lv_randpoint;

    // Automatic Variable Declarations
    const int auto8BB41A78_ae = 4;
    int auto8BB41A78_var;
    const int autoDEFBEDCE_ae = 8;
    int autoDEFBEDCE_var;
    playergroup auto501B8CD1_g;
    int auto501B8CD1_var;
    const int autoCEAE9334_ae = 15;
    int autoCEAE9334_var;

    // Variable Initialization
    lv_transformingunit = gv_unit[PlayerGroupPlayer(gv_things, 1)];
    lv_duration = 0.1;
    lv_maxscale = 2.5;
    lv_healthcarryover = UnitGetPropertyFixed(lv_transformingunit, c_unitPropLifePercent, c_unitPropCurrent);

    // Actions
    if (!runActions) {
        return true;
    }

    auto8BB41A78_var = 1;
    for ( ; auto8BB41A78_var <= auto8BB41A78_ae; auto8BB41A78_var += 1 ) {
        if ((UnitInventoryItem(lv_transformingunit, auto8BB41A78_var) != null)) {
            UnitSetPosition(UnitInventoryItem(lv_transformingunit, auto8BB41A78_var), gf_FindProperRandomPointforSpawninRegion(RegionCircle(UnitGetPosition(lv_transformingunit), 1.0)), false);
        }

    }
    libNtve_gf_PauseUnit(lv_transformingunit, true);
    SoundPlayAtPoint(SoundLink("OverlordEgg_Birth", 1), PlayerGroupAll(), UnitGetPosition(gv_unit[PlayerGroupPlayer(gv_things, 1)]), 0.0, 100.0, 0.0);
    SoundPlayAtPoint(SoundLink("DiabloSmall_voxRoar", -1), PlayerGroupAll(), UnitGetPosition(gv_unit[PlayerGroupPlayer(gv_things, 1)]), 0.0, 100.0, 0.0);
    SoundPlayAtPoint(SoundLink("Ultralisk_Roar", -1), PlayerGroupAll(), UnitGetPosition(gv_unit[PlayerGroupPlayer(gv_things, 1)]), 0.0, 100.0, 0.0);
    autoDEFBEDCE_var = 1;
    for ( ; autoDEFBEDCE_var <= autoDEFBEDCE_ae; autoDEFBEDCE_var += 1 ) {
        libNtve_gf_SendActorMessageToUnit(lv_transformingunit, libNtve_gf_SetScale(RandomFixed(1.0, lv_maxscale), RandomFixed(1.0, lv_maxscale), RandomFixed(1.0, lv_maxscale), lv_duration));
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(lv_transformingunit));
        lv_randpoint = PointWithOffsetPolar(UnitGetPosition(lv_transformingunit), RandomFixed(0.0, 8.0), libNtve_gf_RandomAngle());
        if ((CrossCliff(lv_randpoint, UnitGetPosition(lv_transformingunit)) == false)) {
            libNtve_gf_CreateModelAtPoint("BloodSplats", lv_randpoint);
            ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScaleAbsolute(RandomFixed(0.5, 1.5), RandomFixed(0.25, 0.5), 1.0, 0.0));
            ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetFacing(AngleBetweenPoints(lv_randpoint, UnitGetPosition(lv_transformingunit))));
            libNtve_gf_CreateModelAtPoint("BloodSplats", PointWithOffsetPolar(UnitGetPosition(lv_transformingunit), RandomFixed(0.0, 0.75), libNtve_gf_RandomAngle()));
            ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScaleAbsolute(RandomFixed(0.5, 2.0), RandomFixed(0.25, 0.5), 1.0, 0.0));
            ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetFacing(AngleBetweenPoints(lv_randpoint, UnitGetPosition(lv_transformingunit))));
        }

        Wait(lv_duration, c_timeGame);
    }
    auto501B8CD1_g = gv_marines;
    auto501B8CD1_var = -1;
    while (true) {
        auto501B8CD1_var = PlayerGroupNextPlayer(auto501B8CD1_g, auto501B8CD1_var);
        if (auto501B8CD1_var < 0) { break; }
        libNtve_gf_SetAlliance(PlayerGroupPlayer(gv_things, 1), auto501B8CD1_var, libNtve_ge_AllianceSetting_Enemy);
        PlayerSetAlliance(EventPlayer(), c_allianceIdChat, auto501B8CD1_var, false);
        PlayerSetAlliance(EventPlayer(), c_allianceIdPassive, auto501B8CD1_var, false);
        PlayerSetAlliance(auto501B8CD1_var, c_allianceIdChat, EventPlayer(), false);
        PlayerSetAlliance(auto501B8CD1_var, c_allianceIdPassive, EventPlayer(), false);
    }
    libNtve_gf_SetAlliance(PlayerGroupPlayer(gv_things, 1), 0, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_PauseUnit(lv_transformingunit, false);
    libNtve_gf_ReplaceUnit(lv_transformingunit, "InfestedAbomination", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    gv_unit[PlayerGroupPlayer(gv_things, 1)] = libNtve_gf_LastReplacedUnit();
    UnitSetTeamColorIndex(libNtve_gf_LastReplacedUnit(), 0);
    UnitSelect(libNtve_gf_LastReplacedUnit(), PlayerGroupPlayer(gv_things, 1), true);
    UnitSetState(libNtve_gf_LastReplacedUnit(), c_unitStateSelectable, false);
    UnitSetPropertyFixed(libNtve_gf_LastReplacedUnit(), c_unitPropLifeMax, gv_theThingMaxLife);
    UnitSetPropertyFixed(libNtve_gf_LastReplacedUnit(), c_unitPropLifePercent, lv_healthcarryover);
    gf_ChangeThingsModel(gv_thingModel, libNtve_gf_LastReplacedUnit());
    gf_UpdateTheThingLifeRegeneration();
    RegionAttachToUnit(gv_proximityRegion[PlayerGroupPlayer(gv_things, 1)], libNtve_gf_LastReplacedUnit(), Point(0.0, 0.0));
    RegionAttachToUnit(gv_revealregion[PlayerGroupPlayer(gv_things, 1)], libNtve_gf_LastReplacedUnit(), Point(0.0, 0.0));
    TextTagSetText(gv_unitTag[PlayerGroupPlayer(gv_things, 1)], StringToText(""));
    TextTagAttachToUnit(gv_unitTag[PlayerGroupPlayer(gv_things, 1)], gv_unit[PlayerGroupPlayer(gv_things, 1)], 0.0);
    autoCEAE9334_var = 1;
    for ( ; autoCEAE9334_var <= autoCEAE9334_ae; autoCEAE9334_var += 1 ) {
        if ((gv_consumedByThing[autoCEAE9334_var] == false)) {
            UnitAbilityShow(gv_unit[PlayerGroupPlayer(gv_things, 1)], gv_playerAbilityThingtoMarine[autoCEAE9334_var], false);
        }
        else {
            UnitAbilityShow(gv_unit[PlayerGroupPlayer(gv_things, 1)], gv_playerAbilityThingtoMarine[autoCEAE9334_var], true);
        }
    }
    gv_unitPlayerColor[PlayerGroupPlayer(gv_things, 1)] = Color(100.00, 100.00, 100.00);
    gf_CreateThingBlipforPlayer(libNtve_gf_LastReplacedUnit());
    CameraFollowUnitGroup(PlayerGroupPlayer(gv_things, 1), libNtve_gf_ConvertUnitToUnitGroup(libNtve_gf_LastReplacedUnit()), true, false);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(libNtve_gf_LastReplacedUnit()));
    if ((PlayerGroupCount(gv_playersSpectatingThing) > 0)) {
        DialogControlSelectItem(gv_spectatorFollowDialogItem, gv_playersSpectatingThing, (gv_playerIndex[PlayerGroupPlayer(gv_things, 1)] + 1));
        DialogControlSelectItem(gv_spectatorFollowDialogItem, gv_playersSpectatingThing, gv_playerIndex[PlayerGroupPlayer(gv_things, 1)]);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BTNTheThing_Init () {
    gt_BTNTheThing = TriggerCreate("gt_BTNTheThing_Func");
    TriggerAddEventUnitAbility(gt_BTNTheThing, null, AbilityCommand("TransformtoThing", 255), c_abilEffectStageChannel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BTN Marine
//--------------------------------------------------------------------------------------------------
bool gt_BTNMarine_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_transformingunit;
    fixed lv_healthcarryover;
    fixed lv_energycarryover;
    int lv_transformingcolorplayer;

    // Automatic Variable Declarations
    const int autoCAD77830_ae = 15;
    int autoCAD77830_var;
    playergroup auto13CFA096_g;
    int auto13CFA096_var;

    // Variable Initialization
    lv_transformingunit = gv_unit[EventPlayer()];
    lv_healthcarryover = UnitGetPropertyFixed(lv_transformingunit, c_unitPropLifePercent, c_unitPropCurrent);
    lv_energycarryover = UnitGetPropertyFixed(lv_transformingunit, c_unitPropEnergyPercent, c_unitPropCurrent);

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ReplaceUnit(lv_transformingunit, "Marine2", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    gv_unit[EventPlayer()] = libNtve_gf_LastReplacedUnit();
    UnitSetPropertyFixed(libNtve_gf_LastReplacedUnit(), c_unitPropLifePercent, lv_healthcarryover);
    UnitSetPropertyFixed(libNtve_gf_LastReplacedUnit(), c_unitPropEnergyPercent, lv_energycarryover);
    UnitAbilityShow(libNtve_gf_LastReplacedUnit(), "LockDoor2", false);
    UnitAbilityShow(libNtve_gf_LastReplacedUnit(), "ToggleFlamethrower", false);
    UnitAbilityShow(libNtve_gf_LastReplacedUnit(), "PsiStorm2", false);
    UnitAbilityShow(libNtve_gf_LastReplacedUnit(), "ThrowMolotov", false);
    if ((EventButtonPressed() == "OriginalColor")) {
        lv_transformingcolorplayer = EventPlayer();
    }
    else {
        if ((EventButtonPressed() == "PreviousColor")) {
            lv_transformingcolorplayer = gv_lastUsedColorPlayer;
        }
        else {
            if ((EventButtonPressed() == "LastConsumed")) {
                lv_transformingcolorplayer = gv_lastConsumedPlayer;
            }
            else {
                autoCAD77830_var = 1;
                for ( ; autoCAD77830_var <= autoCAD77830_ae; autoCAD77830_var += 1 ) {
                    if ((gv_playerButtonThingtoMarine[autoCAD77830_var] == EventButtonPressed())) {
                        lv_transformingcolorplayer = autoCAD77830_var;
                    }

                }
            }
        }
    }
    gv_lastUsedColorPlayer = lv_transformingcolorplayer;
    UnitSetTeamColorIndex(libNtve_gf_LastReplacedUnit(), gv_thePlayerColor[lv_transformingcolorplayer]);
    if ((gv_playermodel[lv_transformingcolorplayer] != "Marine")) {
        libNtve_gf_SendActorMessageToUnit(gv_unit[EventPlayer()], libNtve_gf_ModelSwap(gv_playermodel[lv_transformingcolorplayer], 0));
    }

    gv_unitPlayerColor[EventPlayer()] = libNtve_gf_ConvertPlayerColorToColor(gv_thePlayerColor[lv_transformingcolorplayer]);
    TextTagSetText(gv_unitTag[EventPlayer()], (StringExternal("Param/Value/F57FB5AE") + gv_unitTagText[lv_transformingcolorplayer]));
    TextTagSetColor(gv_unitTag[EventPlayer()], c_textTagColorText, gv_unitPlayerColor[lv_transformingcolorplayer]);
    TextTagSetPosition(gv_unitTag[EventPlayer()], UnitGetPosition(gv_unit[EventPlayer()]), 1.0);
    TextTagAttachToUnit(gv_unitTag[EventPlayer()], gv_unit[EventPlayer()], 0.0);
    UnitSetState(libNtve_gf_LastReplacedUnit(), c_unitStateSelectable, true);
    UnitSelect(libNtve_gf_LastReplacedUnit(), EventPlayer(), true);
    UnitSetState(libNtve_gf_LastReplacedUnit(), c_unitStateSelectable, false);
    UnitSetPropertyFixed(libNtve_gf_LastReplacedUnit(), c_unitPropLifeRegen, UnitGetPropertyFixed(libNtve_gf_LastReplacedUnit(), c_unitPropLifeRegen, c_unitPropNormal));
    gf_CreateVicBlipforPlayer(libNtve_gf_LastReplacedUnit());
    RegionAttachToUnit(gv_proximityRegion[EventPlayer()], libNtve_gf_LastReplacedUnit(), Point(0.0, 0.0));
    TextTagAttachToUnit(gv_chatTextLabel[EventPlayer()], libNtve_gf_LastReplacedUnit(), 1.0);
    CameraFollowUnitGroup(EventPlayer(), libNtve_gf_ConvertUnitToUnitGroup(libNtve_gf_LastReplacedUnit()), true, false);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(lv_transformingunit));
    auto13CFA096_g = gv_marines;
    auto13CFA096_var = -1;
    while (true) {
        auto13CFA096_var = PlayerGroupNextPlayer(auto13CFA096_g, auto13CFA096_var);
        if (auto13CFA096_var < 0) { break; }
        libNtve_gf_SetAlliance(EventPlayer(), auto13CFA096_var, libNtve_ge_AllianceSetting_Ally);
        PlayerSetAlliance(EventPlayer(), c_allianceIdChat, auto13CFA096_var, true);
        PlayerSetAlliance(EventPlayer(), c_allianceIdPassive, auto13CFA096_var, true);
        PlayerSetAlliance(auto13CFA096_var, c_allianceIdChat, EventPlayer(), true);
        PlayerSetAlliance(auto13CFA096_var, c_allianceIdPassive, EventPlayer(), true);
    }
    RegionAttachToUnit(gv_revealregion[EventPlayer()], gv_unit[EventPlayer()], Point(0.0, 0.0));
    if ((PlayerGroupCount(gv_playersSpectatingThing) > 0)) {
        DialogControlSelectItem(gv_spectatorFollowDialogItem, gv_playersSpectatingThing, (gv_playerIndex[PlayerGroupPlayer(gv_things, 1)] + 1));
        DialogControlSelectItem(gv_spectatorFollowDialogItem, gv_playersSpectatingThing, gv_playerIndex[PlayerGroupPlayer(gv_things, 1)]);
    }

    UnitAbilityEnable(libNtve_gf_LastReplacedUnit(), "attack", false);
    Wait(3.0, c_timeGame);
    UnitAbilityEnable(libNtve_gf_LastReplacedUnit(), "attack", true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BTNMarine_Init () {
    gt_BTNMarine = TriggerCreate("gt_BTNMarine_Func");
    TriggerAddEventButtonPressed(gt_BTNMarine, c_playerAny, "Blue");
    TriggerAddEventButtonPressed(gt_BTNMarine, c_playerAny, "Green");
    TriggerAddEventButtonPressed(gt_BTNMarine, c_playerAny, "Red");
    TriggerAddEventButtonPressed(gt_BTNMarine, c_playerAny, "LightBlue");
    TriggerAddEventButtonPressed(gt_BTNMarine, c_playerAny, "LightGreen");
    TriggerAddEventButtonPressed(gt_BTNMarine, c_playerAny, "LightRed");
    TriggerAddEventButtonPressed(gt_BTNMarine, c_playerAny, "DarkBlue");
    TriggerAddEventButtonPressed(gt_BTNMarine, c_playerAny, "DarkGreen");
    TriggerAddEventButtonPressed(gt_BTNMarine, c_playerAny, "DarkRed");
    TriggerAddEventButtonPressed(gt_BTNMarine, c_playerAny, "Yellow");
    TriggerAddEventButtonPressed(gt_BTNMarine, c_playerAny, "LightYellow");
    TriggerAddEventButtonPressed(gt_BTNMarine, c_playerAny, "DarkYellow");
    TriggerAddEventButtonPressed(gt_BTNMarine, c_playerAny, "Purple");
    TriggerAddEventButtonPressed(gt_BTNMarine, c_playerAny, "Gray");
    TriggerAddEventButtonPressed(gt_BTNMarine, c_playerAny, "Black");
    TriggerAddEventButtonPressed(gt_BTNMarine, c_playerAny, "OriginalColor");
    TriggerAddEventButtonPressed(gt_BTNMarine, c_playerAny, "PreviousColor");
    TriggerAddEventButtonPressed(gt_BTNMarine, c_playerAny, "LastConsumed");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Burn
//--------------------------------------------------------------------------------------------------
bool gt_Burn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto45FEE799_ae = 4;
    int auto45FEE799_var;
    const int autoFDE39C1B_ae = 4;
    int autoFDE39C1B_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "HasFlameThrower") == true) && (gv_flamethrowerGas >= 10)) {
        gv_flamethrowerGas -= 10;
        libNtve_gf_SetDialogItemCurrentValue(gv_unitBarItem[PlayerGroupPlayer(gv_flamethrowerOwner, 1)][gv_flamethrowerBarNumber], gv_flamethrowerGas, PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(gv_unitBarItem[PlayerGroupPlayer(gv_flamethrowerOwner, 1)][gv_flamethrowerBarNumber], Color((100.0 - (gv_flamethrowerGas / 2.0)), (gv_flamethrowerGas / 2.0), 0.0), PlayerGroupAll());
        if ((gv_flamethrowerGas < 10)) {
            UnitBehaviorRemove(gv_unit[PlayerGroupPlayer(gv_flamethrowerOwner, 1)], "Fire", 1);
        }

    }
    else {
        if ((UnitHasBehavior(EventUnit(), "HasMolotov") == true)) {
            autoFDE39C1B_var = 1;
            for ( ; autoFDE39C1B_var <= autoFDE39C1B_ae; autoFDE39C1B_var += 1 ) {
                if ((UnitGetType(UnitInventoryItem(EventUnit(), autoFDE39C1B_var)) == "Molotov")) {
                    UnitInventoryRemove(UnitInventoryItem(EventUnit(), autoFDE39C1B_var));
                    break;
                }

            }
        }
        else {
            if ((UnitHasBehavior(EventUnit(), "HasGrenade") == true)) {
                auto45FEE799_var = 1;
                for ( ; auto45FEE799_var <= auto45FEE799_ae; auto45FEE799_var += 1 ) {
                    if ((UnitGetType(UnitInventoryItem(EventUnit(), auto45FEE799_var)) == "Grenade")) {
                        UnitInventoryRemove(UnitInventoryItem(EventUnit(), auto45FEE799_var));
                        break;
                    }

                }
            }
            else {
                UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            }
        }
    }
    if ((UnitGroupCount(UnitGroupFilter("Grenade", c_playerAny, UnitInventoryGroup(EventUnit()), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) == 0)) {
        UnitAbilityShow(EventUnit(), "PsiStorm2", false);
    }
    else {
        UnitAbilityShow(EventUnit(), "PsiStorm2", true);
    }
    if ((UnitGroupCount(UnitGroupFilter("Molotov", c_playerAny, UnitInventoryGroup(EventUnit()), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) == 0)) {
        UnitAbilityShow(EventUnit(), "ThrowMolotov", false);
    }
    else {
        UnitAbilityShow(EventUnit(), "ThrowMolotov", true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Burn_Init () {
    gt_Burn = TriggerCreate("gt_Burn_Func");
    TriggerAddEventUnitAbility(gt_Burn, null, AbilityCommand("Burn", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Roar
//--------------------------------------------------------------------------------------------------
bool gt_Roar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(gv_unit[EventPlayer()]) == "InfestedAbomination"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlay(SoundLink("DiabloSmall_voxRoar", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundPlay(SoundLink("Ultralisk_Roar", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(20.0, c_timeReal);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Roar_Init () {
    gt_Roar = TriggerCreate("gt_Roar_Func");
    TriggerAddEventChatMessage(gt_Roar, c_playerAny, "roar", true);
    TriggerAddEventChatMessage(gt_Roar, c_playerAny, "rawr", true);
    TriggerAddEventChatMessage(gt_Roar, c_playerAny, "woof", true);
    TriggerAddEventChatMessage(gt_Roar, c_playerAny, "meow", true);
    TriggerAddEventChatMessage(gt_Roar, c_playerAny, ".rar", true);
    TriggerAddEventChatMessage(gt_Roar, c_playerAny, "moo", true);
    TriggerAddEventChatMessage(gt_Roar, c_playerAny, "cougar", true);
    TriggerAddEventChatMessage(gt_Roar, c_playerAny, "Vicboy!", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Consume Animation
//--------------------------------------------------------------------------------------------------
bool gt_ConsumeAnimation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Spell 03", 0, c_animTimeDefault);
    Wait(2.0, c_timeGame);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConsumeAnimation_Init () {
    gt_ConsumeAnimation = TriggerCreate("gt_ConsumeAnimation_Func");
    TriggerAddEventUnitAbility(gt_ConsumeAnimation, null, AbilityCommand("ThingConsume", 0), c_abilEffectStagePrep, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Give Item
//--------------------------------------------------------------------------------------------------
bool gt_GiveItem_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(EventUnitInventoryItem(), UnitGetPosition(EventUnit()), false);
    UnitIssueOrder(EventUnit(), OrderTargetingUnit(null, EventUnitInventoryItem()), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GiveItem_Init () {
    gt_GiveItem = TriggerCreate("gt_GiveItem_Func");
    TriggerAddEventUnitInventoryChange(gt_GiveItem, null, c_unitInventoryChangeGives, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Anti Cliff Hiding
//--------------------------------------------------------------------------------------------------
bool gt_AntiCliffHiding_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((CrossCliff(UnitGetPosition(EventUnitInventoryItem()), PointWithOffset(UnitGetPosition(EventUnitInventoryItem()), 0.0, -1.5)) == true))) {
            return false;
        }

        if (!((UnitGetCustomValue(EventUnitInventoryItem(), 0) == BoolToInt(false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(EventUnitInventoryItem(), PointWithOffset(UnitGetPosition(EventUnitInventoryItem()), 0.0, 1.5), false);
    while ((PointPathingPassable(UnitGetPosition(EventUnitInventoryItem())) == false)) {
        UnitSetPosition(EventUnitInventoryItem(), PointWithOffset(UnitGetPosition(EventUnitInventoryItem()), 0.0, 1.0), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AntiCliffHiding_Init () {
    gt_AntiCliffHiding = TriggerCreate("gt_AntiCliffHiding_Func");
    TriggerAddEventUnitInventoryChange(gt_AntiCliffHiding, null, c_unitInventoryChangeDrops, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Quick Drop
//--------------------------------------------------------------------------------------------------
bool gt_QuickDrop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_UnitCarriesItemType(EventUnit(), "Flamethrower") == true)) {
        UnitSetPosition(gf_GetRandomItemofItemTypeinUnit(EventUnit(), "Flamethrower"), UnitGetPosition(EventUnit()), false);
    }

    if ((gf_UnitCarriesItemType(EventUnit(), "RiotShield") == true)) {
        UnitSetPosition(gf_GetRandomItemofItemTypeinUnit(EventUnit(), "RiotShield"), UnitGetPosition(EventUnit()), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QuickDrop_Init () {
    gt_QuickDrop = TriggerCreate("gt_QuickDrop_Func");
    TriggerAddEventUnitAbility(gt_QuickDrop, null, AbilityCommand("LockDoor2", 255), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Item Above Door
//--------------------------------------------------------------------------------------------------
bool gt_ItemAboveDoor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoA49EE604_g;
    int autoA49EE604_u;
    unit autoA49EE604_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoA49EE604_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterItem), 0, 0, (1 << (c_targetFilterDead - 32))), 0);
    autoA49EE604_u = UnitGroupCount(autoA49EE604_g, c_unitCountAll);
    for (;; autoA49EE604_u -= 1) {
        autoA49EE604_var = UnitGroupUnitFromEnd(autoA49EE604_g, autoA49EE604_u);
        if (autoA49EE604_var == null) { break; }
        if ((CliffLevel(UnitGetPosition(autoA49EE604_var)) == 2)) {
            UnitSetPosition(autoA49EE604_var, RegionRandomPoint(gv_selectedRegion), false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ItemAboveDoor_Init () {
    gt_ItemAboveDoor = TriggerCreate("gt_ItemAboveDoor_Func");
    TriggerEnable(gt_ItemAboveDoor, false);
    TriggerAddEventTimePeriodic(gt_ItemAboveDoor, 30.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Acquire Molotov
//--------------------------------------------------------------------------------------------------
bool gt_AcquireMolotov_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "Molotov"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityShow(EventUnit(), "ThrowMolotov", true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AcquireMolotov_Init () {
    gt_AcquireMolotov = TriggerCreate("gt_AcquireMolotov_Func");
    TriggerAddEventUnitInventoryChange(gt_AcquireMolotov, null, c_unitInventoryChangePicksUp, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Drop Molotov
//--------------------------------------------------------------------------------------------------
bool gt_DropMolotov_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "Molotov"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetCustomValue(EventUnitInventoryItem(), 0) == BoolToInt(false))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, UnitGetType(EventUnitInventoryItem()), c_unitCreateIgnorePlacement, 0, UnitGetPosition(EventUnitInventoryItem()));
        UnitRemove(EventUnitInventoryItem());
    }

    if ((UnitGetType(UnitInventoryItem(EventUnit(), 1)) != "Molotov") && (UnitGetType(UnitInventoryItem(EventUnit(), 2)) != "Molotov") && (UnitGetType(UnitInventoryItem(EventUnit(), 3)) != "Molotov") && (UnitGetType(UnitInventoryItem(EventUnit(), 4)) != "Molotov")) {
        UnitAbilityShow(EventUnit(), "ThrowMolotov", false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DropMolotov_Init () {
    gt_DropMolotov = TriggerCreate("gt_DropMolotov_Func");
    TriggerAddEventUnitInventoryChange(gt_DropMolotov, null, c_unitInventoryChangeDrops, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Throw Molotov
//--------------------------------------------------------------------------------------------------
bool gt_ThrowMolotov_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_selectedmolotov;

    // Automatic Variable Declarations
    const int autoECCD6068_ae = 4;
    int autoECCD6068_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoECCD6068_var = 1;
    for ( ; autoECCD6068_var <= autoECCD6068_ae; autoECCD6068_var += 1 ) {
        if ((UnitGetType(UnitInventoryItem(EventUnit(), autoECCD6068_var)) == "Molotov")) {
            lv_selectedmolotov = UnitInventoryItem(EventUnit(), autoECCD6068_var);
            UnitSetCustomValue(lv_selectedmolotov, 0, BoolToInt(true));
            UnitSetPosition(lv_selectedmolotov, UnitGetPosition(EventUnit()), false);
            gf_MolotovThrow(EventUnit(), lv_selectedmolotov, EventUnitTargetPoint(), UnitGetOwner(EventUnit()));
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ThrowMolotov_Init () {
    gt_ThrowMolotov = TriggerCreate("gt_ThrowMolotov_Func");
    TriggerAddEventUnitAbility(gt_ThrowMolotov, null, AbilityCommand("ThrowMolotov", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Acquire Grenade v2
//--------------------------------------------------------------------------------------------------
bool gt_AcquireGrenadev2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "Grenade"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroupFilter("Grenade", c_playerAny, UnitInventoryGroup(EventUnit()), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) == 0)) {
        UnitAbilityShow(EventUnit(), "PsiStorm2", false);
    }
    else {
        UnitAbilityShow(EventUnit(), "PsiStorm2", true);
    }
    if ((UnitGetCustomValue(EventUnitInventoryItem(), 0) == 1.0)) {
        UnitInventoryMove(EventUnitInventoryItem(), 1, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AcquireGrenadev2_Init () {
    gt_AcquireGrenadev2 = TriggerCreate("gt_AcquireGrenadev2_Func");
    TriggerAddEventUnitInventoryChange(gt_AcquireGrenadev2, null, c_unitInventoryChangePicksUp, null);
    TriggerAddEventUnitInventoryChange(gt_AcquireGrenadev2, null, c_unitInventoryChangeDrops, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cook and Explode Grenade v2
//--------------------------------------------------------------------------------------------------
bool gt_CookandExplodeGrenadev2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_cookingtime;
    int lv_grenadetexttag;
    unit lv_pickedgrenade;

    // Automatic Variable Declarations
    playergroup auto96556C64_g;
    int auto96556C64_var;

    // Variable Initialization
    lv_cookingtime = 3.5;
    lv_grenadetexttag = c_textTagNone;
    lv_pickedgrenade = gf_FindFirstGrenadev2(gv_unit[EventPlayer()]);

    // Conditions
    if (testConds) {
        if (!((UnitGetCustomValue(lv_pickedgrenade, 0) != 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_pickedgrenade == null)) {
        UnitAbilityShow(gv_unit[EventPlayer()], "PsiStorm2", false);
        return true;
    }

    UnitSetCustomValue(lv_pickedgrenade, 0, 1.0);
    UnitInventoryMove(lv_pickedgrenade, 1, 1);
    TextTagCreate(StringToText(""), 24, UnitGetPosition(lv_pickedgrenade), 1.0, true, false, PlayerGroupAll());
    lv_grenadetexttag = TextTagLastCreated();
    TextTagAttachToUnit(TextTagLastCreated(), gv_unit[EventPlayer()], 1.0);
    TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
    while ((lv_cookingtime > 0.0)) {
        if ((UnitGroupHasUnit(UnitInventoryGroup(gv_unit[EventPlayer()]), lv_pickedgrenade) == false)) {
            TextTagAttachToUnit(TextTagLastCreated(), lv_pickedgrenade, 1.0);
        }

        lv_cookingtime -= 0.1;
        TextTagSetText(lv_grenadetexttag, TextWithColor(FixedToTextAdvanced(lv_cookingtime, c_formatNumberStyleNormal, true, 1, 1), libNtve_gf_ConvertPlayerColorToColor(3)));
        Wait(0.1, c_timeReal);
    }
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, UnitGetPosition(lv_pickedgrenade));
    PlayerCreateEffectPoint(EventPlayer(), "Damage", UnitGetPosition(lv_pickedgrenade));
    auto96556C64_g = PlayerGroupActive();
    auto96556C64_var = -1;
    while (true) {
        auto96556C64_var = PlayerGroupNextPlayer(auto96556C64_g, auto96556C64_var);
        if (auto96556C64_var < 0) { break; }
        if ((DistanceBetweenPoints(UnitGetPosition(lv_pickedgrenade), UnitGetPosition(gv_unit[auto96556C64_var])) <= 4.0)) {
            PlayerCreateEffectUnit(EventPlayer(), "PunisherGrenadesSlow2", gv_unit[auto96556C64_var]);
            gf_BloodfromGrenadev2(UnitGetPosition(lv_pickedgrenade), gv_unit[auto96556C64_var]);
            CameraShakeStart(auto96556C64_var, c_cameraPositionEye, c_cameraDirectionXYZ, (3.0 * (4.0 - DistanceBetweenPoints(UnitGetPosition(lv_pickedgrenade), UnitGetPosition(gv_unit[auto96556C64_var])))), 2.0, 100.0, 0.5);
        }

    }
    TextTagDestroy(lv_grenadetexttag);
    UnitRemove(lv_pickedgrenade);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CookandExplodeGrenadev2_Init () {
    gt_CookandExplodeGrenadev2 = TriggerCreate("gt_CookandExplodeGrenadev2_Func");
    TriggerAddEventButtonPressed(gt_CookandExplodeGrenadev2, c_playerAny, "ThrowGrenade");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Throw Grenade v2
//--------------------------------------------------------------------------------------------------
bool gt_ThrowGrenadev2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_callLeapFunction;
    unit lv_pickedgrenade;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pickedgrenade = gf_FindFirstGrenadev2(gv_unit[EventPlayer()]);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetCustomValue(lv_pickedgrenade, 0, BoolToInt(true));
    UnitSetPosition(lv_pickedgrenade, UnitGetPosition(EventUnit()), false);
    libNtve_gf_SendActorMessageToUnit(lv_pickedgrenade, libNtve_gf_ModelSwap("TossGrenadeWeapon", 0));
    libNtve_gf_SendActorMessageToUnit(lv_pickedgrenade, libNtve_gf_SetScale(1.0, 1.0, 1.0, 0.0));
    lv_callLeapFunction = gf_FlyGrenadev2(lv_pickedgrenade, EventUnitTargetPoint(), "Default");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ThrowGrenadev2_Init () {
    gt_ThrowGrenadev2 = TriggerCreate("gt_ThrowGrenadev2_Func");
    TriggerAddEventUnitAbility(gt_ThrowGrenadev2, null, AbilityCommand("PsiStorm2", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Acquire Flamethrower
//--------------------------------------------------------------------------------------------------
bool gt_AcquireFlamethrower_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(gv_flamethrowerOwner) == 0))) {
            return false;
        }

        if (!((gv_flamethrower == EventUnitInventoryItem()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(gv_flamethrowerOwner, EventPlayer());
    if ((DialogControlIsVisible(gv_unitBarItem[EventPlayer()][3], EventPlayer()) == false)) {
        gv_flamethrowerBarNumber = 4;
    }
    else {
        gv_flamethrowerBarNumber = 5;
    }
    libNtve_gf_SetDialogItemMaximumValue(gv_unitBarItem[EventPlayer()][gv_flamethrowerBarNumber], 70.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_unitBarItem[EventPlayer()][gv_flamethrowerBarNumber], Color((100.0 - (gv_flamethrowerGas * 1.4286)), (gv_flamethrowerGas * 1.4286), 0.0), PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(gv_unitBarItem[EventPlayer()][gv_flamethrowerBarNumber], gv_flamethrowerGas, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_unitBarLabel[EventPlayer()][gv_flamethrowerBarNumber], StringExternal("Param/Value/D102FE28"), PlayerGroupAll());
    UnitBehaviorRemove(gv_unit[EventPlayer()], "Stimpack", 1);
    UnitWeaponRemove(gv_unit[EventPlayer()], "GuassRifle");
    UnitWeaponAdd(gv_unit[EventPlayer()], "InfernalFlameThrower", "FixedRight");
    UnitAbilityShow(gv_unit[PlayerGroupPlayer(gv_flamethrowerOwner, 1)], "LockDoor2", true);
    UnitAbilityShow(gv_unit[EventPlayer()], "ToggleFlamethrower", true);
    libNtve_gf_AttachModelToUnit(gv_unit[EventPlayer()], "FlamethrowerOwnership", "Ref_Weapon");
    gv_flamethrowerModel = libNtve_gf_ActorLastCreated();
    UnitAbilityEnable(gv_unit[EventPlayer()], "attack", false);
    UnitAbilityEnable(gv_unit[EventPlayer()], "Stimpack", false);
    DialogControlSetVisible(gv_unitBarItem[EventPlayer()][gv_flamethrowerBarNumber], PlayerGroupAll(), true);
    DialogControlSetVisible(gv_unitBarLabel[EventPlayer()][gv_flamethrowerBarNumber], PlayerGroupAll(), true);
    if ((gv_flamethrowerGas >= 10)) {
        UnitBehaviorAdd(UnitInventoryUnit(EventUnitInventoryItem()), "Fire", UnitInventoryUnit(EventUnitInventoryItem()), 1);
    }

    if (((gf_UnitCarriesItemType(EventUnit(), "InfraredGoggles") == true) || (gf_UnitCarriesItemType(EventUnit(), "RiotShield") == true))) {
        UnitSetPosition(EventUnitInventoryItem(), UnitGetPosition(EventUnit()), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AcquireFlamethrower_Init () {
    gt_AcquireFlamethrower = TriggerCreate("gt_AcquireFlamethrower_Func");
    TriggerAddEventUnitInventoryChange(gt_AcquireFlamethrower, null, c_unitInventoryChangePicksUp, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Flamethrower
//--------------------------------------------------------------------------------------------------
bool gt_AttackFlamethrower_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_flamethrowerGas > 4)) {
        gv_flamethrowerGas -= 4;
        libNtve_gf_SetDialogItemCurrentValue(gv_unitBarItem[EventUnitDamageSourcePlayer()][gv_flamethrowerBarNumber], gv_flamethrowerGas, PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(gv_unitBarItem[EventUnitDamageSourcePlayer()][gv_flamethrowerBarNumber], Color((100.0 - (gv_flamethrowerGas / 2.0)), (gv_flamethrowerGas / 2.0), 0.0), PlayerGroupAll());
    }
    else {
        if ((gv_flamethrowerGas < 1)) {
            UnitIssueOrder(gv_unit[PlayerGroupPlayer(gv_flamethrowerOwner, 1)], Order(AbilityCommand("ToggleFlamethrower", 1)), c_orderQueueReplace);
        }

        if ((gv_flamethrowerGas < 5)) {
            UnitBehaviorRemove(gv_unit[PlayerGroupPlayer(gv_flamethrowerOwner, 1)], "Fire", 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackFlamethrower_Init () {
    gt_AttackFlamethrower = TriggerCreate("gt_AttackFlamethrower_Func");
    TriggerAddEventUnitDamaged(gt_AttackFlamethrower, null, c_unitDamageTypeAny, c_unitDamageEither, "InfernalFlameThrower");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Drop Flamethrower
//--------------------------------------------------------------------------------------------------
bool gt_DropFlamethrower_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == PlayerGroupPlayer(gv_flamethrowerOwner, 1)))) {
            return false;
        }

        if (!((gv_flamethrower == EventUnitInventoryItem()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(gv_unit[PlayerGroupPlayer(gv_flamethrowerOwner, 1)], "Fire", 1);
    UnitIssueOrder(gv_unit[PlayerGroupPlayer(gv_flamethrowerOwner, 1)], Order(AbilityCommand("ToggleFlamethrower", 1)), c_orderQueueReplace);
    UnitWeaponRemove(gv_unit[PlayerGroupPlayer(gv_flamethrowerOwner, 1)], "InfernalFlameThrower");
    UnitWeaponAdd(gv_unit[PlayerGroupPlayer(gv_flamethrowerOwner, 1)], "GuassRifle", "FixedRight");
    ActorSend(gv_flamethrowerModel, "Destroy Immediate");
    if ((gf_UnitCarriesItemType(EventUnit(), "RiotShield") == false)) {
        UnitAbilityShow(gv_unit[PlayerGroupPlayer(gv_flamethrowerOwner, 1)], "LockDoor2", false);
    }

    UnitAbilityEnable(gv_unit[PlayerGroupPlayer(gv_flamethrowerOwner, 1)], "Stimpack", true);
    UnitAbilityShow(gv_unit[PlayerGroupPlayer(gv_flamethrowerOwner, 1)], "ToggleFlamethrower", false);
    if ((gv_phase != "grace")) {
        UnitAbilityEnable(gv_unit[PlayerGroupPlayer(gv_flamethrowerOwner, 1)], "attack", true);
    }

    DialogControlSetVisible(gv_unitBarItem[PlayerGroupPlayer(gv_flamethrowerOwner, 1)][gv_flamethrowerBarNumber], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_unitBarLabel[PlayerGroupPlayer(gv_flamethrowerOwner, 1)][gv_flamethrowerBarNumber], PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemText(gv_unitBarLabel[PlayerGroupPlayer(gv_flamethrowerOwner, 1)][gv_flamethrowerBarNumber], StringToText(""), PlayerGroupAll());
    PlayerGroupRemove(gv_flamethrowerOwner, PlayerGroupPlayer(gv_flamethrowerOwner, 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DropFlamethrower_Init () {
    gt_DropFlamethrower = TriggerCreate("gt_DropFlamethrower_Func");
    TriggerAddEventUnitInventoryChange(gt_DropFlamethrower, null, c_unitInventoryChangeDrops, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Activate Flamethrower
//--------------------------------------------------------------------------------------------------
bool gt_ActivateFlamethrower_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_flamethrowerGas > 0)) {
        ActorSend(gv_flamethrowerModel, "Destroy");
        libNtve_gf_AttachModelToUnit(gv_unit[PlayerGroupPlayer(gv_flamethrowerOwner, 1)], "FlamethrowerReady", "Ref_Weapon");
        gv_flamethrowerModel = libNtve_gf_ActorLastCreated();
        UnitAbilityEnable(gv_unit[PlayerGroupPlayer(gv_flamethrowerOwner, 1)], "attack", true);
    }
    else {
        UnitIssueOrder(gv_unit[PlayerGroupPlayer(gv_flamethrowerOwner, 1)], Order(AbilityCommand("ToggleFlamethrower", 1)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ActivateFlamethrower_Init () {
    gt_ActivateFlamethrower = TriggerCreate("gt_ActivateFlamethrower_Func");
    TriggerAddEventUnitAbility(gt_ActivateFlamethrower, null, AbilityCommand("ToggleFlamethrower", 0), c_abilBehaviorStageToggled, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Deactivate Flamethrower
//--------------------------------------------------------------------------------------------------
bool gt_DeactivateFlamethrower_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    ActorSend(gv_flamethrowerModel, "Destroy");
    libNtve_gf_AttachModelToUnit(gv_unit[PlayerGroupPlayer(gv_flamethrowerOwner, 1)], "FlamethrowerOwnership", "Ref_Weapon");
    gv_flamethrowerModel = libNtve_gf_ActorLastCreated();
    UnitAbilityEnable(gv_unit[PlayerGroupPlayer(gv_flamethrowerOwner, 1)], "attack", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeactivateFlamethrower_Init () {
    gt_DeactivateFlamethrower = TriggerCreate("gt_DeactivateFlamethrower_Func");
    TriggerAddEventUnitAbility(gt_DeactivateFlamethrower, null, AbilityCommand("ToggleFlamethrower", 1), c_abilBehaviorStageUntoggled, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Drain Flamethrower
//--------------------------------------------------------------------------------------------------
bool gt_DrainFlamethrower_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(gv_flamethrowerOwner) == 1))) {
            return false;
        }

        if (!((UnitHasBehavior(gv_unit[PlayerGroupPlayer(gv_flamethrowerOwner, 1)], "FlamethrowerDummy") == true))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(PlayerGroupPlayer(gv_flamethrowerOwner, 1), "MarineFuelEfficient", c_techCountQueuedOrBetter) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_flamethrowerGas > 1)) {
        gv_flamethrowerGas -= 1;
        libNtve_gf_SetDialogItemCurrentValue(gv_unitBarItem[PlayerGroupPlayer(gv_flamethrowerOwner, 1)][gv_flamethrowerBarNumber], gv_flamethrowerGas, PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(gv_unitBarItem[PlayerGroupPlayer(gv_flamethrowerOwner, 1)][gv_flamethrowerBarNumber], Color((100.0 - (gv_flamethrowerGas / 2.0)), (gv_flamethrowerGas / 2.0), 0.0), PlayerGroupAll());
    }
    else {
        UnitIssueOrder(gv_unit[PlayerGroupPlayer(gv_flamethrowerOwner, 1)], Order(AbilityCommand("ToggleFlamethrower", 1)), c_orderQueueReplace);
    }
    if ((gv_flamethrowerGas < 10)) {
        UnitBehaviorRemove(gv_unit[PlayerGroupPlayer(gv_flamethrowerOwner, 1)], "Fire", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DrainFlamethrower_Init () {
    gt_DrainFlamethrower = TriggerCreate("gt_DrainFlamethrower_Func");
    TriggerAddEventTimePeriodic(gt_DrainFlamethrower, 1.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Drop Radio v2
//--------------------------------------------------------------------------------------------------
bool gt_DropRadiov2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "Radio"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDirective, StringExternal("Param/Value/875FE218"));
    Wait(10.0, c_timeReal);
    UIClearMessages(PlayerGroupSingle(EventPlayer()), c_messageAreaDirective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DropRadiov2_Init () {
    gt_DropRadiov2 = TriggerCreate("gt_DropRadiov2_Func");
    TriggerAddEventUnitInventoryChange(gt_DropRadiov2, null, c_unitInventoryChangeDrops, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talk Radio v2
//--------------------------------------------------------------------------------------------------
bool gt_TalkRadiov2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroupFilter("Radio", c_playerAny, UnitInventoryGroup(gv_unit[EventPlayer()]), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_TalkRadio(UnitGroupRandomUnit(UnitGroupFilter("Radio", c_playerAny, UnitInventoryGroup(gv_unit[EventPlayer()]), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive), gv_unit[EventPlayer()], EventChatMessage(false));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TalkRadiov2_Init () {
    gt_TalkRadiov2 = TriggerCreate("gt_TalkRadiov2_Func");
    TriggerAddEventChatMessage(gt_TalkRadiov2, c_playerAny, ">", false);
    TriggerAddEventChatMessage(gt_TalkRadiov2, c_playerAny, "=", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: One Radio Rule
//--------------------------------------------------------------------------------------------------
bool gt_OneRadioRule_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "Radio"))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroupFilter("Radio", c_playerAny, UnitInventoryGroup(EventUnit()), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) > 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(EventUnitInventoryItem(), UnitGetPosition(EventUnit()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OneRadioRule_Init () {
    gt_OneRadioRule = TriggerCreate("gt_OneRadioRule_Func");
    TriggerAddEventUnitInventoryChange(gt_OneRadioRule, null, c_unitInventoryChangePicksUp, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Acquire Riot Shield
//--------------------------------------------------------------------------------------------------
bool gt_AcquireRiotShield_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_localCounter;

    // Automatic Variable Declarations
    unitgroup autoFB02E0DD_g;
    int autoFB02E0DD_u;
    unit autoFB02E0DD_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "RiotShield"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_UnitCarriesItemType(EventUnit(), "Flamethrower") == false)) {
        UnitAbilityShow(gv_unit[EventPlayer()], "LockDoor2", true);
    }
    else {
        UnitSetPosition(EventUnitInventoryItem(), UnitGetPosition(EventUnit()), false);
    }
    if ((UnitGroupHasUnit(gv_riotShields, EventUnitInventoryItem()) == true) && (DataTableGetInt(true, IntToString(UnitGetTag(EventUnitInventoryItem()))) <= 0)) {
        UnitInventoryRemove(EventUnitInventoryItem());
    }
    else {
        if ((UnitGroupHasUnit(gv_riotShields, EventUnitInventoryItem()) == false)) {
            DataTableSetInt(true, IntToString(UnitGetTag(EventUnitInventoryItem())), 6);
            UnitGroupAdd(gv_riotShields, EventUnitInventoryItem());
        }

    }
    autoFB02E0DD_g = UnitInventoryGroup(EventUnit());
    autoFB02E0DD_u = UnitGroupCount(autoFB02E0DD_g, c_unitCountAll);
    for (;; autoFB02E0DD_u -= 1) {
        autoFB02E0DD_var = UnitGroupUnitFromEnd(autoFB02E0DD_g, autoFB02E0DD_u);
        if (autoFB02E0DD_var == null) { break; }
        if ((UnitGetType(autoFB02E0DD_var) == "RiotShield")) {
            lv_localCounter += 1;
            if ((lv_localCounter >= 2)) {
                UnitInventoryRemove(autoFB02E0DD_var);
            }
            else {
                CatalogFieldValueModify(c_gameCatalogButton, "RiotShield", "Tooltip", UnitGetOwner(EventUnit()), ("Allows the wearer to take half the damage from explosions and the Thing, but slows the wearer down.<n/><n/><c val=\"FFFF80\">Durability</c>: " + IntToString(DataTableGetInt(true, IntToString(UnitGetTag(autoFB02E0DD_var)))) + " Hits"), c_upgradeOperationSet);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AcquireRiotShield_Init () {
    gt_AcquireRiotShield = TriggerCreate("gt_AcquireRiotShield_Func");
    TriggerAddEventUnitInventoryChange(gt_AcquireRiotShield, null, c_unitInventoryChangePicksUp, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Drop Riot Shield
//--------------------------------------------------------------------------------------------------
bool gt_DropRiotShield_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "RiotShield"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_UnitCarriesItemType(EventUnit(), "Flamethrower") == false)) {
        UnitAbilityShow(gv_unit[EventPlayer()], "LockDoor2", false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DropRiotShield_Init () {
    gt_DropRiotShield = TriggerCreate("gt_DropRiotShield_Func");
    TriggerAddEventUnitInventoryChange(gt_DropRiotShield, null, c_unitInventoryChangeDrops, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hit with Riot Shield
//--------------------------------------------------------------------------------------------------
bool gt_HitwithRiotShield_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoE74866A9_g;
    int autoE74866A9_u;
    unit autoE74866A9_var;

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "RiotShield") == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitDamageSourceUnit()) == "InfestedAbomination"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoE74866A9_g = UnitInventoryGroup(EventUnit());
    autoE74866A9_u = UnitGroupCount(autoE74866A9_g, c_unitCountAll);
    for (;; autoE74866A9_u -= 1) {
        autoE74866A9_var = UnitGroupUnitFromEnd(autoE74866A9_g, autoE74866A9_u);
        if (autoE74866A9_var == null) { break; }
        if ((UnitGetType(autoE74866A9_var) == "RiotShield")) {
            DataTableSetInt(true, IntToString(UnitGetTag(autoE74866A9_var)), (DataTableGetInt(true, IntToString(UnitGetTag(autoE74866A9_var))) - 1));
            CatalogFieldValueModify(c_gameCatalogButton, "RiotShield", "Tooltip", UnitGetOwner(EventUnit()), ("Allows the wearer to take half the damage from explosions and the Thing, but slows the wearer down.<n/><n/><c val=\"FFFF80\">Durability</c>: " + IntToString(DataTableGetInt(true, IntToString(UnitGetTag(autoE74866A9_var)))) + " Hits"), c_upgradeOperationSet);
            if ((UnitGroupHasUnit(gv_riotShields, autoE74866A9_var) == true) && (DataTableGetInt(true, IntToString(UnitGetTag(autoE74866A9_var))) <= 0)) {
                UnitInventoryRemove(autoE74866A9_var);
                UnitAbilityShow(EventUnit(), "LockDoor2", false);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HitwithRiotShield_Init () {
    gt_HitwithRiotShield = TriggerCreate("gt_HitwithRiotShield_Func");
    TriggerAddEventUnitDamaged(gt_HitwithRiotShield, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Add medkit charge
//--------------------------------------------------------------------------------------------------
bool gt_Addmedkitcharge_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Medkit"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem())), "MarineMedicalProwess", c_techCountQueuedOrBetter) > 0)) {
        if ((UnitHasBehavior2(EventUnit(), "ChargeAdded") == true)) {
        }
        else {
            UnitAddChargeUsed(EventUnitInventoryItem(), "ItemMedkit/Revive", -1.0);
            UnitBehaviorAdd(EventUnitInventoryItem(), "ChargeAdded", EventUnitInventoryItem(), 1);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Addmedkitcharge_Init () {
    gt_Addmedkitcharge = TriggerCreate("gt_Addmedkitcharge_Func");
    TriggerAddEventUnitInventoryChange(gt_Addmedkitcharge, null, c_unitInventoryChangePicksUp, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Medkit Effect
//--------------------------------------------------------------------------------------------------
bool gt_MedkitEffect_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(gv_things, UnitGetOwner(EventUnit())) == true)) {
        UnitBehaviorRemove(EventUnit(), "Medkit", 1);
    }

    if ((libNtve_gf_UnitIsInvulnerable(EventUnit()) == true)) {
        libNtve_gf_AttachModelToUnit(EventUnit(), "MedicHealModel", "Ref_Origin");
    }
    else {
        libNtve_gf_AttachModelToUnit(EventUnit(), "MedicHealModel", "Ref_Head");
    }
    Wait(5.0, c_timeGame);
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MedkitEffect_Init () {
    gt_MedkitEffect = TriggerCreate("gt_MedkitEffect_Func");
    TriggerAddEventUnitBehaviorChange(gt_MedkitEffect, null, "Medkit", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Medkit Thing Use
//--------------------------------------------------------------------------------------------------
bool gt_MedkitThingUse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_thingvisible;

    // Automatic Variable Declarations
    playergroup auto7A02E88A_g;
    int auto7A02E88A_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(EventUnitInventoryItemTargetUnit()), "Isthing", c_techCountQueuedOrBetter) > 0))) {
            return false;
        }

        if (!((UnitGetType(EventUnitInventoryItem()) == "Medkit"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto7A02E88A_g = gv_marines;
    auto7A02E88A_var = -1;
    while (true) {
        auto7A02E88A_var = PlayerGroupNextPlayer(auto7A02E88A_g, auto7A02E88A_var);
        if (auto7A02E88A_var < 0) { break; }
        if ((libNtve_gf_UnitIsVisibleToPlayer(EventUnitInventoryItemTargetUnit(), auto7A02E88A_var) == true)) {
            lv_thingvisible = true;
        }

    }
    if ((lv_thingvisible == false)) {
        UnitIssueOrder(EventUnitInventoryItemTargetUnit(), Order(AbilityCommand("TransformtoThing", 0)), c_orderQueueReplace);
    }

    if ((lv_thingvisible == true)) {
        gv_control /= 2;
        gv_control -= 500;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MedkitThingUse_Init () {
    gt_MedkitThingUse = TriggerCreate("gt_MedkitThingUse_Func");
    TriggerAddEventUnitInventoryChange(gt_MedkitThingUse, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Acquire Infrared Goggles
//--------------------------------------------------------------------------------------------------
bool gt_AcquireInfraredGoggles_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "InfraredGoggles"))) {
            return false;
        }

        if (!((gf_UnitCarriesItemType(EventUnit(), "Flamethrower") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(EventUnitInventoryItem(), UnitGetPosition(EventUnit()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AcquireInfraredGoggles_Init () {
    gt_AcquireInfraredGoggles = TriggerCreate("gt_AcquireInfraredGoggles_Func");
    TriggerAddEventUnitInventoryChange(gt_AcquireInfraredGoggles, null, c_unitInventoryChangePicksUp, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Help Menu - Handle IDs
//--------------------------------------------------------------------------------------------------
bool gt_HelpMenuHandleIDs_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_localText;

    // Automatic Variable Declarations
    playergroup auto42E76320_g;
    int auto42E76320_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto42E76320_g = PlayerGroupAll();
    auto42E76320_var = -1;
    while (true) {
        auto42E76320_var = PlayerGroupNextPlayer(auto42E76320_g, auto42E76320_var);
        if (auto42E76320_var < 0) { break; }
        if ((PlayerStatus(auto42E76320_var) == c_playerStatusActive) && (PlayerType(auto42E76320_var) == c_playerTypeUser)) {
            lv_localText = ((lv_localText + (IntToText(auto42E76320_var) + StringExternal("Param/Value/C69DBEF9") + PlayerName(auto42E76320_var) + StringExternal("Param/Value/AF09E7BC") + StringToText(PlayerHandle(auto42E76320_var)) + StringExternal("Param/Value/D99CB685"))));
        }

    }
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/E25F98C6"), libNtve_ge_TipType_NormalTip), lv_localText, StringToText(""), "Assets\\Textures\\btn-unit-terran-marine.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HelpMenuHandleIDs_Init () {
    gt_HelpMenuHandleIDs = TriggerCreate("gt_HelpMenuHandleIDs_Func");
    TriggerAddEventMapInit(gt_HelpMenuHandleIDs);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Marine DIES
//--------------------------------------------------------------------------------------------------
bool gt_MarineDIES_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto3362EEB0_ae = 15;
    int auto3362EEB0_var;
    unitgroup autoAE4E92A9_g;
    int autoAE4E92A9_u;
    unit autoAE4E92A9_var;
    playergroup autoD76CE0C9_g;
    int autoD76CE0C9_var;
    playergroup auto3EBD50EB_g;
    int auto3EBD50EB_var;
    playergroup auto3AC440BD_g;
    int auto3AC440BD_var;
    playergroup auto75EF131D_g;
    int auto75EF131D_var;

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_marines, UnitGetOwner(EventUnit())) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(gv_left, EventPlayer()) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(gv_things, libNtve_gf_KillingPlayer()) == false) && (libNtve_gf_KillingPlayer() != EventPlayer())) {
        if (((gv_attackInitiator[EventPlayer()] == libNtve_gf_KillingPlayer()) || (PlayerType(gv_attackInitiator[EventPlayer()]) != c_playerTypeUser))) {
            gf_DeadChatUpdate((TextWithColor((PlayerName(libNtve_gf_KillingPlayer()) + StringExternal("Param/Value/4FFBC1F9") + gv_unitTagText[libNtve_gf_KillingPlayer()] + StringExternal("Param/Value/AD91F5DF")), libNtve_gf_ConvertPlayerColorToColor(gv_thePlayerColor[libNtve_gf_KillingPlayer()])) + StringExternal("Param/Value/6ACBDE55")), "", 0);
            gf_DeadAliveChatUpdate((TextWithColor((PlayerName(libNtve_gf_KillingPlayer()) + StringExternal("Param/Value/FA9361AD") + gv_unitTagText[libNtve_gf_KillingPlayer()] + StringExternal("Param/Value/34CA8EA4")), libNtve_gf_ConvertPlayerColorToColor(gv_thePlayerColor[libNtve_gf_KillingPlayer()])) + StringExternal("Param/Value/BDD5D370")));
        }
        else {
            if ((PlayerGroupHasPlayer(gv_attackInitiatorBlacklist[libNtve_gf_KillingPlayer()], EventPlayer()) == false)) {
                gf_DeadChatUpdate((TextWithColor((StringExternal("Param/Value/5EAE27C3") + gv_unitTagText[libNtve_gf_KillingPlayer()] + StringExternal("Param/Value/D02A13C1")), libNtve_gf_ConvertPlayerColorToColor(gv_thePlayerColor[libNtve_gf_KillingPlayer()])) + StringExternal("Param/Value/02F1BCC8")), "", 0);
                gf_DeadAliveChatUpdate((TextWithColor((PlayerName(libNtve_gf_KillingPlayer()) + StringExternal("Param/Value/DF450B7A") + gv_unitTagText[libNtve_gf_KillingPlayer()] + StringExternal("Param/Value/BF5006B4")), libNtve_gf_ConvertPlayerColorToColor(gv_thePlayerColor[libNtve_gf_KillingPlayer()])) + StringExternal("Param/Value/3DA270C6")));
                gf_DeadChatUpdate((TextWithColor((PlayerName(gv_attackInitiator[EventPlayer()]) + StringExternal("Param/Value/348D951A") + gv_unitTagText[gv_attackInitiator[EventPlayer()]] + StringExternal("Param/Value/05AC01DE")), libNtve_gf_ConvertPlayerColorToColor(gv_thePlayerColor[gv_attackInitiator[EventPlayer()]])) + StringExternal("Param/Value/194A15A9")), "", 0);
                gf_DeadAliveChatUpdate((TextWithColor((PlayerName(gv_attackInitiator[EventPlayer()]) + StringExternal("Param/Value/3976E89C") + gv_unitTagText[gv_attackInitiator[EventPlayer()]] + StringExternal("Param/Value/E98EE12B")), libNtve_gf_ConvertPlayerColorToColor(gv_thePlayerColor[gv_attackInitiator[EventPlayer()]])) + StringExternal("Param/Value/9399643A")));
            }
            else {
                gf_DeadChatUpdate((TextWithColor((StringExternal("Param/Value/F0B316DF") + gv_unitTagText[libNtve_gf_KillingPlayer()] + StringExternal("Param/Value/425A82A2")), libNtve_gf_ConvertPlayerColorToColor(gv_thePlayerColor[libNtve_gf_KillingPlayer()])) + StringExternal("Param/Value/DFE381D4")), "", 0);
                gf_DeadAliveChatUpdate((TextWithColor((PlayerName(libNtve_gf_KillingPlayer()) + StringExternal("Param/Value/90C39D0F") + gv_unitTagText[libNtve_gf_KillingPlayer()] + StringExternal("Param/Value/119D5EAC")), libNtve_gf_ConvertPlayerColorToColor(gv_thePlayerColor[libNtve_gf_KillingPlayer()])) + StringExternal("Param/Value/C2AB68BA")));
            }
        }
    }

    RegionSetCenter(gv_proximityRegion[EventPlayer()], PointFromId(1763));
    auto3362EEB0_var = 1;
    for ( ; auto3362EEB0_var <= auto3362EEB0_ae; auto3362EEB0_var += 1 ) {
        if ((gv_spectatorIndex[auto3362EEB0_var] == EventPlayer())) {
            DialogControlRemoveItem(gv_spectatorFollowDialogItem, PlayerGroupAll(), auto3362EEB0_var);
        }

    }
    gf_RefreshItemList();
    DialogSetVisible(gv_spectatorDialog, PlayerGroupSingle(EventPlayer()), true);
    DialogSetVisible(gv_tTT, PlayerGroupSingle(EventPlayer()), true);
    DialogSetVisible(gv_spectatorViewEvacDialog, PlayerGroupSingle(EventPlayer()), true);
    if ((libNtve_gf_KillingPlayer() != EventPlayer())) {
        DialogControlSelectItem(gv_spectatorFollowDialogItem, PlayerGroupSingle(EventPlayer()), gv_playerIndex[libNtve_gf_KillingPlayer()]);
    }
    else {
        DialogControlSelectItem(gv_spectatorFollowDialogItem, PlayerGroupSingle(EventPlayer()), 1);
    }
    VisRevealerCreate(EventPlayer(), RegionPlayableMap());
    VisRevealerEnable(VisRevealerLastCreated(), true);
    if ((libNtve_gf_KillingPlayer() == PlayerGroupPlayer(gv_things, 1))) {
        if (((gv_control + 150) > 2500)) {
            gv_control = 2500;
        }
        else {
            gv_control += 150;
        }
    }

    UISetFrameVisible(PlayerGroupSingle(EventPlayer()), c_syncFrameTypeCommandPanel, false);
    DialogSetVisible(gv_unitPanel[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
    gv_deathSpot[EventPlayer()] = UnitGetPosition(EventUnit());
    PlayerGroupAdd(gv_dead, UnitGetOwner(EventUnit()));
    PlayerGroupRemove(gv_optedIn, EventPlayer());
    PlayerGroupRemove(gv_marines, UnitGetOwner(EventUnit()));
    DialogSetVisible(gv_deadDialog, PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_deadChatItem, PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_deadChatOnlineItem, PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_deadAliveChatItem, PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_deadAliveChatOnlineItem, PlayerGroupSingle(EventPlayer()), false);
    CameraFollowUnitGroup(UnitGetOwner(EventUnit()), libNtve_gf_ConvertUnitToUnitGroup(EventUnit()), false, false);
    CameraLockInput(UnitGetOwner(EventUnit()), false);
    autoAE4E92A9_g = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 0.5), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoAE4E92A9_u = UnitGroupCount(autoAE4E92A9_g, c_unitCountAll);
    for (;; autoAE4E92A9_u -= 1) {
        autoAE4E92A9_var = UnitGroupUnitFromEnd(autoAE4E92A9_g, autoAE4E92A9_u);
        if (autoAE4E92A9_var == null) { break; }
        UnitSetPosition(autoAE4E92A9_var, gf_FindProperRandomPointforSpawninRegion(RegionCircle(UnitGetPosition(EventUnit()), 1.0)), false);
    }
    gf_SpawnCorpse(UnitGetPosition(EventUnit()), EventPlayer());
    if ((TimerGetRemaining(gv_timer) <= 120.0)) {
        CameraSetBounds(PlayerGroupSingle(EventPlayer()), RegionEntireMap(), true);
    }

    autoD76CE0C9_g = gv_marines;
    autoD76CE0C9_var = -1;
    while (true) {
        autoD76CE0C9_var = PlayerGroupNextPlayer(autoD76CE0C9_g, autoD76CE0C9_var);
        if (autoD76CE0C9_var < 0) { break; }
        libNtve_gf_SetAlliance(autoD76CE0C9_var, UnitGetOwner(EventUnit()), libNtve_ge_AllianceSetting_Enemy);
    }
    auto3EBD50EB_g = gv_things;
    auto3EBD50EB_var = -1;
    while (true) {
        auto3EBD50EB_var = PlayerGroupNextPlayer(auto3EBD50EB_g, auto3EBD50EB_var);
        if (auto3EBD50EB_var < 0) { break; }
        libNtve_gf_SetAlliance(auto3EBD50EB_var, UnitGetOwner(EventUnit()), libNtve_ge_AllianceSetting_Enemy);
    }
    auto3AC440BD_g = gv_dead;
    auto3AC440BD_var = -1;
    while (true) {
        auto3AC440BD_var = PlayerGroupNextPlayer(auto3AC440BD_g, auto3AC440BD_var);
        if (auto3AC440BD_var < 0) { break; }
        libNtve_gf_SetAlliance(auto3AC440BD_var, UnitGetOwner(EventUnit()), libNtve_ge_AllianceSetting_Ally);
    }
    if ((PlayerGroupCount(gv_marines) == 0)) {
        UnitSetState(gv_unit[PlayerGroupPlayer(gv_things, 1)], c_unitStateInvulnerable, true);
        TriggerExecute(gt_Scorescreen, true, false);
        TriggerEnable(gt_TheThingDIES, false);
        DialogSetVisible(gv_spectatorViewEvacDialog, PlayerGroupAll(), false);
    }

    gf_DeadChatUpdate((TextWithColor(PlayerName(EventPlayer()), gv_unitPlayerColor[EventPlayer()]) + StringExternal("Param/Value/AB38A68C")), "", 0);
    gf_DeadChatOnlineUpdate();
    gf_DeadAliveChatOnlineUpdate();
    gf_SetAllChannelVolume(0.0, 0.0, PlayerGroupSingle(EventPlayer()));
    SoundChannelSetVolume(PlayerGroupSingle(EventPlayer()), c_soundCategoryDeath, 100.0, 0.0);
    SoundPlay(SoundLink("Marine_Death", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    auto75EF131D_g = PlayerGroupAll();
    auto75EF131D_var = -1;
    while (true) {
        auto75EF131D_var = PlayerGroupNextPlayer(auto75EF131D_g, auto75EF131D_var);
        if (auto75EF131D_var < 0) { break; }
        if ((EventPlayer() != auto75EF131D_var) && (libNtve_gf_UnitIsVisibleToPlayer(EventUnit(), auto75EF131D_var) == true) && (UnitGetType(libNtve_gf_KillingUnit()) == "InfestedAbomination")) {
            SoundChannelSetVolume(PlayerGroupSingle(auto75EF131D_var), c_soundCategoryDeath, 100.0, 0.0);
            SoundPlay(SoundLink("Marine_Death", -1), PlayerGroupSingle(auto75EF131D_var), 100.0, 0.0);
        }

    }
    gf_SetAllChannelVolume(10.0, 100.0, PlayerGroupSingle(EventPlayer()));
    if ((PlayerGroupHasPlayer(gv_admin, EventPlayer()) == false)) {
        gf_FlashScreen(0.4, 1.5, 3.0, 0.1, PlayerGroupSingle(EventPlayer()), 0.0, 100.0, Color(72.55, 0.00, 0.00), "Assets\\Textures\\white32.dds");
    }

    gf_UpdateTheThingLifeRegeneration();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarineDIES_Init () {
    gt_MarineDIES = TriggerCreate("gt_MarineDIES_Func");
    TriggerAddEventUnitDied(gt_MarineDIES, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: The Thing DIES
//--------------------------------------------------------------------------------------------------
bool gt_TheThingDIES_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto9E72A3A4_g;
    int auto9E72A3A4_var;

    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_unit[PlayerGroupPlayer(gv_things, 1)]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundStop(gv_music, true);
    SoundPlay(SoundLink("HunterKiller_Death", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundPlay(SoundLink("Corruptor_Death", -1), PlayerGroupAll(), 100.0, 0.0);
    VisEnable(c_visTypeFog, false);
    VisEnable(c_visTypeMask, false);
    CameraLockInput(UnitGetOwner(EventUnit()), false);
    auto9E72A3A4_g = gv_playing;
    auto9E72A3A4_var = -1;
    while (true) {
        auto9E72A3A4_var = PlayerGroupNextPlayer(auto9E72A3A4_g, auto9E72A3A4_var);
        if (auto9E72A3A4_var < 0) { break; }
        CameraFollowUnitGroup(auto9E72A3A4_var, libNtve_gf_ConvertUnitToUnitGroup(gv_unit[auto9E72A3A4_var]), false, false);
        CameraPan(auto9E72A3A4_var, UnitGetPosition(EventUnit()), 0.0, -1, 10.0, false);
        libNtve_gf_PauseUnit(gv_unit[auto9E72A3A4_var], true);
        UnitSetState(gv_unit[auto9E72A3A4_var], c_unitStateInvulnerable, true);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_unit[auto9E72A3A4_var]), c_animNameDefault, "Dance", c_animFlagPlayForever, c_animTimeDefault);
    }
    TriggerEnable(gt_MarineDIES, false);
    Wait(3.0, c_timeReal);
    DialogSetVisible(gv_spectatorViewEvacDialog, PlayerGroupAll(), false);
    TriggerExecute(gt_Scorescreen, true, false);
    gf_DeadChatOnlineUpdate();
    gf_DeadAliveChatOnlineUpdate();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TheThingDIES_Init () {
    gt_TheThingDIES = TriggerCreate("gt_TheThingDIES_Func");
    TriggerAddEventUnitDied(gt_TheThingDIES, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Leaves
//--------------------------------------------------------------------------------------------------
bool gt_PlayerLeaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto6479DA0C_g;
    int auto6479DA0C_var;
    playergroup auto3176B12D_g;
    int auto3176B12D_var;

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_left, EventPlayer()) == false))) {
            return false;
        }

        if (!((TriggerGetExecCount(gt_InitialCreation) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(gv_left, EventPlayer());
    PlayerGroupRemove(gv_optedIn, EventPlayer());
    gf_DeadChatUpdate((TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(gv_thePlayerColor[EventPlayer()])) + StringExternal("Param/Value/B01D3987")), "", 0);
    if ((UnitIsAlive(gv_unit[EventPlayer()]) == true)) {
        TextTagSetText(gv_chatTextLabel[EventPlayer()], StringExternal("Param/Value/7D00732C"));
        UnitIssueOrder(gv_unit[EventPlayer()], Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        libNtve_gf_PauseUnit(gv_unit[EventPlayer()], true);
        gv_deathSpot[EventPlayer()] = UnitGetPosition(gv_unit[EventPlayer()]);
        Wait(6.0, c_timeReal);
        auto6479DA0C_g = gv_marines;
        auto6479DA0C_var = -1;
        while (true) {
            auto6479DA0C_var = PlayerGroupNextPlayer(auto6479DA0C_g, auto6479DA0C_var);
            if (auto6479DA0C_var < 0) { break; }
            libNtve_gf_SetAlliance(auto6479DA0C_var, EventPlayer(), libNtve_ge_AllianceSetting_Enemy);
        }
        auto3176B12D_g = gv_things;
        auto3176B12D_var = -1;
        while (true) {
            auto3176B12D_var = PlayerGroupNextPlayer(auto3176B12D_g, auto3176B12D_var);
            if (auto3176B12D_var < 0) { break; }
            libNtve_gf_SetAlliance(auto3176B12D_var, EventPlayer(), libNtve_ge_AllianceSetting_Enemy);
        }
        PlayerGroupAdd(gv_dead, EventPlayer());
        PlayerGroupRemove(gv_marines, EventPlayer());
        gf_SpawnCorpse(UnitGetPosition(EventUnit()), EventPlayer());
        UnitKill(gv_unit[EventPlayer()]);
        libNtve_gf_CreateModelAtPoint("MarineCorpse", gv_deathSpot[EventPlayer()]);
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTintColor(libNtve_gf_ConvertPlayerColorToColor(gv_thePlayerColor[EventPlayer()]), 6.0, 5.0));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetHeight(0.1));
        if ((PlayerGroupCount(gv_marines) == 0)) {
            DialogSetVisible(gv_spectatorViewEvacDialog, PlayerGroupAll(), false);
            TriggerExecute(gt_Scorescreen, true, false);
            TriggerEnable(gt_TheThingDIES, false);
        }

    }

    gf_DeadChatOnlineUpdate();
    gf_DeadAliveChatOnlineUpdate();
    gf_UpdateTheThingLifeRegeneration();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerLeaves_Init () {
    gt_PlayerLeaves = TriggerCreate("gt_PlayerLeaves_Func");
    TriggerAddEventPlayerLeft(gt_PlayerLeaves, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reset Name
//--------------------------------------------------------------------------------------------------
bool gt_ResetName_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_admin, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_lBName[gv_spectatingPlayer[EventPlayer()]] = "";
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResetName_Init () {
    gt_ResetName = TriggerCreate("gt_ResetName_Func");
    TriggerAddEventChatMessage(gt_ResetName, c_playerAny, "-reset name", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set Name
//--------------------------------------------------------------------------------------------------
bool gt_SetName_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_lBName[1] = StringSub(EventChatMessage(false), 7, StringLength(EventChatMessage(false)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetName_Init () {
    gt_SetName = TriggerCreate("gt_SetName_Func");
    TriggerAddEventChatMessage(gt_SetName, c_playerAny, "-name", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Door smasher
//--------------------------------------------------------------------------------------------------
bool gt_Doorsmasher_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(gf_Developers(EventPlayer()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Terran, UnitGetPosition(UnitGroupClosestToPoint(UnitGroupSearch(null, c_playerAny, Point(EventMouseClickedPosXWorld(), EventMouseClickedPosYWorld()), 2.0, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), Point(EventMouseClickedPosXWorld(), EventMouseClickedPosYWorld()))));
    UnitDamage(UnitGroupClosestToPoint(UnitGroupSearch(null, c_playerAny, Point(EventMouseClickedPosXWorld(), EventMouseClickedPosYWorld()), 2.0, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), Point(EventMouseClickedPosXWorld(), EventMouseClickedPosYWorld())), "Doorsmasher", UnitGroupClosestToPoint(UnitGroupSearch(null, c_playerAny, Point(EventMouseClickedPosXWorld(), EventMouseClickedPosYWorld()), 2.0, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), Point(EventMouseClickedPosXWorld(), EventMouseClickedPosYWorld())), 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Doorsmasher_Init () {
    gt_Doorsmasher = TriggerCreate("gt_Doorsmasher_Func");
    TriggerAddEventMouseClicked(gt_Doorsmasher, c_playerAny, c_mouseButtonMiddle, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mute Rounds Dialog
//--------------------------------------------------------------------------------------------------
bool gt_MuteRoundsDialog_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(600, 225, c_anchorCenter, 0, 0, true);
    gv_muteRounds = DialogLastCreated();
    DialogSetTitle(gv_muteRounds, StringExternal("Param/Value/72843D47"));
    DialogControlCreate(gv_muteRounds, c_triggerControlTypeEditBox);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 250, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    gv_muteRoundsItems[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_muteRounds, 225, 50, c_anchorBottom, -115, 30, (PlayerName(gv_mutePlayer[0]) + StringExternal("Param/Value/6F7F1C39")), StringExternal("Param/Value/3571B76F"), "");
    gv_muteRoundsItems[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_muteRounds, 225, 50, c_anchorBottom, 115, 30, (PlayerName(gv_mutePlayer[0]) + StringExternal("Param/Value/6DE479A8")), StringExternal("Param/Value/645C9F15"), "");
    gv_muteRoundsItems[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_muteRounds, 50, 50, c_anchorTopRight, 0, 0, StringExternal("Param/Value/948D70DE"), StringToText(""), "");
    gv_muteRoundsItems[3] = DialogControlLastCreated();
    DialogSetVisible(gv_muteRounds, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MuteRoundsDialog_Init () {
    gt_MuteRoundsDialog = TriggerCreate("gt_MuteRoundsDialog_Func");
    TriggerAddEventMapInit(gt_MuteRoundsDialog);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mute Rounds Controls
//--------------------------------------------------------------------------------------------------
bool gt_MuteRoundsControls_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_localEditValue;
    int lv_localEditValueInteger;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_localEditValue = libNtve_gf_DialogItemEditValue(gv_muteRoundsItems[0], EventPlayer());
    lv_localEditValueInteger = StringToInt(lv_localEditValue);

    // Conditions
    if (testConds) {
        if (!(gf_Admins(EventPlayer()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_muteRoundsItems[1])) {
        if ((StringLength(lv_localEditValue) <= 2) && (lv_localEditValueInteger > -1)) {
            BankLoad("TheThing", gv_mutePlayer[EventPlayer()]);
            BankValueSetFromInt(BankLastCreated(), "000", "1", StringToInt(lv_localEditValue));
            UIDisplayMessage(gv_admin, c_messageAreaDebug, (StringExternal("Param/Value/59139FB8") + PlayerName(gv_mutePlayer[EventPlayer()]) + StringExternal("Param/Value/015ECB9C") + StringToText(lv_localEditValue) + StringExternal("Param/Value/F747A65B")));
            gv_muted[gv_mutePlayer[EventPlayer()]] = true;
            BankSave(BankLastCreated());
            DialogSetVisible(gv_muteRounds, PlayerGroupSingle(EventPlayer()), false);
            libNtve_gf_SetDialogItemEditorValue(gv_muteRoundsItems[0], "", PlayerGroupSingle(EventPlayer()));
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/C29CFFD2"));
        }
    }

    if ((EventDialogControl() == gv_muteRoundsItems[2])) {
        gv_muted[gv_mutePlayer[EventPlayer()]] = false;
        UIDisplayMessage(gv_admin, c_messageAreaDebug, (StringExternal("Param/Value/DB5E3C21") + PlayerName(gv_mutePlayer[EventPlayer()])));
        DialogSetVisible(gv_muteRounds, PlayerGroupSingle(EventPlayer()), false);
    }

    if ((EventDialogControl() == gv_muteRoundsItems[3])) {
        DialogSetVisible(gv_muteRounds, PlayerGroupSingle(EventPlayer()), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MuteRoundsControls_Init () {
    gt_MuteRoundsControls = TriggerCreate("gt_MuteRoundsControls_Func");
    TriggerAddEventDialogControl(gt_MuteRoundsControls, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Muted Players
//--------------------------------------------------------------------------------------------------
bool gt_MutedPlayers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_localLoadInteger;

    // Automatic Variable Declarations
    playergroup autoB763248C_g;
    int autoB763248C_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoB763248C_g = PlayerGroupAll();
    autoB763248C_var = -1;
    while (true) {
        autoB763248C_var = PlayerGroupNextPlayer(autoB763248C_g, autoB763248C_var);
        if (autoB763248C_var < 0) { break; }
        BankLoad("TheThing", autoB763248C_var);
        lv_localLoadInteger = BankValueGetAsInt(BankLastCreated(), "000", "1");
        if ((lv_localLoadInteger > 0)) {
            lv_localLoadInteger -= 1;
            gf_WarningSystem(autoB763248C_var, (StringExternal("Param/Value/36C1CBDD") + IntToText(lv_localLoadInteger) + StringExternal("Param/Value/FC70CAE0")));
            gv_muted[autoB763248C_var] = true;
            BankValueSetFromInt(BankLastCreated(), "000", "1", lv_localLoadInteger);
            BankSave(BankLastCreated());
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MutedPlayers_Init () {
    gt_MutedPlayers = TriggerCreate("gt_MutedPlayers_Func");
    TriggerAddEventMapInit(gt_MutedPlayers);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ban Rounds Dialog
//--------------------------------------------------------------------------------------------------
bool gt_BanRoundsDialog_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(600, 225, c_anchorCenter, 0, 0, true);
    gv_banRounds = DialogLastCreated();
    DialogSetTitle(gv_banRounds, StringExternal("Param/Value/F24D7E02"));
    DialogControlCreate(gv_banRounds, c_triggerControlTypeEditBox);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 250, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    gv_banRoundsItems[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_banRounds, 250, 50, c_anchorBottom, 0, 30, (PlayerName(gv_banPlayer[0]) + StringExternal("Param/Value/4BD00421")), StringExternal("Param/Value/79189267"), "");
    gv_banRoundsItems[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_banRounds, 50, 50, c_anchorTopRight, 0, 0, StringExternal("Param/Value/F1C41ABD"), StringToText(""), "");
    gv_banRoundsItems[3] = DialogControlLastCreated();
    DialogSetVisible(gv_banRounds, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BanRoundsDialog_Init () {
    gt_BanRoundsDialog = TriggerCreate("gt_BanRoundsDialog_Func");
    TriggerAddEventMapInit(gt_BanRoundsDialog);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ban Rounds Controls
//--------------------------------------------------------------------------------------------------
bool gt_BanRoundsControls_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_localEditValue;
    int lv_localEditValueInteger;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_localEditValue = libNtve_gf_DialogItemEditValue(gv_banRoundsItems[0], EventPlayer());
    lv_localEditValueInteger = StringToInt(lv_localEditValue);

    // Conditions
    if (testConds) {
        if (!(gf_Admins(EventPlayer()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_banRoundsItems[1])) {
        if ((StringLength(lv_localEditValue) <= 2) && (lv_localEditValueInteger > -1)) {
            BankLoad("TheThing", gv_banPlayer[EventPlayer()]);
            BankValueSetFromInt(BankLastCreated(), "111111", "0", StringToInt(lv_localEditValue));
            BankSave(BankLastCreated());
            gv_playerRoundsBanned[gv_banPlayer[EventPlayer()]] = lv_localEditValueInteger;
            if ((lv_localEditValueInteger != 0)) {
                gv_kicked[gv_banPlayer[EventPlayer()]] = true;
                UIDisplayMessage(gv_admin, c_messageAreaDebug, (StringExternal("Param/Value/17EC8449") + PlayerName(gv_banPlayer[EventPlayer()]) + StringExternal("Param/Value/D25E9AAF") + StringToText(lv_localEditValue) + StringExternal("Param/Value/D7DFCD94")));
                gf_KilledbyTrigger(gv_unit[gv_banPlayer[EventPlayer()]], gv_banPlayer[EventPlayer()], 0, StringExternal("Param/Value/1074E761"), "Ram", 1);
                gf_WarningSystem(gv_banPlayer[EventPlayer()], (StringExternal("Param/Value/458B11BE") + StringExternal("Param/Value/565C11CD") + IntToText(lv_localEditValueInteger)));
            }
            else {
                UIDisplayMessage(gv_admin, c_messageAreaDebug, (StringExternal("Param/Value/51814DD1") + PlayerName(gv_banPlayer[EventPlayer()])));
            }
            DialogSetVisible(gv_banRounds, PlayerGroupSingle(EventPlayer()), false);
            libNtve_gf_SetDialogItemEditorValue(gv_banRoundsItems[0], "", PlayerGroupSingle(EventPlayer()));
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/50F48100"));
        }
    }

    if ((EventDialogControl() == gv_banRoundsItems[3])) {
        DialogSetVisible(gv_banRounds, PlayerGroupSingle(EventPlayer()), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BanRoundsControls_Init () {
    gt_BanRoundsControls = TriggerCreate("gt_BanRoundsControls_Func");
    TriggerAddEventDialogControl(gt_BanRoundsControls, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Banned Players
//--------------------------------------------------------------------------------------------------
bool gt_BannedPlayers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_localLoadInteger;

    // Automatic Variable Declarations
    playergroup auto01377B53_g;
    int auto01377B53_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto01377B53_g = PlayerGroupAll();
    auto01377B53_var = -1;
    while (true) {
        auto01377B53_var = PlayerGroupNextPlayer(auto01377B53_g, auto01377B53_var);
        if (auto01377B53_var < 0) { break; }
        BankLoad("TheThing", auto01377B53_var);
        lv_localLoadInteger = BankValueGetAsInt(BankLastCreated(), "111111", "0");
        if ((lv_localLoadInteger > 0)) {
            lv_localLoadInteger -= 1;
            gf_WarningSystem(auto01377B53_var, (StringExternal("Param/Value/46E47C8A") + StringExternal("Param/Value/EC2CE347") + IntToText(lv_localLoadInteger)));
            gv_kicked[auto01377B53_var] = true;
            gv_playerRoundsBanned[auto01377B53_var] = lv_localLoadInteger;
            BankValueSetFromInt(BankLastCreated(), "111111", "0", lv_localLoadInteger);
            BankSave(BankLastCreated());
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BannedPlayers_Init () {
    gt_BannedPlayers = TriggerCreate("gt_BannedPlayers_Func");
    TriggerAddEventMapInit(gt_BannedPlayers);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rating Ban Dialog
//--------------------------------------------------------------------------------------------------
bool gt_RatingBanDialog_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(600, 225, c_anchorCenter, 0, 0, true);
    gv_ratingBanRounds = DialogLastCreated();
    DialogSetTitle(gv_ratingBanRounds, StringExternal("Param/Value/2A0A8D32"));
    DialogControlCreate(gv_ratingBanRounds, c_triggerControlTypeEditBox);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 250, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    gv_ratingBanRoundsItems[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_ratingBanRounds, 250, 50, c_anchorBottom, 0, 30, (PlayerName(gv_rBTarget[0]) + StringExternal("Param/Value/C36E5DC7")), StringExternal("Param/Value/00A17821"), "");
    gv_ratingBanRoundsItems[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_ratingBanRounds, 50, 50, c_anchorTopRight, 0, 0, StringExternal("Param/Value/0AD14561"), StringToText(""), "");
    gv_ratingBanRoundsItems[3] = DialogControlLastCreated();
    DialogSetVisible(gv_ratingBanRounds, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RatingBanDialog_Init () {
    gt_RatingBanDialog = TriggerCreate("gt_RatingBanDialog_Func");
    TriggerAddEventMapInit(gt_RatingBanDialog);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rating Ban Controls
//--------------------------------------------------------------------------------------------------
bool gt_RatingBanControls_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_localEditValue;
    int lv_localEditValueInteger;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_localEditValue = libNtve_gf_DialogItemEditValue(gv_ratingBanRoundsItems[0], EventPlayer());
    lv_localEditValueInteger = StringToInt(lv_localEditValue);

    // Conditions
    if (testConds) {
        if (!(gf_Admins(EventPlayer()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_ratingBanRoundsItems[1])) {
        if ((StringLength(lv_localEditValue) <= 2) && (lv_localEditValueInteger > -1)) {
            BankLoad("TheThing", gv_rBTarget[EventPlayer()]);
            BankValueSetFromInt(BankLastCreated(), "Zebra", "a", StringToInt(lv_localEditValue));
            BankSave(BankLastCreated());
            gv_playerRoundsRatingBanned[gv_rBTarget[EventPlayer()]] = lv_localEditValueInteger;
            if ((lv_localEditValueInteger != 0)) {
                gv_ratingBan[gv_rBTarget[EventPlayer()]] = true;
                UIDisplayMessage(gv_admin, c_messageAreaDebug, (StringExternal("Param/Value/070F0A8E") + PlayerName(gv_rBTarget[EventPlayer()]) + StringExternal("Param/Value/47351C0C") + StringToText(lv_localEditValue) + StringExternal("Param/Value/C0BC224B")));
            }
            else {
                gv_ratingBan[gv_rBTarget[EventPlayer()]] = false;
                UIDisplayMessage(gv_admin, c_messageAreaDebug, (StringExternal("Param/Value/8176DACA") + PlayerName(gv_rBTarget[EventPlayer()])));
            }
            DialogSetVisible(gv_ratingBanRounds, PlayerGroupSingle(EventPlayer()), false);
            libNtve_gf_SetDialogItemEditorValue(gv_ratingBanRoundsItems[0], "", PlayerGroupSingle(EventPlayer()));
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/291B9B86"));
        }
    }

    if ((EventDialogControl() == gv_ratingBanRoundsItems[3])) {
        DialogSetVisible(gv_ratingBanRounds, PlayerGroupSingle(EventPlayer()), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RatingBanControls_Init () {
    gt_RatingBanControls = TriggerCreate("gt_RatingBanControls_Func");
    TriggerAddEventDialogControl(gt_RatingBanControls, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rating Banned Players
//--------------------------------------------------------------------------------------------------
bool gt_RatingBannedPlayers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_localLoadInteger;

    // Automatic Variable Declarations
    playergroup autoB74F9908_g;
    int autoB74F9908_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoB74F9908_g = PlayerGroupAll();
    autoB74F9908_var = -1;
    while (true) {
        autoB74F9908_var = PlayerGroupNextPlayer(autoB74F9908_g, autoB74F9908_var);
        if (autoB74F9908_var < 0) { break; }
        BankLoad("TheThing", autoB74F9908_var);
        lv_localLoadInteger = BankValueGetAsInt(BankLastCreated(), "Zebra", "a");
        if ((lv_localLoadInteger > 0)) {
            lv_localLoadInteger -= 1;
            gv_ratingBan[autoB74F9908_var] = true;
            gv_playerRoundsRatingBanned[autoB74F9908_var] = lv_localLoadInteger;
            BankValueSetFromInt(BankLastCreated(), "Zebra", "a", lv_localLoadInteger);
            BankSave(BankLastCreated());
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RatingBannedPlayers_Init () {
    gt_RatingBannedPlayers = TriggerCreate("gt_RatingBannedPlayers_Func");
    TriggerAddEventMapInit(gt_RatingBannedPlayers);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ban List
//--------------------------------------------------------------------------------------------------
bool gt_BanList_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoCE3FDFDB_g;
    int autoCE3FDFDB_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoCE3FDFDB_g = PlayerGroupAll();
    autoCE3FDFDB_var = -1;
    while (true) {
        autoCE3FDFDB_var = PlayerGroupNextPlayer(autoCE3FDFDB_g, autoCE3FDFDB_var);
        if (autoCE3FDFDB_var < 0) { break; }
        if (((PlayerHandle(autoCE3FDFDB_var) == "1-S2-2-624176") || (PlayerHandle(autoCE3FDFDB_var) == "1-S2-2-1388439"))) {
            gv_kicked[autoCE3FDFDB_var] = true;
            gf_WarningSystem(autoCE3FDFDB_var, StringExternal("Param/Value/34A35BB4"));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BanList_Init () {
    gt_BanList = TriggerCreate("gt_BanList_Func");
    TriggerAddEventMapInit(gt_BanList);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Admin Control Show
//--------------------------------------------------------------------------------------------------
bool gt_AdminControlShow_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_admintext;
    fixed lv_notedrefreshtime;

    // Automatic Variable Declarations
    playergroup auto09A75D81_g;
    int auto09A75D81_var;
    int autoB1E1749F_ae;
    int autoB1E1749F_var;
    int autoD78D048F_ae;
    int autoD78D048F_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (gf_Admins(EventPlayer())) {
        PlayerGroupAdd(gv_admin, EventPlayer());
        UISetFrameVisible(PlayerGroupSingle(EventPlayer()), c_syncFrameTypeAllianceButton, true);
        DialogSetVisible(gv_adminDialog, PlayerGroupSingle(EventPlayer()), true);
        if ((gv_adminDialogRefreshTime > 0.1)) {
            gv_adminDialogRefreshTime = (gv_adminDialogRefreshTime - 0.1);
        }
        else {
            UIDisplayMessage(gv_admin, c_messageAreaError, StringExternal("Param/Value/DA7AC357"));
            return true;
        }
        lv_notedrefreshtime = gv_adminDialogRefreshTime;
        while ((DialogIsVisible(gv_adminDialog, EventPlayer()) == true) && (lv_notedrefreshtime == gv_adminDialogRefreshTime)) {
            auto09A75D81_g = PlayerGroupAll();
            auto09A75D81_var = -1;
            while (true) {
                auto09A75D81_var = PlayerGroupNextPlayer(auto09A75D81_g, auto09A75D81_var);
                if (auto09A75D81_var < 0) { break; }
                lv_admintext = StringToText("");
                lv_admintext = (StringExternal("Param/Value/05FB43A3") + IntToText(auto09A75D81_var) + StringExternal("Param/Value/19608BE8") + PlayerName(auto09A75D81_var));
                lv_admintext = (StringExternal("Param/Value/1385498D") + StringExternal("Param/Value/1218D7E8") + StringToText(PlayerHandle(auto09A75D81_var)));
                lv_admintext = (lv_admintext + StringExternal("Param/Value/0DF998F5") + TextWithColor(gv_unitTagText[auto09A75D81_var], libNtve_gf_ConvertPlayerColorToColor(gv_thePlayerColor[auto09A75D81_var])));
                lv_admintext = (lv_admintext + StringExternal("Param/Value/29B44779"));
                if ((PlayerGroupHasPlayer(gv_left, auto09A75D81_var) == true)) {
                    libNtve_gf_SetDialogItemDesaturationColor(gv_adminDialogUnitButton[auto09A75D81_var], Color(0,0,0), PlayerGroupAll());
                    lv_admintext = (lv_admintext + StringExternal("Param/Value/A525EC6A"));
                }
                else {
                    if ((PlayerGroupHasPlayer(gv_dead, auto09A75D81_var) == true)) {
                        libNtve_gf_SetDialogItemDesaturationColor(gv_adminDialogUnitButton[auto09A75D81_var], Color(100,100,100), PlayerGroupAll());
                        lv_admintext = (lv_admintext + StringExternal("Param/Value/F46F9258"));
                    }
                    else {
                        if ((PlayerGroupHasPlayer(gv_marines, auto09A75D81_var) == true)) {
                            libNtve_gf_SetDialogItemDesaturationColor(gv_adminDialogUnitButton[auto09A75D81_var], Color(0,66*100/255,100), PlayerGroupAll());
                            lv_admintext = (lv_admintext + StringExternal("Param/Value/3651E788"));
                        }
                        else {
                            if ((PlayerGroupHasPlayer(gv_things, auto09A75D81_var) == true)) {
                                libNtve_gf_SetDialogItemDesaturationColor(gv_adminDialogUnitButton[auto09A75D81_var], Color(100.00, 0.00, 0.00), PlayerGroupAll());
                                lv_admintext = (lv_admintext + TextWithColor(StringExternal("Param/Value/50D0CE33"), gv_unitPlayerColor[auto09A75D81_var]));
                            }

                        }
                    }
                }
                lv_admintext = (lv_admintext + StringExternal("Param/Value/0F0352EA"));
                autoB1E1749F_ae = UserDataInstanceCount("MarinePerks");
                autoB1E1749F_var = 1;
                for ( ; autoB1E1749F_var <= autoB1E1749F_ae; autoB1E1749F_var += 1 ) {
                    if ((TechTreeUpgradeCount(auto09A75D81_var, UserDataGetUpgrade("MarinePerks", UserDataInstance("MarinePerks", autoB1E1749F_var), "Perk", 1), c_techCountQueuedOrBetter) > 0)) {
                        lv_admintext = (lv_admintext + StringExternal("Param/Value/CAEFB92F") + StringToText(UserDataGetString("MarinePerks", UserDataInstance("MarinePerks", autoB1E1749F_var), "Perk name", 1)) + StringExternal("Param/Value/6EAEA95C"));
                    }

                }
                lv_admintext = (lv_admintext + StringExternal("Param/Value/F475A3C7"));
                if ((PlayerGroupHasPlayer(gv_dead, auto09A75D81_var) == false)) {
                    lv_admintext = (lv_admintext + StringExternal("Param/Value/195A973C") + FixedToText(UnitGetPropertyFixed(gv_unit[auto09A75D81_var], c_unitPropLife, c_unitPropCurrent), 0) + StringExternal("Param/Value/92D1B3B5") + FixedToText(UnitGetPropertyFixed(gv_unit[auto09A75D81_var], c_unitPropLifeMax, c_unitPropCurrent), 0) + StringExternal("Param/Value/D8C2AD54") + FixedToText(UnitGetPropertyFixed(gv_unit[auto09A75D81_var], c_unitPropLifeRegen, c_unitPropCurrent), 2) + StringExternal("Param/Value/6B84935E") + FixedToText(UnitGetPropertyFixed(gv_unit[auto09A75D81_var], c_unitPropLifePercent, c_unitPropCurrent), 0) + StringExternal("Param/Value/F96C0658"));
                    lv_admintext = (lv_admintext + StringExternal("Param/Value/AF67E4D9") + FixedToText(UnitGetPropertyFixed(gv_unit[auto09A75D81_var], c_unitPropEnergy, c_unitPropCurrent), 0) + StringExternal("Param/Value/81F17B28") + FixedToText(UnitGetPropertyFixed(gv_unit[auto09A75D81_var], c_unitPropEnergyMax, c_unitPropCurrent), 0) + StringExternal("Param/Value/D075B145") + FixedToText(UnitGetPropertyFixed(gv_unit[auto09A75D81_var], c_unitPropEnergyRegen, c_unitPropCurrent), 2) + StringExternal("Param/Value/6B0A693C") + FixedToText(UnitGetPropertyFixed(gv_unit[auto09A75D81_var], c_unitPropEnergyPercent, c_unitPropCurrent), 0) + StringExternal("Param/Value/C2A65998"));
                    lv_admintext = (lv_admintext + StringExternal("Param/Value/04981F6D") + IntToText(PlayerGetPropertyInt(auto09A75D81_var, c_playerPropVespene)));
                    if ((PlayerGroupHasPlayer(gv_things, auto09A75D81_var) == true)) {
                        lv_admintext = (lv_admintext + StringExternal("Param/Value/68759AE3") + IntToText(gv_control));
                    }

                    lv_admintext = (lv_admintext + StringExternal("Param/Value/35F29100"));
                    if ((UnitInventoryCount(gv_unit[auto09A75D81_var], c_unitInventoryCountCarried) == 0)) {
                        lv_admintext = (lv_admintext + StringExternal("Param/Value/84BEAC47"));
                    }
                    else {
                        autoD78D048F_ae = UnitInventoryCount(gv_unit[auto09A75D81_var], c_unitInventoryCountCarried);
                        autoD78D048F_var = 1;
                        for ( ; autoD78D048F_var <= autoD78D048F_ae; autoD78D048F_var += 1 ) {
                            lv_admintext = (lv_admintext + StringExternal("Param/Value/9CC344FB") + UnitTypeGetName(UnitGetType(UnitInventoryItem(gv_unit[auto09A75D81_var], autoD78D048F_var))));
                            if ((UnitGetType(UnitInventoryItem(gv_unit[auto09A75D81_var], autoD78D048F_var)) == "Flamethrower")) {
                                lv_admintext = (lv_admintext + StringExternal("Param/Value/9B228B60") + IntToText(gv_flamethrowerGas) + StringExternal("Param/Value/CFD2B815"));
                            }

                        }
                    }
                }

                lv_admintext = (lv_admintext + StringExternal("Param/Value/8170E90D"));
                if ((gv_consumedByThing[auto09A75D81_var] == true) && (PlayerGroupHasPlayer(gv_things, auto09A75D81_var) != true)) {
                    lv_admintext = (lv_admintext + StringExternal("Param/Value/B2D308B6"));
                }

                lv_admintext = (lv_admintext + StringExternal("Param/Value/608AB459"));
                if ((PlayerGroupHasPlayer(gv_optedIn, auto09A75D81_var) == true)) {
                    lv_admintext = (lv_admintext + StringExternal("Param/Value/B91F94A4") + IntToText(gv_lGLastGameAsThing[auto09A75D81_var]) + StringExternal("Param/Value/4AFC05AA"));
                }

                if ((PlayerGroupHasPlayer(gv_admin, auto09A75D81_var) == true)) {
                    lv_admintext = (lv_admintext + StringExternal("Param/Value/4379F138"));
                }

                lv_admintext = (lv_admintext + StringExternal("Param/Value/F01C6A25") + StringToText((gf_GetLightingfromIndex(gv_visualsSelection[auto09A75D81_var]))));
                if ((PlayerGroupHasPlayer(gv_keyboardMovingPlayers, auto09A75D81_var) == true)) {
                    lv_admintext = (lv_admintext + StringExternal("Param/Value/C817F0A6"));
                }

                if ((gv_silentHillControlScheme[auto09A75D81_var] == true)) {
                    lv_admintext = (lv_admintext + StringExternal("Param/Value/130A159C"));
                }

                if ((gv_statsVerified[auto09A75D81_var] == false)) {
                    lv_admintext = (lv_admintext + StringExternal("Param/Value/B08D8951"));
                }

                if ((gv_enableSaving[auto09A75D81_var] == false)) {
                    lv_admintext = (lv_admintext + StringExternal("Param/Value/35566D5D"));
                }

                lv_admintext = (lv_admintext + StringExternal("Param/Value/7A5AA928") + IntToText(gv_gPGamesPlayed[auto09A75D81_var]));
                lv_admintext = (lv_admintext + StringExternal("Param/Value/E7665D83") + IntToText(gv_gMGamesMinutes[auto09A75D81_var]));
                lv_admintext = (lv_admintext + StringExternal("Param/Value/6E8CBF82") + IntToText(gv_mPMarinePoints[auto09A75D81_var]));
                lv_admintext = (lv_admintext + StringExternal("Param/Value/058A1522") + IntToText(gv_tPThingPoints[auto09A75D81_var]));
                lv_admintext = (lv_admintext + StringExternal("Param/Value/2E071598") + IntToText(gv_vPVicPoints[auto09A75D81_var]));
                lv_admintext = (lv_admintext + StringExternal("Param/Value/EF27B12A") + IntToText(gv_tRPThingRatingPoints[auto09A75D81_var]));
                lv_admintext = (lv_admintext + StringExternal("Param/Value/A63A6E28") + IntToText(gv_tRIThingRatingInstances[auto09A75D81_var]));
                if ((PlayerGroupHasPlayer(gv_things, auto09A75D81_var) == true)) {
                    lv_admintext = (lv_admintext + StringExternal("Param/Value/511670C5") + IntToText(gv_xTRP));
                    lv_admintext = (lv_admintext + StringExternal("Param/Value/FB486593") + IntToText(gv_xTRI));
                }

                lv_admintext = (lv_admintext + StringExternal("Param/Value/B32BFEFB"));
                if ((gv_muted[auto09A75D81_var] == false)) {
                    lv_admintext = (lv_admintext + StringExternal("Param/Value/7EA84F97"));
                }
                else {
                    lv_admintext = (lv_admintext + StringExternal("Param/Value/EAC7AABA"));
                }
                lv_admintext = (lv_admintext + StringExternal("Param/Value/138D4796"));
                if ((gv_playerRoundsBanned[auto09A75D81_var] > 0)) {
                    lv_admintext = (lv_admintext + StringExternal("Param/Value/B9E3E851"));
                }
                else {
                    lv_admintext = (lv_admintext + StringExternal("Param/Value/C1187E84"));
                }
                lv_admintext = (lv_admintext + StringExternal("Param/Value/0554668C"));
                if ((gv_playerRoundsRatingBanned[auto09A75D81_var] > 0)) {
                    lv_admintext = (lv_admintext + StringExternal("Param/Value/8918461D"));
                }
                else {
                    lv_admintext = (lv_admintext + StringExternal("Param/Value/3F2BB075"));
                }
                libNtve_gf_SetDialogItemTooltip(gv_adminDialogUnitButton[auto09A75D81_var], lv_admintext, PlayerGroupAll());
            }
            Wait(lv_notedrefreshtime, c_timeReal);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AdminControlShow_Init () {
    gt_AdminControlShow = TriggerCreate("gt_AdminControlShow_Func");
    TriggerEnable(gt_AdminControlShow, false);
    TriggerAddEventKeyPressed(gt_AdminControlShow, c_playerAny, c_keyNumPad0, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(gt_AdminControlShow, c_playerAny, c_keyZ, true, c_keyModifierStateIgnore, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Admin Panel Controls
//--------------------------------------------------------------------------------------------------
bool gt_AdminPanelControls_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_localchosenplayer;
    int lv_x;

    // Automatic Variable Declarations
    int auto79A087E3_val;
    fixed autoB81B8814_val;
    const int autoAD48BE25_ae = 15;
    const int autoAD48BE25_ai = 1;
    const int auto00227E7F_ae = 15;
    const int auto00227E7F_ai = 1;
    const int autoE86FCCBA_ae = 15;
    const int autoE86FCCBA_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(gf_Admins(EventPlayer()))) {
            return false;
        }

        if (!((DialogControlGetDialog(EventDialogControl()) == DataTableGetDialog(true, ("AdminControls" + IntToString(EventPlayer())))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_localchosenplayer = FixedToInt(libNtve_gf_DialogItemValue(libNtve_gf_ValueFromDataTableDialogItem(true, ("SelectedButton" + IntToString(EventPlayer()))), EventPlayer()));
    auto79A087E3_val = EventDialogControl();
    if (auto79A087E3_val == libNtve_gf_ValueFromDataTableDialogItem(true, ("SmiteButton" + IntToString(EventPlayer())))) {
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Protoss, UnitGetPosition(gv_unit[lv_localchosenplayer]));
        PlayerCreateEffectUnit(lv_localchosenplayer, "Kill", gv_unit[lv_localchosenplayer]);
    }
    else if (auto79A087E3_val == libNtve_gf_ValueFromDataTableDialogItem(true, ("KickButton" + IntToString(EventPlayer())))) {
        GameOver(lv_localchosenplayer, c_gameOverDefeat, false, false);
    }
    else if (auto79A087E3_val == libNtve_gf_ValueFromDataTableDialogItem(true, ("PauseButton" + IntToString(EventPlayer())))) {
        libNtve_gf_PauseUnit(gv_unit[lv_localchosenplayer], true);
        UnitAbilityEnable(gv_unit[lv_localchosenplayer], "PsiStorm2", false);
        UnitAbilityEnable(gv_unit[lv_localchosenplayer], "TransformtoThing", false);
    }
    else if (auto79A087E3_val == libNtve_gf_ValueFromDataTableDialogItem(true, ("UnpauseButton" + IntToString(EventPlayer())))) {
        libNtve_gf_PauseUnit(gv_unit[lv_localchosenplayer], false);
        UnitAbilityEnable(gv_unit[lv_localchosenplayer], "PsiStorm2", true);
        UnitAbilityEnable(gv_unit[lv_localchosenplayer], "TransformtoThing", true);
    }
    else if (auto79A087E3_val == libNtve_gf_ValueFromDataTableDialogItem(true, ("GoToButton" + IntToString(EventPlayer())))) {
        if ((UnitIsAlive(gv_unit[lv_localchosenplayer]) == false)) {
            CameraPan(EventPlayer(), gv_deathSpot[lv_localchosenplayer], 0.0, -1, 10.0, false);
        }
        else {
            CameraPan(EventPlayer(), UnitGetPosition(gv_unit[lv_localchosenplayer]), 0.0, -1, 10.0, false);
        }
    }
    else if (auto79A087E3_val == libNtve_gf_ValueFromDataTableDialogItem(true, ("FollowButton" + IntToString(EventPlayer())))) {
        DialogControlSelectItem(gv_spectatorFollowDialogItem, PlayerGroupSingle(EventPlayer()), gv_playerIndex[lv_localchosenplayer]);
    }
    else if (auto79A087E3_val == libNtve_gf_ValueFromDataTableDialogItem(true, ("AttackeButton" + IntToString(EventPlayer())))) {
        UnitAbilityEnable(gv_unit[lv_localchosenplayer], "attack", true);
        UnitAbilityEnable(gv_unit[lv_localchosenplayer], "PsiStorm2", true);
        UnitAbilityEnable(gv_unit[lv_localchosenplayer], "ThrowMolotov", true);
    }
    else if (auto79A087E3_val == libNtve_gf_ValueFromDataTableDialogItem(true, ("AttackdButton" + IntToString(EventPlayer())))) {
        UnitAbilityEnable(gv_unit[lv_localchosenplayer], "attack", false);
        UnitAbilityEnable(gv_unit[lv_localchosenplayer], "PsiStorm2", false);
        UnitAbilityEnable(gv_unit[lv_localchosenplayer], "ThrowMolotov", false);
    }
    else if (auto79A087E3_val == libNtve_gf_ValueFromDataTableDialogItem(true, ("SlapButton" + IntToString(EventPlayer())))) {
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Terran, UnitGetPosition(gv_unit[lv_localchosenplayer]));
        PlayerCreateEffectUnit(FixedToInt(libNtve_gf_DialogItemValue(libNtve_gf_ValueFromDataTableDialogItem(true, ("SelectedButton" + IntToString(EventPlayer()))), EventPlayer())), "ThermalLancesMU", gv_unit[lv_localchosenplayer]);
    }
    else if (auto79A087E3_val == libNtve_gf_ValueFromDataTableDialogItem(true, ("ModelButton" + IntToString(EventPlayer())))) {
        if (gf_Developers(EventPlayer())) {
            gf_GenerateButtonSubPanel(EventPlayer(), lv_localchosenplayer, (DialogGetOffsetX(DialogControlGetDialog(EventDialogControl())) + (DialogGetWidth(DialogControlGetDialog(EventDialogControl())) + 5)), (DialogGetOffsetY(DialogControlGetDialog(EventDialogControl())) + 20), DialogGetAnchor(DialogControlGetDialog(EventDialogControl())), "Model Options", "Swap", true, "Set Height", true, "Set Scale", true, "", false, "", false, "", false, "", false);
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/9DECA813"));
        }
    }
    else if (auto79A087E3_val == libNtve_gf_ValueFromDataTableDialogItem(true, ("RestoreButton" + IntToString(EventPlayer())))) {
        if (gf_Developers(EventPlayer())) {
            UnitSetPropertyFixed(gv_unit[lv_localchosenplayer], c_unitPropLife, UnitGetPropertyFixed(gv_unit[lv_localchosenplayer], c_unitPropLifeMax, c_unitPropCurrent));
            UnitSetPropertyFixed(gv_unit[lv_localchosenplayer], c_unitPropEnergy, UnitGetPropertyFixed(gv_unit[lv_localchosenplayer], c_unitPropEnergyMax, c_unitPropCurrent));
            UnitAbilityReset(gv_unit[lv_localchosenplayer], AbilityCommand("LockDoor", 0), c_spendLocationAll);
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/6D464DD1"));
        }
    }
    else if (auto79A087E3_val == libNtve_gf_ValueFromDataTableDialogItem(true, ("OxyButton" + IntToString(EventPlayer())))) {
        if (gf_Developers(EventPlayer())) {
            gf_GenerateListSubPanel(EventPlayer(), lv_localchosenplayer, (DialogGetOffsetX(DialogControlGetDialog(EventDialogControl())) + (DialogGetWidth(DialogControlGetDialog(EventDialogControl())) + 5)), (DialogGetOffsetY(DialogControlGetDialog(EventDialogControl())) + 20), DialogGetAnchor(DialogControlGetDialog(EventDialogControl())), "Oxygen");
            gf_OxyList(EventPlayer());
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/8F50F04E"));
        }
    }
    else if (auto79A087E3_val == libNtve_gf_ValueFromDataTableDialogItem(true, ("EmpButton" + IntToString(EventPlayer())))) {
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Protoss, UnitGetPosition(gv_unit[lv_localchosenplayer]));
        PlayerCreateEffectPoint(EventPlayer(), "EMPSearch", UnitGetPosition(gv_unit[lv_localchosenplayer]));
    }
    else if (auto79A087E3_val == libNtve_gf_ValueFromDataTableDialogItem(true, ("PointsButton" + IntToString(EventPlayer())))) {
        if (gf_Developers(EventPlayer())) {
            gf_GenerateStatsModifier(EventPlayer(), lv_localchosenplayer);
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/9EA22348"));
        }
    }
    else if (auto79A087E3_val == libNtve_gf_ValueFromDataTableDialogItem(true, ("Transform" + IntToString(EventPlayer())))) {
        if (gf_Developers(EventPlayer())) {
            UnitIssueOrder(gv_unit[lv_localchosenplayer], Order(AbilityCommand("TransformtoThing", 0)), c_orderQueueReplace);
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/65DD2EAB"));
        }
    }
    else if (auto79A087E3_val == libNtve_gf_ValueFromDataTableDialogItem(true, ("Shadows" + IntToString(EventPlayer())))) {
        if (gf_Developers(EventPlayer())) {
            if ((UnitHasBehavior(gv_unit[lv_localchosenplayer], "Shadow") == true)) {
                UnitBehaviorRemove(gv_unit[lv_localchosenplayer], "Shadow", 1);
            }
            else {
                UnitBehaviorAdd(gv_unit[lv_localchosenplayer], "Shadow", gv_unit[lv_localchosenplayer], 1);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/81856AE6"));
        }
    }
    else if (auto79A087E3_val == libNtve_gf_ValueFromDataTableDialogItem(true, ("MuteButton" + IntToString(EventPlayer())))) {
        gv_mutePlayer[EventPlayer()] = lv_localchosenplayer;
        BankLoad("TheThing", lv_localchosenplayer);
        gv_playerRoundsMuted[lv_localchosenplayer] = BankValueGetAsInt(BankLastCreated(), "000", "1");
        libNtve_gf_SetDialogItemTooltip(gv_muteRoundsItems[1], (PlayerName(lv_localchosenplayer) + StringExternal("Param/Value/19935DB7") + IntToText(gv_playerRoundsMuted[lv_localchosenplayer]) + StringExternal("Param/Value/A62521A7")), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemTooltip(gv_muteRoundsItems[2], (StringExternal("Param/Value/671D4D34") + PlayerName(lv_localchosenplayer)), PlayerGroupSingle(EventPlayer()));
        DialogSetVisible(gv_muteRounds, PlayerGroupSingle(EventPlayer()), true);
    }
    else if (auto79A087E3_val == libNtve_gf_ValueFromDataTableDialogItem(true, ("WarnButton" + IntToString(EventPlayer())))) {
        gv_warningPlayer = lv_localchosenplayer;
        DialogControlSetVisible(gv_warningEditItems[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_warningEditItems[2], PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemTooltip(gv_warningEditItems[1], (StringExternal("Param/Value/6F616C8D") + PlayerName(lv_localchosenplayer)), PlayerGroupSingle(EventPlayer()));
        DialogSetVisible(gv_warningEdit, PlayerGroupSingle(EventPlayer()), true);
    }
    else if (auto79A087E3_val == libNtve_gf_ValueFromDataTableDialogItem(true, ("AnnounceButton" + IntToString(EventPlayer())))) {
        DialogControlSetVisible(gv_warningEditItems[1], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_warningEditItems[2], PlayerGroupSingle(EventPlayer()), true);
        DialogSetVisible(gv_warningEdit, PlayerGroupSingle(EventPlayer()), true);
    }
    else if (auto79A087E3_val == libNtve_gf_ValueFromDataTableDialogItem(true, ("BanButton" + IntToString(EventPlayer())))) {
        gv_banPlayer[EventPlayer()] = lv_localchosenplayer;
        BankLoad("TheThing", lv_localchosenplayer);
        gv_playerRoundsMuted[lv_localchosenplayer] = BankValueGetAsInt(BankLastCreated(), "111111", "0");
        libNtve_gf_SetDialogItemTooltip(gv_banRoundsItems[1], (PlayerName(lv_localchosenplayer) + StringExternal("Param/Value/283F7E6E") + IntToText(gv_playerRoundsBanned[lv_localchosenplayer]) + StringExternal("Param/Value/4BF49E14")), PlayerGroupSingle(EventPlayer()));
        DialogSetVisible(gv_banRounds, PlayerGroupSingle(EventPlayer()), true);
    }
    else if (auto79A087E3_val == libNtve_gf_ValueFromDataTableDialogItem(true, ("RatingBanButton" + IntToString(EventPlayer())))) {
        gv_rBTarget[EventPlayer()] = lv_localchosenplayer;
        BankLoad("TheThing", lv_localchosenplayer);
        gv_playerRoundsMuted[lv_localchosenplayer] = BankValueGetAsInt(BankLastCreated(), "Zebra", "a");
        libNtve_gf_SetDialogItemTooltip(gv_ratingBanRoundsItems[1], (PlayerName(lv_localchosenplayer) + StringExternal("Param/Value/682FAFA5") + IntToText(gv_playerRoundsRatingBanned[lv_localchosenplayer]) + StringExternal("Param/Value/8D44EDFA")), PlayerGroupSingle(EventPlayer()));
        DialogSetVisible(gv_ratingBanRounds, PlayerGroupSingle(EventPlayer()), true);
    }
    else if (auto79A087E3_val == libNtve_gf_ValueFromDataTableDialogItem(true, ("Pause/Start Time" + IntToString(EventPlayer())))) {
        if (gf_Developers(EventPlayer())) {
            if ((TimerIsPaused(gv_timer) == false)) {
                TimerPause(gv_timer, true);
                UIDisplayMessage(gv_admin, c_messageAreaDebug, StringExternal("Param/Value/228AAEF5"));
            }
            else {
                TimerPause(gv_timer, false);
                UIDisplayMessage(gv_admin, c_messageAreaDebug, StringExternal("Param/Value/880A2E04"));
            }
        }

    }
    else if (auto79A087E3_val == libNtve_gf_ValueFromDataTableDialogItem(true, ("MoreButton" + IntToString(EventPlayer())))) {
        autoB81B8814_val = libNtve_gf_DialogItemValue(EventDialogControl(), EventPlayer());
        if (autoB81B8814_val == 30.0) {
            libNtve_gf_SetDialogItemCurrentValue(EventDialogControl(), 31.0, PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libNtve_gf_ValueFromDataTableDialogItem(true, ("FollowButton" + IntToString(EventPlayer()))), StringExternal("Param/Value/62747FC3"), PlayerGroupAll());
            libNtve_gf_SaveDataTableValueDialogItem(true, ("RevealButton" + IntToString(EventPlayer())), libNtve_gf_ValueFromDataTableDialogItem(true, ("FollowButton" + IntToString(EventPlayer()))));
            libNtve_gf_SetDialogItemText(libNtve_gf_ValueFromDataTableDialogItem(true, ("GoToButton" + IntToString(EventPlayer()))), StringExternal("Param/Value/34D23E51"), PlayerGroupAll());
            libNtve_gf_SaveDataTableValueDialogItem(true, ("HideButton" + IntToString(EventPlayer())), libNtve_gf_ValueFromDataTableDialogItem(true, ("GoToButton" + IntToString(EventPlayer()))));
            libNtve_gf_SetDialogItemText(libNtve_gf_ValueFromDataTableDialogItem(true, ("UnpauseButton" + IntToString(EventPlayer()))), StringExternal("Param/Value/2D297249"), PlayerGroupAll());
            libNtve_gf_SaveDataTableValueDialogItem(true, ("AttackeButton" + IntToString(EventPlayer())), libNtve_gf_ValueFromDataTableDialogItem(true, ("UnpauseButton" + IntToString(EventPlayer()))));
            libNtve_gf_SetDialogItemText(libNtve_gf_ValueFromDataTableDialogItem(true, ("PauseButton" + IntToString(EventPlayer()))), StringExternal("Param/Value/A7547E9A"), PlayerGroupAll());
            libNtve_gf_SaveDataTableValueDialogItem(true, ("AttackdButton" + IntToString(EventPlayer())), libNtve_gf_ValueFromDataTableDialogItem(true, ("PauseButton" + IntToString(EventPlayer()))));
            libNtve_gf_SetDialogItemText(libNtve_gf_ValueFromDataTableDialogItem(true, ("SmiteButton" + IntToString(EventPlayer()))), StringExternal("Param/Value/834CE7D3"), PlayerGroupAll());
            libNtve_gf_SaveDataTableValueDialogItem(true, ("SlapButton" + IntToString(EventPlayer())), libNtve_gf_ValueFromDataTableDialogItem(true, ("SmiteButton" + IntToString(EventPlayer()))));
            libNtve_gf_SetDialogItemText(libNtve_gf_ValueFromDataTableDialogItem(true, ("KickButton" + IntToString(EventPlayer()))), StringExternal("Param/Value/526FB72B"), PlayerGroupAll());
            libNtve_gf_SaveDataTableValueDialogItem(true, ("ModelButton" + IntToString(EventPlayer())), libNtve_gf_ValueFromDataTableDialogItem(true, ("KickButton" + IntToString(EventPlayer()))));
            libNtve_gf_SaveDataTableValueDialogItem(true, ("FollowButton" + IntToString(EventPlayer())), c_invalidDialogControlId);
            libNtve_gf_SaveDataTableValueDialogItem(true, ("GoToButton" + IntToString(EventPlayer())), c_invalidDialogControlId);
            libNtve_gf_SaveDataTableValueDialogItem(true, ("UnpauseButton" + IntToString(EventPlayer())), c_invalidDialogControlId);
            libNtve_gf_SaveDataTableValueDialogItem(true, ("PauseButton" + IntToString(EventPlayer())), c_invalidDialogControlId);
            libNtve_gf_SaveDataTableValueDialogItem(true, ("SmiteButton" + IntToString(EventPlayer())), c_invalidDialogControlId);
            libNtve_gf_SaveDataTableValueDialogItem(true, ("KickButton" + IntToString(EventPlayer())), c_invalidDialogControlId);
        }
        else if (autoB81B8814_val == 31.0) {
            libNtve_gf_SetDialogItemCurrentValue(EventDialogControl(), 32.0, PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libNtve_gf_ValueFromDataTableDialogItem(true, ("RevealButton" + IntToString(EventPlayer()))), StringExternal("Param/Value/92FBEA57"), PlayerGroupAll());
            libNtve_gf_SaveDataTableValueDialogItem(true, ("RestoreButton" + IntToString(EventPlayer())), libNtve_gf_ValueFromDataTableDialogItem(true, ("RevealButton" + IntToString(EventPlayer()))));
            libNtve_gf_SetDialogItemText(libNtve_gf_ValueFromDataTableDialogItem(true, ("HideButton" + IntToString(EventPlayer()))), StringExternal("Param/Value/77176D67"), PlayerGroupAll());
            libNtve_gf_SaveDataTableValueDialogItem(true, ("OxyButton" + IntToString(EventPlayer())), libNtve_gf_ValueFromDataTableDialogItem(true, ("HideButton" + IntToString(EventPlayer()))));
            libNtve_gf_SetDialogItemText(libNtve_gf_ValueFromDataTableDialogItem(true, ("AttackeButton" + IntToString(EventPlayer()))), StringExternal("Param/Value/83A41172"), PlayerGroupAll());
            libNtve_gf_SaveDataTableValueDialogItem(true, ("EmpButton" + IntToString(EventPlayer())), libNtve_gf_ValueFromDataTableDialogItem(true, ("AttackeButton" + IntToString(EventPlayer()))));
            libNtve_gf_SetDialogItemText(libNtve_gf_ValueFromDataTableDialogItem(true, ("AttackdButton" + IntToString(EventPlayer()))), StringExternal("Param/Value/35875EFB"), PlayerGroupAll());
            libNtve_gf_SaveDataTableValueDialogItem(true, ("PointsButton" + IntToString(EventPlayer())), libNtve_gf_ValueFromDataTableDialogItem(true, ("AttackdButton" + IntToString(EventPlayer()))));
            libNtve_gf_SetDialogItemText(libNtve_gf_ValueFromDataTableDialogItem(true, ("SlapButton" + IntToString(EventPlayer()))), StringExternal("Param/Value/07315352"), PlayerGroupAll());
            libNtve_gf_SaveDataTableValueDialogItem(true, ("Transform" + IntToString(EventPlayer())), libNtve_gf_ValueFromDataTableDialogItem(true, ("SlapButton" + IntToString(EventPlayer()))));
            libNtve_gf_SetDialogItemText(libNtve_gf_ValueFromDataTableDialogItem(true, ("ModelButton" + IntToString(EventPlayer()))), StringExternal("Param/Value/FB831B36"), PlayerGroupAll());
            libNtve_gf_SaveDataTableValueDialogItem(true, ("Shadows" + IntToString(EventPlayer())), libNtve_gf_ValueFromDataTableDialogItem(true, ("ModelButton" + IntToString(EventPlayer()))));
            libNtve_gf_SaveDataTableValueDialogItem(true, ("RevealButton" + IntToString(EventPlayer())), c_invalidDialogControlId);
            libNtve_gf_SaveDataTableValueDialogItem(true, ("HideButton" + IntToString(EventPlayer())), c_invalidDialogControlId);
            libNtve_gf_SaveDataTableValueDialogItem(true, ("AttackeButton" + IntToString(EventPlayer())), c_invalidDialogControlId);
            libNtve_gf_SaveDataTableValueDialogItem(true, ("AttackdButton" + IntToString(EventPlayer())), c_invalidDialogControlId);
            libNtve_gf_SaveDataTableValueDialogItem(true, ("SlapButton" + IntToString(EventPlayer())), c_invalidDialogControlId);
            libNtve_gf_SaveDataTableValueDialogItem(true, ("ModelButton" + IntToString(EventPlayer())), c_invalidDialogControlId);
        }
        else if (autoB81B8814_val == 32.0) {
            libNtve_gf_SetDialogItemCurrentValue(EventDialogControl(), 33.0, PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libNtve_gf_ValueFromDataTableDialogItem(true, ("RestoreButton" + IntToString(EventPlayer()))), StringExternal("Param/Value/763D8558"), PlayerGroupAll());
            libNtve_gf_SaveDataTableValueDialogItem(true, ("MuteButton" + IntToString(EventPlayer())), libNtve_gf_ValueFromDataTableDialogItem(true, ("RestoreButton" + IntToString(EventPlayer()))));
            libNtve_gf_SetDialogItemText(libNtve_gf_ValueFromDataTableDialogItem(true, ("OxyButton" + IntToString(EventPlayer()))), StringExternal("Param/Value/44DF657E"), PlayerGroupAll());
            libNtve_gf_SaveDataTableValueDialogItem(true, ("BanButton" + IntToString(EventPlayer())), libNtve_gf_ValueFromDataTableDialogItem(true, ("OxyButton" + IntToString(EventPlayer()))));
            libNtve_gf_SetDialogItemText(libNtve_gf_ValueFromDataTableDialogItem(true, ("EmpButton" + IntToString(EventPlayer()))), StringExternal("Param/Value/1932B6CE"), PlayerGroupAll());
            libNtve_gf_SaveDataTableValueDialogItem(true, ("WarnButton" + IntToString(EventPlayer())), libNtve_gf_ValueFromDataTableDialogItem(true, ("EmpButton" + IntToString(EventPlayer()))));
            libNtve_gf_SetDialogItemText(libNtve_gf_ValueFromDataTableDialogItem(true, ("PointsButton" + IntToString(EventPlayer()))), StringExternal("Param/Value/D923D872"), PlayerGroupAll());
            libNtve_gf_SaveDataTableValueDialogItem(true, ("AnnounceButton" + IntToString(EventPlayer())), libNtve_gf_ValueFromDataTableDialogItem(true, ("PointsButton" + IntToString(EventPlayer()))));
            libNtve_gf_SetDialogItemText(libNtve_gf_ValueFromDataTableDialogItem(true, ("Transform" + IntToString(EventPlayer()))), StringExternal("Param/Value/A514FB6F"), PlayerGroupAll());
            libNtve_gf_SaveDataTableValueDialogItem(true, ("RatingBanButton" + IntToString(EventPlayer())), libNtve_gf_ValueFromDataTableDialogItem(true, ("Transform" + IntToString(EventPlayer()))));
            libNtve_gf_SetDialogItemText(libNtve_gf_ValueFromDataTableDialogItem(true, ("Shadows" + IntToString(EventPlayer()))), StringExternal("Param/Value/36E63AD3"), PlayerGroupAll());
            libNtve_gf_SaveDataTableValueDialogItem(true, ("Pause/Start Time" + IntToString(EventPlayer())), libNtve_gf_ValueFromDataTableDialogItem(true, ("Shadows" + IntToString(EventPlayer()))));
            libNtve_gf_SaveDataTableValueDialogItem(true, ("RestoreButton" + IntToString(EventPlayer())), c_invalidDialogControlId);
            libNtve_gf_SaveDataTableValueDialogItem(true, ("OxyButton" + IntToString(EventPlayer())), c_invalidDialogControlId);
            libNtve_gf_SaveDataTableValueDialogItem(true, ("EmpButton" + IntToString(EventPlayer())), c_invalidDialogControlId);
            libNtve_gf_SaveDataTableValueDialogItem(true, ("PointsButton" + IntToString(EventPlayer())), c_invalidDialogControlId);
            libNtve_gf_SaveDataTableValueDialogItem(true, ("Transform" + IntToString(EventPlayer())), c_invalidDialogControlId);
            libNtve_gf_SaveDataTableValueDialogItem(true, ("Shadows" + IntToString(EventPlayer())), c_invalidDialogControlId);
        }
        else if (autoB81B8814_val == 33.0) {
            libNtve_gf_SetDialogItemCurrentValue(EventDialogControl(), 30.0, PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libNtve_gf_ValueFromDataTableDialogItem(true, ("MuteButton" + IntToString(EventPlayer()))), StringExternal("Param/Value/8DC5DBC7"), PlayerGroupAll());
            libNtve_gf_SaveDataTableValueDialogItem(true, ("FollowButton" + IntToString(EventPlayer())), libNtve_gf_ValueFromDataTableDialogItem(true, ("MuteButton" + IntToString(EventPlayer()))));
            libNtve_gf_SetDialogItemText(libNtve_gf_ValueFromDataTableDialogItem(true, ("BanButton" + IntToString(EventPlayer()))), StringExternal("Param/Value/415B53FC"), PlayerGroupAll());
            libNtve_gf_SaveDataTableValueDialogItem(true, ("GoToButton" + IntToString(EventPlayer())), libNtve_gf_ValueFromDataTableDialogItem(true, ("BanButton" + IntToString(EventPlayer()))));
            libNtve_gf_SetDialogItemText(libNtve_gf_ValueFromDataTableDialogItem(true, ("WarnButton" + IntToString(EventPlayer()))), StringExternal("Param/Value/D3EDC166"), PlayerGroupAll());
            libNtve_gf_SaveDataTableValueDialogItem(true, ("UnpauseButton" + IntToString(EventPlayer())), libNtve_gf_ValueFromDataTableDialogItem(true, ("WarnButton" + IntToString(EventPlayer()))));
            libNtve_gf_SetDialogItemText(libNtve_gf_ValueFromDataTableDialogItem(true, ("AnnounceButton" + IntToString(EventPlayer()))), StringExternal("Param/Value/BAB41185"), PlayerGroupAll());
            libNtve_gf_SaveDataTableValueDialogItem(true, ("PauseButton" + IntToString(EventPlayer())), libNtve_gf_ValueFromDataTableDialogItem(true, ("AnnounceButton" + IntToString(EventPlayer()))));
            libNtve_gf_SetDialogItemText(libNtve_gf_ValueFromDataTableDialogItem(true, ("RatingBanButton" + IntToString(EventPlayer()))), StringExternal("Param/Value/797D07C4"), PlayerGroupAll());
            libNtve_gf_SaveDataTableValueDialogItem(true, ("SmiteButton" + IntToString(EventPlayer())), libNtve_gf_ValueFromDataTableDialogItem(true, ("RatingBanButton" + IntToString(EventPlayer()))));
            libNtve_gf_SetDialogItemText(libNtve_gf_ValueFromDataTableDialogItem(true, ("Pause/Start Time" + IntToString(EventPlayer()))), StringExternal("Param/Value/144364B2"), PlayerGroupAll());
            libNtve_gf_SaveDataTableValueDialogItem(true, ("KickButton" + IntToString(EventPlayer())), libNtve_gf_ValueFromDataTableDialogItem(true, ("Pause/Start Time" + IntToString(EventPlayer()))));
            libNtve_gf_SaveDataTableValueDialogItem(true, ("MuteButton" + IntToString(EventPlayer())), c_invalidDialogControlId);
            libNtve_gf_SaveDataTableValueDialogItem(true, ("BanButton" + IntToString(EventPlayer())), c_invalidDialogControlId);
            libNtve_gf_SaveDataTableValueDialogItem(true, ("WarnButton" + IntToString(EventPlayer())), c_invalidDialogControlId);
            libNtve_gf_SaveDataTableValueDialogItem(true, ("AnnounceButton" + IntToString(EventPlayer())), c_invalidDialogControlId);
            libNtve_gf_SaveDataTableValueDialogItem(true, ("RatingBanButton" + IntToString(EventPlayer())), c_invalidDialogControlId);
            libNtve_gf_SaveDataTableValueDialogItem(true, ("Pause/Start Time" + IntToString(EventPlayer())), c_invalidDialogControlId);
        }
        else {
        }
    }
    else if (auto79A087E3_val == libNtve_gf_ValueFromDataTableDialogItem(true, ("HideButton" + IntToString(EventPlayer())))) {
        lv_x = 1;
        for ( ; ( (autoAD48BE25_ai >= 0 && lv_x <= autoAD48BE25_ae) || (autoAD48BE25_ai < 0 && lv_x >= autoAD48BE25_ae) ) ; lv_x += autoAD48BE25_ai ) {
            if ((PlayerStatus(lv_x) == c_playerStatusActive) && (PlayerType(lv_x) == c_playerTypeUser)) {
                VisRevealerDestroy(gv_revealed[lv_x][lv_localchosenplayer]);
                gv_revealed[lv_x][lv_localchosenplayer] = null;
            }

        }
    }
    else if (auto79A087E3_val == libNtve_gf_ValueFromDataTableDialogItem(true, ("RevealButton" + IntToString(EventPlayer())))) {
        lv_x = 1;
        for ( ; ( (auto00227E7F_ai >= 0 && lv_x <= auto00227E7F_ae) || (auto00227E7F_ai < 0 && lv_x >= auto00227E7F_ae) ) ; lv_x += auto00227E7F_ai ) {
            if ((PlayerStatus(lv_x) == c_playerStatusActive) && (PlayerType(lv_x) == c_playerTypeUser)) {
                VisRevealerDestroy(gv_revealed[lv_x][lv_localchosenplayer]);
                gv_revealed[lv_x][lv_localchosenplayer] = null;
            }

        }
        RegionAttachToUnit(gv_revealregion[lv_localchosenplayer], gv_unit[lv_localchosenplayer], Point(0.0, 0.0));
        lv_x = 1;
        for ( ; ( (autoE86FCCBA_ai >= 0 && lv_x <= autoE86FCCBA_ae) || (autoE86FCCBA_ai < 0 && lv_x >= autoE86FCCBA_ae) ) ; lv_x += autoE86FCCBA_ai ) {
            if ((PlayerStatus(lv_x) == c_playerStatusActive) && (PlayerType(lv_x) == c_playerTypeUser)) {
                if ((GameIsTestMap(false) == true)) {
                    gf_CreateRevealer(lv_x, lv_localchosenplayer, true);
                }
                else {
                    gf_CreateRevealer(lv_x, lv_localchosenplayer, false);
                }
            }

        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AdminPanelControls_Init () {
    gt_AdminPanelControls = TriggerCreate("gt_AdminPanelControls_Func");
    TriggerAddEventDialogControl(gt_AdminPanelControls, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Admin Control Mouse Enter
//--------------------------------------------------------------------------------------------------
bool gt_AdminControlMouseEnter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((DialogControlGetDialog(EventDialogControl()) == gv_adminDialog))) {
            return false;
        }

        if (!(gf_Admins(EventPlayer()))) {
            return false;
        }

        if (!((DialogIsVisible(gv_adminDialog, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetTransparency(gv_adminDialog, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AdminControlMouseEnter_Init () {
    gt_AdminControlMouseEnter = TriggerCreate("gt_AdminControlMouseEnter_Func");
    TriggerEnable(gt_AdminControlMouseEnter, false);
    TriggerAddEventDialogControl(gt_AdminControlMouseEnter, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Admin Control Mouse Exit
//--------------------------------------------------------------------------------------------------
bool gt_AdminControlMouseExit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((DialogControlGetDialog(EventDialogControl()) == gv_adminDialog))) {
            return false;
        }

        if (!(gf_Admins(EventPlayer()))) {
            return false;
        }

        if (!((DialogIsVisible(gv_adminDialog, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetTransparency(gv_adminDialog, 50.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AdminControlMouseExit_Init () {
    gt_AdminControlMouseExit = TriggerCreate("gt_AdminControlMouseExit_Func");
    TriggerEnable(gt_AdminControlMouseExit, false);
    TriggerAddEventDialogControl(gt_AdminControlMouseExit, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Admin Control Highlight
//--------------------------------------------------------------------------------------------------
bool gt_AdminControlHighlight_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(gf_Admins(EventPlayer()))) {
            return false;
        }

        if (!((DialogIsVisible(gv_adminDialog, EventPlayer()) == true))) {
            return false;
        }

        if (!((gv_unit[UnitGetOwner(EventUnit())] == EventUnit()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetTransparency(gv_adminDialog, 0.0);
    libNtve_gf_SetDialogItemDesaturationColor(gv_adminDialogUnitButton[UnitGetOwner(EventUnit())], Color(150*100/255,150*100/255,30*100/255), PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AdminControlHighlight_Init () {
    gt_AdminControlHighlight = TriggerCreate("gt_AdminControlHighlight_Func");
    TriggerEnable(gt_AdminControlHighlight, false);
    TriggerAddEventUnitHighlight(gt_AdminControlHighlight, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Admin Control Unhighlight
//--------------------------------------------------------------------------------------------------
bool gt_AdminControlUnhighlight_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(gf_Admins(EventPlayer()))) {
            return false;
        }

        if (!((DialogIsVisible(gv_adminDialog, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetTransparency(gv_adminDialog, 50.0);
    if ((PlayerGroupHasPlayer(gv_left, UnitGetOwner(EventUnit())) == true)) {
        libNtve_gf_SetDialogItemDesaturationColor(gv_adminDialogUnitButton[UnitGetOwner(EventUnit())], Color(0,0,0), PlayerGroupSingle(EventPlayer()));
    }
    else {
        if ((PlayerGroupHasPlayer(gv_dead, UnitGetOwner(EventUnit())) == true)) {
            libNtve_gf_SetDialogItemDesaturationColor(gv_adminDialogUnitButton[UnitGetOwner(EventUnit())], Color(100,100,100), PlayerGroupSingle(EventPlayer()));
        }
        else {
            if ((PlayerGroupHasPlayer(gv_marines, UnitGetOwner(EventUnit())) == true)) {
                libNtve_gf_SetDialogItemDesaturationColor(gv_adminDialogUnitButton[UnitGetOwner(EventUnit())], Color(0,66*100/255,100), PlayerGroupSingle(EventPlayer()));
            }
            else {
                if ((PlayerGroupHasPlayer(gv_things, UnitGetOwner(EventUnit())) == true)) {
                    libNtve_gf_SetDialogItemDesaturationColor(gv_adminDialogUnitButton[UnitGetOwner(EventUnit())], Color(100.00, 0.00, 0.00), PlayerGroupSingle(EventPlayer()));
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AdminControlUnhighlight_Init () {
    gt_AdminControlUnhighlight = TriggerCreate("gt_AdminControlUnhighlight_Func");
    TriggerEnable(gt_AdminControlUnhighlight, false);
    TriggerAddEventUnitHighlight(gt_AdminControlUnhighlight, null, c_playerAny, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Admin Control Hide
//--------------------------------------------------------------------------------------------------
bool gt_AdminControlHide_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(gf_Admins(EventPlayer()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(gv_adminDialog, EventPlayer()) == true)) {
        DialogSetVisible(gv_adminDialog, gv_admin, false);
        gv_adminDialogRefreshTime = 2.1;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AdminControlHide_Init () {
    gt_AdminControlHide = TriggerCreate("gt_AdminControlHide_Func");
    TriggerEnable(gt_AdminControlHide, false);
    TriggerAddEventKeyPressed(gt_AdminControlHide, c_playerAny, c_keyNumPad1, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(gt_AdminControlHide, c_playerAny, c_keyX, true, c_keyModifierStateIgnore, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Admin Panel Button
//--------------------------------------------------------------------------------------------------
bool gt_AdminPanelButton_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto48431348_ae = 15;
    int auto48431348_var;

    // Conditions
    if (testConds) {
        if (!((DialogControlGetDialog(EventDialogControl()) == gv_adminDialog))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto48431348_var = 1;
    for ( ; auto48431348_var <= auto48431348_ae; auto48431348_var += 1 ) {
        if ((gv_adminDialogUnitButton[auto48431348_var] == EventDialogControl())) {
            gf_GenerateAdmincontrols(EventPlayer(), auto48431348_var, (DialogControlGetOffsetX(EventDialogControl(), EventPlayer()) + DialogControlGetWidth(EventDialogControl(), EventPlayer())), (DialogControlGetOffsetY(EventDialogControl(), EventPlayer()) + DialogControlGetHeight(EventDialogControl(), EventPlayer())), DialogGetAnchor(DialogControlGetDialog(EventDialogControl())));
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AdminPanelButton_Init () {
    gt_AdminPanelButton = TriggerCreate("gt_AdminPanelButton_Func");
    TriggerAddEventDialogControl(gt_AdminPanelButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Admin Button
//--------------------------------------------------------------------------------------------------
bool gt_AdminButton_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoB5749DAF_g;
    int autoB5749DAF_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoB5749DAF_g = PlayerGroupActive();
    autoB5749DAF_var = -1;
    while (true) {
        autoB5749DAF_var = PlayerGroupNextPlayer(autoB5749DAF_g, autoB5749DAF_var);
        if (autoB5749DAF_var < 0) { break; }
        if ((PlayerType(autoB5749DAF_var) == c_playerTypeUser)) {
            if (gf_Owner(autoB5749DAF_var)) {
                UISetGameMenuItemVisible(PlayerGroupSingle(autoB5749DAF_var), c_gameMenuDialogGenericButton10, true);
                UISetGameMenuItemText(PlayerGroupAll(), c_gameMenuDialogGenericButton10, StringExternal("Param/Value/42143E99"));
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AdminButton_Init () {
    gt_AdminButton = TriggerCreate("gt_AdminButton_Func");
    TriggerAddEventMapInit(gt_AdminButton);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Admin Panel Main Button
//--------------------------------------------------------------------------------------------------
bool gt_AdminPanelMainButton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_admintext;
    fixed lv_notedrefreshtime;

    // Automatic Variable Declarations
    playergroup autoAE6B3B7A_g;
    int autoAE6B3B7A_var;
    int autoD311370F_ae;
    int autoD311370F_var;
    int autoBBB86FFE_ae;
    int autoBBB86FFE_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(gf_Owner(EventPlayer()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(gv_admin, EventPlayer());
    UISetFrameVisible(PlayerGroupSingle(EventPlayer()), c_syncFrameTypeAllianceButton, true);
    DialogSetVisible(gv_adminDialog, PlayerGroupSingle(EventPlayer()), true);
    if ((gv_adminDialogRefreshTime > 0.1)) {
        gv_adminDialogRefreshTime = (gv_adminDialogRefreshTime - 0.1);
    }
    else {
        UIDisplayMessage(gv_admin, c_messageAreaError, StringExternal("Param/Value/122396BD"));
        return true;
    }
    lv_notedrefreshtime = gv_adminDialogRefreshTime;
    UIDisplayMessage(gv_admin, c_messageAreaError, (StringExternal("Param/Value/28A7FE58") + FixedToText(gv_adminDialogRefreshTime, 2) + StringExternal("Param/Value/7EDB980C")));
    while ((DialogIsVisible(gv_adminDialog, EventPlayer()) == true) && (lv_notedrefreshtime == gv_adminDialogRefreshTime)) {
        autoAE6B3B7A_g = PlayerGroupActive();
        autoAE6B3B7A_var = -1;
        while (true) {
            autoAE6B3B7A_var = PlayerGroupNextPlayer(autoAE6B3B7A_g, autoAE6B3B7A_var);
            if (autoAE6B3B7A_var < 0) { break; }
            lv_admintext = StringToText("");
            lv_admintext = (StringExternal("Param/Value/A4CFC4C5") + IntToText(autoAE6B3B7A_var) + StringExternal("Param/Value/BE783881") + PlayerName(autoAE6B3B7A_var));
            lv_admintext = (StringExternal("Param/Value/AB79E292") + StringExternal("Param/Value/C2BFF35F") + StringToText(PlayerHandle(autoAE6B3B7A_var)));
            lv_admintext = (lv_admintext + StringExternal("Param/Value/5F0F9A39") + TextWithColor(gv_unitTagText[autoAE6B3B7A_var], libNtve_gf_ConvertPlayerColorToColor(gv_thePlayerColor[autoAE6B3B7A_var])));
            lv_admintext = (lv_admintext + StringExternal("Param/Value/C56C80AA"));
            if ((PlayerGroupHasPlayer(gv_left, autoAE6B3B7A_var) == true)) {
                libNtve_gf_SetDialogItemDesaturationColor(gv_adminDialogUnitButton[autoAE6B3B7A_var], Color(0,0,0), PlayerGroupAll());
                lv_admintext = (lv_admintext + StringExternal("Param/Value/A2730231"));
            }
            else {
                if ((PlayerGroupHasPlayer(gv_dead, autoAE6B3B7A_var) == true)) {
                    libNtve_gf_SetDialogItemDesaturationColor(gv_adminDialogUnitButton[autoAE6B3B7A_var], Color(100,100,100), PlayerGroupAll());
                    lv_admintext = (lv_admintext + StringExternal("Param/Value/C69800B4"));
                }
                else {
                    if ((PlayerGroupHasPlayer(gv_marines, autoAE6B3B7A_var) == true)) {
                        libNtve_gf_SetDialogItemDesaturationColor(gv_adminDialogUnitButton[autoAE6B3B7A_var], Color(0,66*100/255,100), PlayerGroupAll());
                        lv_admintext = (lv_admintext + StringExternal("Param/Value/6F2B05EE"));
                    }
                    else {
                        if ((PlayerGroupHasPlayer(gv_things, autoAE6B3B7A_var) == true)) {
                            libNtve_gf_SetDialogItemDesaturationColor(gv_adminDialogUnitButton[autoAE6B3B7A_var], Color(100.00, 0.00, 0.00), PlayerGroupAll());
                            lv_admintext = (lv_admintext + TextWithColor(StringExternal("Param/Value/0FECF086"), gv_unitPlayerColor[autoAE6B3B7A_var]));
                        }

                    }
                }
            }
            lv_admintext = (lv_admintext + StringExternal("Param/Value/B5CAB47A"));
            autoD311370F_ae = UserDataInstanceCount("MarinePerks");
            autoD311370F_var = 1;
            for ( ; autoD311370F_var <= autoD311370F_ae; autoD311370F_var += 1 ) {
                if ((TechTreeUpgradeCount(autoAE6B3B7A_var, UserDataGetUpgrade("MarinePerks", UserDataInstance("MarinePerks", autoD311370F_var), "Perk", 1), c_techCountQueuedOrBetter) > 0)) {
                    lv_admintext = (lv_admintext + StringExternal("Param/Value/596052AE") + StringToText(UserDataGetString("MarinePerks", UserDataInstance("MarinePerks", autoD311370F_var), "Perk name", 1)) + StringExternal("Param/Value/BAD41E9C"));
                }

            }
            lv_admintext = (lv_admintext + StringExternal("Param/Value/C575EDE2"));
            if ((PlayerGroupHasPlayer(gv_dead, autoAE6B3B7A_var) == false)) {
                lv_admintext = (lv_admintext + StringExternal("Param/Value/AF0B1088") + FixedToText(UnitGetPropertyFixed(gv_unit[autoAE6B3B7A_var], c_unitPropLife, c_unitPropCurrent), 0) + StringExternal("Param/Value/5B5B87CC") + FixedToText(UnitGetPropertyFixed(gv_unit[autoAE6B3B7A_var], c_unitPropLifeMax, c_unitPropCurrent), 0) + StringExternal("Param/Value/D503B2DC") + FixedToText(UnitGetPropertyFixed(gv_unit[autoAE6B3B7A_var], c_unitPropLifeRegen, c_unitPropCurrent), 2) + StringExternal("Param/Value/44F104D4") + FixedToText(UnitGetPropertyFixed(gv_unit[autoAE6B3B7A_var], c_unitPropLifePercent, c_unitPropCurrent), 0) + StringExternal("Param/Value/AB8FD35C"));
                lv_admintext = (lv_admintext + StringExternal("Param/Value/63A38B71") + FixedToText(UnitGetPropertyFixed(gv_unit[autoAE6B3B7A_var], c_unitPropEnergy, c_unitPropCurrent), 0) + StringExternal("Param/Value/4BA6CAFC") + FixedToText(UnitGetPropertyFixed(gv_unit[autoAE6B3B7A_var], c_unitPropEnergyMax, c_unitPropCurrent), 0) + StringExternal("Param/Value/AC3D1C5E") + FixedToText(UnitGetPropertyFixed(gv_unit[autoAE6B3B7A_var], c_unitPropEnergyRegen, c_unitPropCurrent), 2) + StringExternal("Param/Value/59D13BF7") + FixedToText(UnitGetPropertyFixed(gv_unit[autoAE6B3B7A_var], c_unitPropEnergyPercent, c_unitPropCurrent), 0) + StringExternal("Param/Value/70D7E759"));
                lv_admintext = (lv_admintext + StringExternal("Param/Value/D7DD7163") + IntToText(PlayerGetPropertyInt(autoAE6B3B7A_var, c_playerPropVespene)));
                if ((PlayerGroupHasPlayer(gv_things, autoAE6B3B7A_var) == true)) {
                    lv_admintext = (lv_admintext + StringExternal("Param/Value/DAB409DD") + IntToText(gv_control));
                }

                lv_admintext = (lv_admintext + StringExternal("Param/Value/099A0823"));
                if ((UnitInventoryCount(gv_unit[autoAE6B3B7A_var], c_unitInventoryCountCarried) == 0)) {
                    lv_admintext = (lv_admintext + StringExternal("Param/Value/AD8126D1"));
                }
                else {
                    autoBBB86FFE_ae = UnitInventoryCount(gv_unit[autoAE6B3B7A_var], c_unitInventoryCountCarried);
                    autoBBB86FFE_var = 1;
                    for ( ; autoBBB86FFE_var <= autoBBB86FFE_ae; autoBBB86FFE_var += 1 ) {
                        lv_admintext = (lv_admintext + StringExternal("Param/Value/4B643AA6") + UnitTypeGetName(UnitGetType(UnitInventoryItem(gv_unit[autoAE6B3B7A_var], autoBBB86FFE_var))));
                        if ((UnitGetType(UnitInventoryItem(gv_unit[autoAE6B3B7A_var], autoBBB86FFE_var)) == "Flamethrower")) {
                            lv_admintext = (lv_admintext + StringExternal("Param/Value/29FE2D24") + IntToText(gv_flamethrowerGas) + StringExternal("Param/Value/31368C74"));
                        }

                    }
                }
            }

            lv_admintext = (lv_admintext + StringExternal("Param/Value/4D10EB90"));
            if ((gv_consumedByThing[autoAE6B3B7A_var] == true) && (PlayerGroupHasPlayer(gv_things, autoAE6B3B7A_var) != true)) {
                lv_admintext = (lv_admintext + StringExternal("Param/Value/88AEA19A"));
            }

            lv_admintext = (lv_admintext + StringExternal("Param/Value/35C85373"));
            if ((PlayerGroupHasPlayer(gv_optedIn, autoAE6B3B7A_var) == true)) {
                lv_admintext = (lv_admintext + StringExternal("Param/Value/8E5A4DF9") + IntToText(gv_lGLastGameAsThing[autoAE6B3B7A_var]) + StringExternal("Param/Value/576E1A45"));
            }

            if ((PlayerGroupHasPlayer(gv_admin, autoAE6B3B7A_var) == true)) {
                lv_admintext = (lv_admintext + StringExternal("Param/Value/CC874D36"));
            }

            lv_admintext = (lv_admintext + StringExternal("Param/Value/A31B120D") + StringToText((gf_GetLightingfromIndex(gv_visualsSelection[autoAE6B3B7A_var]))));
            if ((PlayerGroupHasPlayer(gv_keyboardMovingPlayers, autoAE6B3B7A_var) == true)) {
                lv_admintext = (lv_admintext + StringExternal("Param/Value/EE35C75D"));
            }

            if ((gv_silentHillControlScheme[autoAE6B3B7A_var] == true)) {
                lv_admintext = (lv_admintext + StringExternal("Param/Value/8099D455"));
            }

            if ((gv_statsVerified[autoAE6B3B7A_var] == false)) {
                lv_admintext = (lv_admintext + StringExternal("Param/Value/B76B358D"));
            }

            if ((gv_enableSaving[autoAE6B3B7A_var] == false)) {
                lv_admintext = (lv_admintext + StringExternal("Param/Value/A78B7A01"));
            }

            lv_admintext = (lv_admintext + StringExternal("Param/Value/BE879354") + IntToText(gv_gPGamesPlayed[autoAE6B3B7A_var]));
            lv_admintext = (lv_admintext + StringExternal("Param/Value/BCB3D467") + IntToText(gv_gMGamesMinutes[autoAE6B3B7A_var]));
            lv_admintext = (lv_admintext + StringExternal("Param/Value/4EA05078") + IntToText(gv_mPMarinePoints[autoAE6B3B7A_var]));
            lv_admintext = (lv_admintext + StringExternal("Param/Value/D9F2DA3A") + IntToText(gv_tPThingPoints[autoAE6B3B7A_var]));
            lv_admintext = (lv_admintext + StringExternal("Param/Value/6AED187A") + IntToText(gv_vPVicPoints[autoAE6B3B7A_var]));
            lv_admintext = (lv_admintext + StringExternal("Param/Value/C2E4076A") + IntToText(gv_tRPThingRatingPoints[autoAE6B3B7A_var]));
            lv_admintext = (lv_admintext + StringExternal("Param/Value/962CC521") + IntToText(gv_tRIThingRatingInstances[autoAE6B3B7A_var]));
            if ((PlayerGroupHasPlayer(gv_things, autoAE6B3B7A_var) == true)) {
                lv_admintext = (lv_admintext + StringExternal("Param/Value/7EA4EA24") + IntToText(gv_xTRP));
                lv_admintext = (lv_admintext + StringExternal("Param/Value/BE82D9B8") + IntToText(gv_xTRI));
            }

            libNtve_gf_SetDialogItemTooltip(gv_adminDialogUnitButton[autoAE6B3B7A_var], lv_admintext, PlayerGroupAll());
        }
        Wait(lv_notedrefreshtime, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AdminPanelMainButton_Init () {
    gt_AdminPanelMainButton = TriggerCreate("gt_AdminPanelMainButton_Func");
    TriggerAddEventGameMenuItemSelected(gt_AdminPanelMainButton, c_playerAny, c_gameMenuDialogGenericButton10);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Model Buttons
//--------------------------------------------------------------------------------------------------
bool gt_ModelButtons_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_x;
    int lv_chosenone;

    // Automatic Variable Declarations
    int auto7B48CAE0_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((DialogControlGetDialog(EventDialogControl()) == DataTableGetDialog(true, ("AdminSubButton" + IntToString(EventPlayer())))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_chosenone = FixedToInt(libNtve_gf_DialogItemValue(libNtve_gf_ValueFromDataTableDialogItem(true, ("SelectedSubButton" + IntToString(EventPlayer()))), EventPlayer()));
    auto7B48CAE0_val = EventDialogControl();
    if (auto7B48CAE0_val == libNtve_gf_ValueFromDataTableDialogItem(true, ("Swap" + IntToString(EventPlayer())))) {
        gf_GenerateListSubPanel(EventPlayer(), lv_chosenone, (DialogGetOffsetX(DialogControlGetDialog(EventDialogControl())) + (DialogGetWidth(DialogControlGetDialog(EventDialogControl())) + 5)), (DialogGetOffsetY(DialogControlGetDialog(EventDialogControl())) + 20), DialogGetAnchor(DialogControlGetDialog(EventDialogControl())), "Models");
        gf_ModelList(EventPlayer());
    }
    else if (auto7B48CAE0_val == libNtve_gf_ValueFromDataTableDialogItem(true, ("Set Height" + IntToString(EventPlayer())))) {
        gf_GenerateListSubPanel(EventPlayer(), lv_chosenone, (DialogGetOffsetX(DialogControlGetDialog(EventDialogControl())) + (DialogGetWidth(DialogControlGetDialog(EventDialogControl())) + 5)), (DialogGetOffsetY(DialogControlGetDialog(EventDialogControl())) + 20), DialogGetAnchor(DialogControlGetDialog(EventDialogControl())), "Height");
        gf_Heightlist(EventPlayer());
    }
    else if (auto7B48CAE0_val == libNtve_gf_ValueFromDataTableDialogItem(true, ("Set Scale" + IntToString(EventPlayer())))) {
        gf_GenerateListSubPanel(EventPlayer(), lv_chosenone, (DialogGetOffsetX(DialogControlGetDialog(EventDialogControl())) + (DialogGetWidth(DialogControlGetDialog(EventDialogControl())) + 5)), (DialogGetOffsetY(DialogControlGetDialog(EventDialogControl())) + 20), DialogGetAnchor(DialogControlGetDialog(EventDialogControl())), "Scale");
        gf_Scalelist(EventPlayer());
    }
    else if (auto7B48CAE0_val == libNtve_gf_ValueFromDataTableDialogItem(true, ("VicPoints" + IntToString(EventPlayer())))) {
        gf_GenerateButtonSubPanel(EventPlayer(), lv_chosenone, (DialogGetOffsetX(DialogControlGetDialog(EventDialogControl())) + (DialogGetWidth(DialogControlGetDialog(EventDialogControl())) + 5)), (DialogGetOffsetY(DialogControlGetDialog(EventDialogControl())) + 20), DialogGetAnchor(DialogControlGetDialog(EventDialogControl())), "Modify", "V+1", true, "V-1", true, "V+25", true, "V-25", true, "V+1000", true, "V-1000", true, "", false);
    }
    else if (auto7B48CAE0_val == libNtve_gf_ValueFromDataTableDialogItem(true, ("OverduePoints" + IntToString(EventPlayer())))) {
        gf_GenerateButtonSubPanel(EventPlayer(), lv_chosenone, (DialogGetOffsetX(DialogControlGetDialog(EventDialogControl())) + (DialogGetWidth(DialogControlGetDialog(EventDialogControl())) + 5)), (DialogGetOffsetY(DialogControlGetDialog(EventDialogControl())) + 20), DialogGetAnchor(DialogControlGetDialog(EventDialogControl())), "Modify", "O+1", true, "O-1", true, "O+25", true, "O-25", true, "O+1000", true, "O-1000", true, "", false);
    }
    else if (auto7B48CAE0_val == libNtve_gf_ValueFromDataTableDialogItem(true, ("MarinePoints" + IntToString(EventPlayer())))) {
        gf_GenerateButtonSubPanel(EventPlayer(), lv_chosenone, (DialogGetOffsetX(DialogControlGetDialog(EventDialogControl())) + (DialogGetWidth(DialogControlGetDialog(EventDialogControl())) + 5)), (DialogGetOffsetY(DialogControlGetDialog(EventDialogControl())) + 20), DialogGetAnchor(DialogControlGetDialog(EventDialogControl())), "Modify", "M+1", true, "M-1", true, "M+25", true, "M-25", true, "M+1000", true, "M-1000", true, "", false);
    }
    else if (auto7B48CAE0_val == libNtve_gf_ValueFromDataTableDialogItem(true, ("ThingPoints" + IntToString(EventPlayer())))) {
        gf_GenerateButtonSubPanel(EventPlayer(), lv_chosenone, (DialogGetOffsetX(DialogControlGetDialog(EventDialogControl())) + (DialogGetWidth(DialogControlGetDialog(EventDialogControl())) + 5)), (DialogGetOffsetY(DialogControlGetDialog(EventDialogControl())) + 20), DialogGetAnchor(DialogControlGetDialog(EventDialogControl())), "Modify", "T+1", true, "T-1", true, "T+25", true, "T-25", true, "T+1000", true, "T-1000", true, "", false);
    }
    else if (auto7B48CAE0_val == libNtve_gf_ValueFromDataTableDialogItem(true, ("GamesPlayed" + IntToString(EventPlayer())))) {
        gf_GenerateButtonSubPanel(EventPlayer(), lv_chosenone, (DialogGetOffsetX(DialogControlGetDialog(EventDialogControl())) + (DialogGetWidth(DialogControlGetDialog(EventDialogControl())) + 5)), (DialogGetOffsetY(DialogControlGetDialog(EventDialogControl())) + 20), DialogGetAnchor(DialogControlGetDialog(EventDialogControl())), "Modify", "GP+1", true, "GP-1", true, "GP+25", true, "GP-25", true, "GP+1000", true, "GP-1000", true, "", false);
    }
    else if (auto7B48CAE0_val == libNtve_gf_ValueFromDataTableDialogItem(true, ("V" + "+" + IntToString(1)))) {
        gv_vPVicPoints[lv_chosenone] += 1;
    }
    else if (auto7B48CAE0_val == libNtve_gf_ValueFromDataTableDialogItem(true, (("V" + "-" + IntToString(1)) + IntToString(EventPlayer())))) {
        gv_vPVicPoints[lv_chosenone] -= 1;
    }
    else if (auto7B48CAE0_val == libNtve_gf_ValueFromDataTableDialogItem(true, (("V" + "-" + IntToString(25)) + IntToString(EventPlayer())))) {
        gv_vPVicPoints[lv_chosenone] -= 25;
    }
    else if (auto7B48CAE0_val == libNtve_gf_ValueFromDataTableDialogItem(true, (("V" + "+" + IntToString(25)) + IntToString(EventPlayer())))) {
        gv_vPVicPoints[lv_chosenone] += 25;
    }
    else if (auto7B48CAE0_val == libNtve_gf_ValueFromDataTableDialogItem(true, (("V" + "+" + IntToString(1000)) + IntToString(EventPlayer())))) {
        gv_vPVicPoints[lv_chosenone] += 1000;
    }
    else if (auto7B48CAE0_val == libNtve_gf_ValueFromDataTableDialogItem(true, (("V" + "-" + IntToString(1000)) + IntToString(EventPlayer())))) {
        gv_vPVicPoints[lv_chosenone] -= 1000;
    }
    else if (auto7B48CAE0_val == libNtve_gf_ValueFromDataTableDialogItem(true, (("O" + "-" + IntToString(1000)) + IntToString(EventPlayer())))) {
        gv_lGLastGameAsThing[lv_chosenone] -= 1000;
    }
    else if (auto7B48CAE0_val == libNtve_gf_ValueFromDataTableDialogItem(true, (("O" + "+" + IntToString(1000)) + IntToString(EventPlayer())))) {
        gv_lGLastGameAsThing[lv_chosenone] += 1000;
    }
    else if (auto7B48CAE0_val == libNtve_gf_ValueFromDataTableDialogItem(true, (("O" + "+" + IntToString(25)) + IntToString(EventPlayer())))) {
        gv_lGLastGameAsThing[lv_chosenone] += 25;
    }
    else if (auto7B48CAE0_val == libNtve_gf_ValueFromDataTableDialogItem(true, (("O" + "-" + IntToString(25)) + IntToString(EventPlayer())))) {
        gv_lGLastGameAsThing[lv_chosenone] -= 25;
    }
    else if (auto7B48CAE0_val == libNtve_gf_ValueFromDataTableDialogItem(true, (("O" + "-" + IntToString(1)) + IntToString(EventPlayer())))) {
        gv_lGLastGameAsThing[lv_chosenone] -= 1;
    }
    else if (auto7B48CAE0_val == libNtve_gf_ValueFromDataTableDialogItem(true, (("O" + "+" + IntToString(1)) + IntToString(EventPlayer())))) {
        gv_lGLastGameAsThing[lv_chosenone] += 1;
    }
    else if (auto7B48CAE0_val == libNtve_gf_ValueFromDataTableDialogItem(true, (("M" + "+" + IntToString(1)) + IntToString(EventPlayer())))) {
        gv_mPMarinePoints[lv_chosenone] += 1;
    }
    else if (auto7B48CAE0_val == libNtve_gf_ValueFromDataTableDialogItem(true, (("M" + "-" + IntToString(1)) + IntToString(EventPlayer())))) {
        gv_mPMarinePoints[lv_chosenone] -= 1;
    }
    else if (auto7B48CAE0_val == libNtve_gf_ValueFromDataTableDialogItem(true, (("M" + "-" + IntToString(25)) + IntToString(EventPlayer())))) {
        gv_mPMarinePoints[lv_chosenone] -= 25;
    }
    else if (auto7B48CAE0_val == libNtve_gf_ValueFromDataTableDialogItem(true, (("M" + "+" + IntToString(25)) + IntToString(EventPlayer())))) {
        gv_mPMarinePoints[lv_chosenone] += 25;
    }
    else if (auto7B48CAE0_val == libNtve_gf_ValueFromDataTableDialogItem(true, (("M" + "+" + IntToString(1000)) + IntToString(EventPlayer())))) {
        gv_mPMarinePoints[lv_chosenone] += 1000;
    }
    else if (auto7B48CAE0_val == libNtve_gf_ValueFromDataTableDialogItem(true, (("M" + "-" + IntToString(1000)) + IntToString(EventPlayer())))) {
        gv_mPMarinePoints[lv_chosenone] -= 1000;
    }
    else if (auto7B48CAE0_val == libNtve_gf_ValueFromDataTableDialogItem(true, (("T" + "-" + IntToString(1000)) + IntToString(EventPlayer())))) {
        gv_tPThingPoints[lv_chosenone] -= 1000;
    }
    else if (auto7B48CAE0_val == libNtve_gf_ValueFromDataTableDialogItem(true, (("T" + "+" + IntToString(1000)) + IntToString(EventPlayer())))) {
        gv_tPThingPoints[lv_chosenone] += 1000;
    }
    else if (auto7B48CAE0_val == libNtve_gf_ValueFromDataTableDialogItem(true, (("T" + "+" + IntToString(25)) + IntToString(EventPlayer())))) {
        gv_tPThingPoints[lv_chosenone] += 25;
    }
    else if (auto7B48CAE0_val == libNtve_gf_ValueFromDataTableDialogItem(true, (("T" + "-" + IntToString(25)) + IntToString(EventPlayer())))) {
        gv_tPThingPoints[lv_chosenone] -= 25;
    }
    else if (auto7B48CAE0_val == libNtve_gf_ValueFromDataTableDialogItem(true, (("T" + "-" + IntToString(1)) + IntToString(EventPlayer())))) {
        gv_tPThingPoints[lv_chosenone] -= 1;
    }
    else if (auto7B48CAE0_val == libNtve_gf_ValueFromDataTableDialogItem(true, (("T" + "+" + IntToString(1)) + IntToString(EventPlayer())))) {
        gv_tPThingPoints[lv_chosenone] += 1;
    }
    else if (auto7B48CAE0_val == libNtve_gf_ValueFromDataTableDialogItem(true, (("GP" + "+" + IntToString(1)) + IntToString(EventPlayer())))) {
        gv_gPGamesPlayed[lv_chosenone] += 1;
    }
    else if (auto7B48CAE0_val == libNtve_gf_ValueFromDataTableDialogItem(true, (("GP" + "-" + IntToString(1)) + IntToString(EventPlayer())))) {
        gv_gPGamesPlayed[lv_chosenone] -= 1;
    }
    else if (auto7B48CAE0_val == libNtve_gf_ValueFromDataTableDialogItem(true, (("GP" + "+" + IntToString(25)) + IntToString(EventPlayer())))) {
        gv_gPGamesPlayed[lv_chosenone] += 25;
    }
    else if (auto7B48CAE0_val == libNtve_gf_ValueFromDataTableDialogItem(true, (("GP" + "-" + IntToString(25)) + IntToString(EventPlayer())))) {
        gv_gPGamesPlayed[lv_chosenone] -= 25;
    }
    else if (auto7B48CAE0_val == libNtve_gf_ValueFromDataTableDialogItem(true, (("GP" + "+" + IntToString(1000)) + IntToString(EventPlayer())))) {
        gv_gPGamesPlayed[lv_chosenone] += 1000;
    }
    else if (auto7B48CAE0_val == libNtve_gf_ValueFromDataTableDialogItem(true, (("GP" + "-" + IntToString(1000)) + IntToString(EventPlayer())))) {
        gv_gPGamesPlayed[lv_chosenone] -= 1000;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ModelButtons_Init () {
    gt_ModelButtons = TriggerCreate("gt_ModelButtons_Func");
    TriggerAddEventDialogControl(gt_ModelButtons, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Model list selection
//--------------------------------------------------------------------------------------------------
bool gt_Modellistselection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_chosenone;
    fixed lv_selectedListitemreal;
    int lv_selectedListitemint;

    // Automatic Variable Declarations
    int auto5ED66259_val;

    // Variable Initialization
    lv_selectedListitemreal = IntToFixed(DialogControlGetSelectedItem(EventDialogControl(), EventPlayer()));
    lv_selectedListitemint = DialogControlGetSelectedItem(EventDialogControl(), EventPlayer());

    // Conditions
    if (testConds) {
        if (!((DialogControlGetDialog(EventDialogControl()) == DataTableGetDialog(true, ("AdminSubList" + IntToString(EventPlayer())))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_chosenone = FixedToInt(libNtve_gf_DialogItemValue(libNtve_gf_ValueFromDataTableDialogItem(true, ("SelectedSubList" + IntToString(EventPlayer()))), EventPlayer()));
    if ((UnitIsAlive(gv_unit[lv_chosenone]) == true)) {
        auto5ED66259_val = EventDialogControl();
        if (auto5ED66259_val == libNtve_gf_ValueFromDataTableDialogItem(true, ("Height" + IntToString(EventPlayer())))) {
            UnitSetHeight(gv_unit[lv_chosenone], ((lv_selectedListitemreal - 1.0) * 0.1), 1.0);
        }
        else if (auto5ED66259_val == libNtve_gf_ValueFromDataTableDialogItem(true, ("Scale" + IntToString(EventPlayer())))) {
            libNtve_gf_SendActorMessageToUnit(gv_unit[lv_chosenone], libNtve_gf_SetScale(((lv_selectedListitemreal - 1.0) * 0.1), ((lv_selectedListitemreal - 1.0) * 0.1), ((lv_selectedListitemreal - 1.0) * 0.1), 0.0));
        }
        else if (auto5ED66259_val == libNtve_gf_ValueFromDataTableDialogItem(true, ("Models" + IntToString(EventPlayer())))) {
            libNtve_gf_SendActorMessageToUnit(gv_unit[lv_chosenone], libNtve_gf_ModelSwap(UserDataGetModel("Models", UserDataInstance("Models", lv_selectedListitemint), "Model", 1), 0));
            gv_playermodel[lv_chosenone] = UserDataGetModel("Models", UserDataInstance("Models", lv_selectedListitemint), "Model", 1);
        }
        else if (auto5ED66259_val == libNtve_gf_ValueFromDataTableDialogItem(true, ("Oxygen" + IntToString(EventPlayer())))) {
            PlayerModifyPropertyInt(lv_chosenone, c_playerPropVespene, c_playerPropOperSetTo, FixedToInt((IntToFixed(400) * ((lv_selectedListitemreal - 1.0) * 0.1))));
        }
        else {
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Modellistselection_Init () {
    gt_Modellistselection = TriggerCreate("gt_Modellistselection_Func");
    TriggerAddEventDialogControl(gt_Modellistselection, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show/Hide Debug Dialog
//--------------------------------------------------------------------------------------------------
bool gt_ShowHideDebugDialog_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(gv_debugdialog, EventPlayer()) == true)) {
        DialogSetVisible(gv_debugdialog, PlayerGroupSingle(EventPlayer()), false);
        TriggerDebugSetTypeFile(1, ("id" + IntToString(RandomInt(0, 100000)) + "-debug.txt"));
        TriggerDebugOutput(1, gv_package, false);
    }
    else {
        DialogSetVisible(gv_debugdialog, PlayerGroupSingle(EventPlayer()), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowHideDebugDialog_Init () {
    gt_ShowHideDebugDialog = TriggerCreate("gt_ShowHideDebugDialog_Func");
    TriggerAddEventKeyPressed(gt_ShowHideDebugDialog, c_playerAny, c_keyD, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select Debug Dialog
//--------------------------------------------------------------------------------------------------
bool gt_SelectDebugDialog_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_debugwindow))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemEditorValue(gv_debugoutput, gv_debugstring[DialogControlGetSelectedItem(EventDialogControl(), EventPlayer())], PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectDebugDialog_Init () {
    gt_SelectDebugDialog = TriggerCreate("gt_SelectDebugDialog_Func");
    TriggerAddEventDialogControl(gt_SelectDebugDialog, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Resize Debug Dialog
//--------------------------------------------------------------------------------------------------
bool gt_ResizeDebugDialog_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_debugsizemodifier[0]) || (EventDialogControl() == gv_debugsizemodifier[1])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_debugsizemodifier[0])) {
        gv_debugsize = libNtve_gf_ArithmeticIntClamp((gv_debugsize + 1), 0, 20);
        DialogControlSetSize(gv_debugwindow, PlayerGroupAll(), 500, (gv_debugsize * 50));
        DialogControlSetPositionRelative(gv_debugwindow, PlayerGroupAll(), c_anchorTop, gv_debugpane, c_anchorBottom, 0, 0);
        DialogControlSetPositionRelative(gv_debugoutput, PlayerGroupAll(), c_anchorTop, gv_debugpane, c_anchorBottom, 0, (gv_debugsize * 50));
    }

    if ((EventDialogControl() == gv_debugsizemodifier[1])) {
        gv_debugsize = libNtve_gf_ArithmeticIntClamp((gv_debugsize - 1), 0, 20);
        DialogControlSetSize(gv_debugwindow, PlayerGroupAll(), 500, (gv_debugsize * 50));
        DialogControlSetPositionRelative(gv_debugwindow, PlayerGroupAll(), c_anchorTop, gv_debugpane, c_anchorBottom, 0, 0);
        DialogControlSetPositionRelative(gv_debugoutput, PlayerGroupAll(), c_anchorTop, gv_debugpane, c_anchorBottom, 0, (gv_debugsize * 50));
    }

    if ((gv_debugsize >= 20)) {
        gf_EnableDisableButton(gv_debugsizemodifier[0], false, PlayerGroupAll());
    }
    else {
        gf_EnableDisableButton(gv_debugsizemodifier[0], true, PlayerGroupAll());
    }
    if ((gv_debugsize <= 0)) {
        gf_EnableDisableButton(gv_debugsizemodifier[1], false, PlayerGroupAll());
        DialogControlSetVisible(gv_debugoutput, PlayerGroupAll(), false);
        DialogControlSetVisible(gv_debugwindow, PlayerGroupAll(), false);
    }
    else {
        gf_EnableDisableButton(gv_debugsizemodifier[1], true, PlayerGroupAll());
        DialogControlSetVisible(gv_debugoutput, PlayerGroupAll(), true);
        DialogControlSetVisible(gv_debugwindow, PlayerGroupAll(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResizeDebugDialog_Init () {
    gt_ResizeDebugDialog = TriggerCreate("gt_ResizeDebugDialog_Func");
    TriggerAddEventDialogControl(gt_ResizeDebugDialog, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Move Debug Dialog
//--------------------------------------------------------------------------------------------------
bool gt_MoveDebugDialog_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_debugpane))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_EnableDisableButton(gv_debugpane, false, PlayerGroupAll());
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_MoveDebugDialogDrop, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoveDebugDialog_Init () {
    gt_MoveDebugDialog = TriggerCreate("gt_MoveDebugDialog_Func");
    TriggerAddEventDialogControl(gt_MoveDebugDialog, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Move Debug Dialog Drop
//--------------------------------------------------------------------------------------------------
bool gt_MoveDebugDialogDrop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((DialogIsVisible(gv_debugdialog, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetPosition(gv_debugpane, PlayerGroupAll(), c_anchorTopLeft, EventMouseClickedPosXUI(), EventMouseClickedPosYUI());
    gf_EnableDisableButton(gv_debugpane, true, PlayerGroupAll());
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_MoveDebugDialog, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoveDebugDialogDrop_Init () {
    gt_MoveDebugDialogDrop = TriggerCreate("gt_MoveDebugDialogDrop_Func");
    TriggerEnable(gt_MoveDebugDialogDrop, false);
    TriggerAddEventMouseClicked(gt_MoveDebugDialogDrop, c_playerAny, c_mouseButtonNone, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GrantRandom Thing Abilities
//--------------------------------------------------------------------------------------------------
bool gt_GrantRandomThingAbilities_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_x;
    bool[11] lv_picked;
    string[11] lv_thingupgrades;

    // Automatic Variable Declarations
    const int auto0A1DFF8C_n = 5;
    int auto0A1DFF8C_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_things, EventPlayer()) == true))) {
            return false;
        }

        if (!(gf_Developers(EventPlayer()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_thingupgrades[1] = "AcidBomb";
    lv_thingupgrades[2] = "ERBurRevealer";
    lv_thingupgrades[3] = "BurrowCharge";
    lv_thingupgrades[4] = "ERDoorExplode";
    lv_thingupgrades[5] = "ERFlamophobic";
    lv_thingupgrades[6] = "Muck";
    lv_thingupgrades[7] = "ParaExp";
    lv_thingupgrades[8] = "Slot1EnableCharge";
    lv_thingupgrades[9] = "Throw";
    lv_thingupgrades[10] = "ERPounce";
    for (auto0A1DFF8C_i = 1; auto0A1DFF8C_i <= auto0A1DFF8C_n; auto0A1DFF8C_i += 1) {
        lv_x = RandomInt(1, 10);
        while ((lv_picked[lv_x] == true)) {
            lv_x = RandomInt(1, 10);
            Wait(0.0, c_timeGame);
        }
        libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupPlayer(gv_things, 1), lv_thingupgrades[lv_x], 1);
        lv_picked[lv_x] = true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GrantRandomThingAbilities_Init () {
    gt_GrantRandomThingAbilities = TriggerCreate("gt_GrantRandomThingAbilities_Func");
    TriggerAddEventChatMessage(gt_GrantRandomThingAbilities, c_playerAny, "Random", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GrantAllThingAbils
//--------------------------------------------------------------------------------------------------
bool gt_GrantAllThingAbils_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_things, EventPlayer()) == true))) {
            return false;
        }

        if (!(gf_Developers(EventPlayer()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupPlayer(gv_things, 1), "Slot1EnableCharge", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupPlayer(gv_things, 1), "BurrowCharge", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupPlayer(gv_things, 1), "Throw", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupPlayer(gv_things, 1), "ParaExp", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupPlayer(gv_things, 1), "AcidBomb", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupPlayer(gv_things, 1), "Muck", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupPlayer(gv_things, 1), "ERBurRevealer", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupPlayer(gv_things, 1), "ERPounce", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupPlayer(gv_things, 1), "ERFlamophobic", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupPlayer(gv_things, 1), "ERDoorExplode", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GrantAllThingAbils_Init () {
    gt_GrantAllThingAbils = TriggerCreate("gt_GrantAllThingAbils_Func");
    TriggerAddEventChatMessage(gt_GrantAllThingAbils, c_playerAny, "Thing", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Corpse
//--------------------------------------------------------------------------------------------------
bool gt_SpawnCorpse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(gf_Developers(EventPlayer()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "Corpse", 0, 0, UnitGetPosition(gv_unit[EventPlayer()]), 270.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnCorpse_Init () {
    gt_SpawnCorpse = TriggerCreate("gt_SpawnCorpse_Func");
    TriggerAddEventChatMessage(gt_SpawnCorpse, c_playerAny, "corpse", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Battlecruiser
//--------------------------------------------------------------------------------------------------
bool gt_SpawnBattlecruiser_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto7F076045_g;
    int auto7F076045_u;
    unit auto7F076045_var;

    // Conditions
    if (testConds) {
        if (!((GameIsTestMap(false) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, true);
    auto7F076045_g = UnitGroupSelected(1);
    auto7F076045_u = UnitGroupCount(auto7F076045_g, c_unitCountAll);
    for (;; auto7F076045_u -= 1) {
        auto7F076045_var = UnitGroupUnitFromEnd(auto7F076045_g, auto7F076045_u);
        if (auto7F076045_var == null) { break; }
        UnitCreate(1, "Battlecruiser", 0, 1, UnitGetPosition(auto7F076045_var), 270.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnBattlecruiser_Init () {
    gt_SpawnBattlecruiser = TriggerCreate("gt_SpawnBattlecruiser_Func");
    TriggerAddEventChatMessage(gt_SpawnBattlecruiser, c_playerAny, "1", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Flamethrower
//--------------------------------------------------------------------------------------------------
bool gt_SpawnFlamethrower_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto5D10A371_g;
    int auto5D10A371_u;
    unit auto5D10A371_var;

    // Conditions
    if (testConds) {
        if (!((GameIsTestMap(false) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeConsolePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeHeroPanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeInfoPanel, true);
    auto5D10A371_g = UnitGroupSelected(1);
    auto5D10A371_u = UnitGroupCount(auto5D10A371_g, c_unitCountAll);
    for (;; auto5D10A371_u -= 1) {
        auto5D10A371_var = UnitGroupUnitFromEnd(auto5D10A371_g, auto5D10A371_u);
        if (auto5D10A371_var == null) { break; }
        UnitCreate(1, "Flamethrower", 0, 0, UnitGetPosition(auto5D10A371_var), 270.0);
        gv_flamethrower = UnitLastCreated();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnFlamethrower_Init () {
    gt_SpawnFlamethrower = TriggerCreate("gt_SpawnFlamethrower_Func");
    TriggerAddEventChatMessage(gt_SpawnFlamethrower, c_playerAny, "2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn The Thing
//--------------------------------------------------------------------------------------------------
bool gt_SpawnTheThing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD2C7E6C3_g;
    int autoD2C7E6C3_u;
    unit autoD2C7E6C3_var;

    // Conditions
    if (testConds) {
        if (!((GameIsTestMap(false) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoD2C7E6C3_g = UnitGroupSelected(1);
    autoD2C7E6C3_u = UnitGroupCount(autoD2C7E6C3_g, c_unitCountAll);
    for (;; autoD2C7E6C3_u -= 1) {
        autoD2C7E6C3_var = UnitGroupUnitFromEnd(autoD2C7E6C3_g, autoD2C7E6C3_u);
        if (autoD2C7E6C3_var == null) { break; }
        UnitCreate(1, "InfestedAbomination", 0, 15, UnitGetPosition(autoD2C7E6C3_var), 270.0);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 0.75);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnTheThing_Init () {
    gt_SpawnTheThing = TriggerCreate("gt_SpawnTheThing_Func");
    TriggerAddEventChatMessage(gt_SpawnTheThing, c_playerAny, "3", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Riot Shield
//--------------------------------------------------------------------------------------------------
bool gt_SpawnRiotShield_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto43A5AB33_g;
    int auto43A5AB33_u;
    unit auto43A5AB33_var;

    // Conditions
    if (testConds) {
        if (!((GameIsTestMap(false) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeConsolePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeHeroPanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeInfoPanel, true);
    auto43A5AB33_g = UnitGroupSelected(1);
    auto43A5AB33_u = UnitGroupCount(auto43A5AB33_g, c_unitCountAll);
    for (;; auto43A5AB33_u -= 1) {
        auto43A5AB33_var = UnitGroupUnitFromEnd(auto43A5AB33_g, auto43A5AB33_u);
        if (auto43A5AB33_var == null) { break; }
        UnitCreate(1, "RiotShield", 0, 0, UnitGetPosition(auto43A5AB33_var), 270.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnRiotShield_Init () {
    gt_SpawnRiotShield = TriggerCreate("gt_SpawnRiotShield_Func");
    TriggerAddEventChatMessage(gt_SpawnRiotShield, c_playerAny, "4", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SpawnDummyTargets
//--------------------------------------------------------------------------------------------------
bool gt_SpawnDummyTargets_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomplayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_randomplayer = RandomInt(2, 14);

    // Conditions
    if (testConds) {
        if (!((GameIsTestMap(false) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "Marine3", 0, lv_randomplayer, UnitGetPosition(gv_unit[EventPlayer()]), 270.0);
    libNtve_gf_SetAllianceOneWay(lv_randomplayer, 1, libNtve_ge_AllianceSetting_Ally);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnDummyTargets_Init () {
    gt_SpawnDummyTargets = TriggerCreate("gt_SpawnDummyTargets_Func");
    TriggerAddEventChatMessage(gt_SpawnDummyTargets, c_playerAny, "5", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show Chat
//--------------------------------------------------------------------------------------------------
bool gt_ShowChat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameIsTestMap(false) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_deadDialog, PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_deadChatItem, PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_deadChatOnlineItem, PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_deadAliveChatItem, PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_deadAliveChatOnlineItem, PlayerGroupSingle(EventPlayer()), false);
    Wait(15.0, c_timeReal);
    DialogSetVisible(gv_deadDialog, PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_deadChatItem, PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_deadChatOnlineItem, PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowChat_Init () {
    gt_ShowChat = TriggerCreate("gt_ShowChat_Func");
    TriggerAddEventChatMessage(gt_ShowChat, c_playerAny, "6", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Grenade
//--------------------------------------------------------------------------------------------------
bool gt_SpawnGrenade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto4DA42B70_g;
    int auto4DA42B70_u;
    unit auto4DA42B70_var;

    // Conditions
    if (testConds) {
        if (!((GameIsTestMap(false) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeConsolePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeHeroPanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeInfoPanel, true);
    auto4DA42B70_g = UnitGroupSelected(1);
    auto4DA42B70_u = UnitGroupCount(auto4DA42B70_g, c_unitCountAll);
    for (;; auto4DA42B70_u -= 1) {
        auto4DA42B70_var = UnitGroupUnitFromEnd(auto4DA42B70_g, auto4DA42B70_u);
        if (auto4DA42B70_var == null) { break; }
        UnitCreate(1, "Grenade", 0, 0, UnitGetPosition(auto4DA42B70_var), 270.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnGrenade_Init () {
    gt_SpawnGrenade = TriggerCreate("gt_SpawnGrenade_Func");
    TriggerAddEventChatMessage(gt_SpawnGrenade, c_playerAny, "7", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TEST 8
//--------------------------------------------------------------------------------------------------
bool gt_TEST8_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoF951E87F_g;
    int autoF951E87F_u;
    unit autoF951E87F_var;

    // Conditions
    if (testConds) {
        if (!((GameIsTestMap(false) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoF951E87F_g = UnitGroupSelected(1);
    autoF951E87F_u = UnitGroupCount(autoF951E87F_g, c_unitCountAll);
    for (;; autoF951E87F_u -= 1) {
        autoF951E87F_var = UnitGroupUnitFromEnd(autoF951E87F_g, autoF951E87F_u);
        if (autoF951E87F_var == null) { break; }
        CameraFollowUnitGroup(1, libNtve_gf_ConvertUnitToUnitGroup(gv_unit[1]), false, false);
        CameraLockInput(1, false);
    }
    DialogSetVisible(gv_spectatorViewEvacDialog, PlayerGroupAll(), true);
    DialogSetVisible(gv_spectatorDialog, PlayerGroupSingle(EventPlayer()), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TEST8_Init () {
    gt_TEST8 = TriggerCreate("gt_TEST8_Func");
    TriggerAddEventChatMessage(gt_TEST8, c_playerAny, "8", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Damage
//--------------------------------------------------------------------------------------------------
bool gt_Damage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameIsTestMap(false) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitDamage(gv_unit[EventPlayer()], "AcidicBurn", gv_unit[EventPlayer()], 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Damage_Init () {
    gt_Damage = TriggerCreate("gt_Damage_Func");
    TriggerAddEventChatMessage(gt_Damage, c_playerAny, "damage", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: No teamkilling removed
//--------------------------------------------------------------------------------------------------
bool gt_Noteamkillingremoved_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameIsTestMap(false) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/DFE0C078") + (IntToText(UnitGetOwner(EventUnit())) + StringExternal("Param/Value/C040B674"))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Noteamkillingremoved_Init () {
    gt_Noteamkillingremoved = TriggerCreate("gt_Noteamkillingremoved_Func");
    TriggerAddEventUnitBehaviorChange(gt_Noteamkillingremoved, null, "UnknownBehavior", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SimulateFlamethrower
//--------------------------------------------------------------------------------------------------
bool gt_SimulateFlamethrower_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameIsTestMap(false) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(gv_unit[EventPlayer()], "ERFlamesetting", gv_unit[EventPlayer()]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SimulateFlamethrower_Init () {
    gt_SimulateFlamethrower = TriggerCreate("gt_SimulateFlamethrower_Func");
    TriggerAddEventChatMessage(gt_SimulateFlamethrower, c_playerAny, "Fire", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: spooky
//--------------------------------------------------------------------------------------------------
bool gt_spooky_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_randpoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_randpoint = Point(EventMouseClickedPosXWorld(), EventMouseClickedPosYWorld());

    // Conditions
    if (testConds) {
        if (!(gf_Developers(EventPlayer()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_spooky, false);
    SoundPlayAtPoint(SoundLink("Aberration_Unburrow", -1), PlayerGroupActive(), lv_randpoint, 0.0, 100.0, 0.0);
    libNtve_gf_CreateModelAtPoint("InfestedAbomination", lv_randpoint);
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetFacing(libNtve_gf_RandomAngle()));
    libNtve_gf_PlayAnimation(libNtve_gf_ActorLastCreated(), c_animNameDefault, "Unburrow", 0, c_animTimeDefault);
    Wait(0.2, c_timeGame);
    ActorSend(libNtve_gf_ActorLastCreated(), "Destroy Immediate");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_spooky_Init () {
    gt_spooky = TriggerCreate("gt_spooky_Func");
    TriggerEnable(gt_spooky, false);
    TriggerAddEventMouseClicked(gt_spooky, c_playerAny, c_mouseButtonLeft, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: spooky activator
//--------------------------------------------------------------------------------------------------
bool gt_spookyactivator_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(gf_Developers(EventPlayer()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_spooky, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_spookyactivator_Init () {
    gt_spookyactivator = TriggerCreate("gt_spookyactivator_Func");
    TriggerAddEventChatMessage(gt_spookyactivator, c_playerAny, "spooky", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_thirdperson_Init();
    gt_HelpMenu_Init();
    gt_GenerateVBIUpdaterWindow_Init();
    gt_MarineDIESSave_Init();
    gt_ThingDIESSave_Init();
    gt_GamesPlayed_Init();
    gt_GameMinutes_Init();
    gt_ThingPoints_Init();
    gt_KillStreakTimer_Init();
    gt_MarinePoints_Init();
    gt_Initial_Init();
    gt_InitialCreation_Init();
    gt_InitialIntro_Init();
    gt_PickSelection_Init();
    gt_OptInDetect_Init();
    gt_OptInDetect2_Init();
    gt_ShowPerkFrame_Init();
    gt_Showhideannouncements_Init();
    gt_PerkSelected_Init();
    gt_SelectPerkButtonClicked_Init();
    gt_LoadPerksfromLastGame_Init();
    gt_QuickTipsforItems_Init();
    gt_QuickTipsforEffect_Init();
    gt_QuickTipsforBehavior_Init();
    gt_EvacShipEnter_Init();
    gt_DivertLeft_Init();
    gt_DivertRight_Init();
    gt_DivertAccelerate_Init();
    gt_QuitAppear_Init();
    gt_WarningDialog_Init();
    gt_WarningControls_Init();
    gt_WarningEditDialog_Init();
    gt_WarningEditControls_Init();
    gt_AnnounceDialog_Init();
    gt_AnnounceControls_Init();
    gt_VotekickPress_Init();
    gt_SkipPressed_Init();
    gt_RefreshPlayerCard_Init();
    gt_SaveProfileQuote_Init();
    gt_ClickTab_Init();
    gt_TabMove_Init();
    gt_OpenBox_Init();
    gt_PickUpItemKey_Init();
    gt_KeyboardPressed_Init();
    gt_KeyboardUnpressed_Init();
    gt_SetKeysPressed_Init();
    gt_SetKeys_Init();
    gt_SelectLightingVisuals_Init();
    gt_ColorTagsAlwaysShowOverride_Init();
    gt_ToggleSilentHillScheme_Init();
    gt_ToggleCameraFollowsFacing_Init();
    gt_ToggleKeyboardMovement_Init();
    gt_PlayerCardStore_Init();
    gt_PlayerCardPurchase_Init();
    gt_PlayerCardBrowseStore_Init();
    gt_PlayerCardRecordStats_Init();
    gt_PlayerCardSelection_Init();
    gt_GlobalVisibility_Init();
    gt_SingleVisibility_Init();
    gt_SelectiveVisibility_Init();
    gt_MarinesVisibility_Init();
    gt_PlayersVisibility_Init();
    gt_SpectateClick_Init();
    gt_SpectateLeft_Init();
    gt_SpectateRight_Init();
    gt_SpectateSelect_Init();
    gt_CameraRotateSystem_Init();
    gt_UnitUISelectUpdate_Init();
    gt_UnitUIPeriodicUpdate_Init();
    gt_UnitHealthUIInstanteneousUpdate_Init();
    gt_UnitEnergyUIInstanteneousUpdate_Init();
    gt_UnitOxygenUIInstanteneousUpdate_Init();
    gt_ControlRegenThing_Init();
    gt_ControlRegenDegenMarine_Init();
    gt_RankingSelection_Init();
    gt_MouseInUnitTag_Init();
    gt_MouseOutUnitTag_Init();
    gt_GlobalChat_Init();
    gt_TextSpeak_Init();
    gt_SpeakIndicator_Init();
    gt_DeadSpeak_Init();
    gt_DeadLoungeToggleAutofadeFollow_Init();
    gt_DeadDialogEnter_Init();
    gt_DeadDialogExit_Init();
    gt_DeadAliveDialogEnter_Init();
    gt_DeadAliveDialogExit_Init();
    gt_DeadDialogSelection_Init();
    gt_RatingInstance_Init();
    gt_Scorescreen_Init();
    gt_ScorescreenQuit_Init();
    gt_KilledbyGrenade_Init();
    gt_KilledbyFlamethrower_Init();
    gt_KilledbyGun_Init();
    gt_KilledbytheCold_Init();
    gt_KilledbytheAcid_Init();
    gt_KilledbyThing_Init();
    gt_KilledbyLeaving_Init();
    gt_KilledbySuffocation_Init();
    gt_KilledbyMolotov_Init();
    gt_CreateTTT_Init();
    gt_check_Init();
    gt_timer_Init();
    gt_playerjoins_Init();
    gt_slider_Init();
    gt_reset_Init();
    gt_RecordOn_Init();
    gt_RecordOff_Init();
    gt_LoadBanList_Init();
    gt_BanListTrigger_Init();
    gt_ButtonControls_Init();
    gt_SelectedList_Init();
    gt_SpectatorViewEvacDialog_Init();
    gt_SpectatorViewEvacControls_Init();
    gt_Cold_Init();
    gt_BrokenVitals_Init();
    gt_BeaconRelayBoost_Init();
    gt_FuelStationProvision_Init();
    gt_DeadDoors_Init();
    gt_ShowHideToggleforAcidPool_Init();
    gt_ToggleAcidPool_Init();
    gt_AntiCliffClimb_Init();
    gt_Attacked_Init();
    gt_InitiatedTKAttack_Init();
    gt_ProxInEnter_Init();
    gt_ProxInExit_Init();
    gt_TheThingKILLS_Init();
    gt_AntiCliffHide_Init();
    gt_Incapacitated_Init();
    gt_Detection_Init();
    gt_CorpseKill_Init();
    gt_PickThingModel_Init();
    gt_BTNTheThing_Init();
    gt_BTNMarine_Init();
    gt_Burn_Init();
    gt_Roar_Init();
    gt_ConsumeAnimation_Init();
    gt_GiveItem_Init();
    gt_AntiCliffHiding_Init();
    gt_QuickDrop_Init();
    gt_ItemAboveDoor_Init();
    gt_AcquireMolotov_Init();
    gt_DropMolotov_Init();
    gt_ThrowMolotov_Init();
    gt_AcquireGrenadev2_Init();
    gt_CookandExplodeGrenadev2_Init();
    gt_ThrowGrenadev2_Init();
    gt_AcquireFlamethrower_Init();
    gt_AttackFlamethrower_Init();
    gt_DropFlamethrower_Init();
    gt_ActivateFlamethrower_Init();
    gt_DeactivateFlamethrower_Init();
    gt_DrainFlamethrower_Init();
    gt_DropRadiov2_Init();
    gt_TalkRadiov2_Init();
    gt_OneRadioRule_Init();
    gt_AcquireRiotShield_Init();
    gt_DropRiotShield_Init();
    gt_HitwithRiotShield_Init();
    gt_Addmedkitcharge_Init();
    gt_MedkitEffect_Init();
    gt_MedkitThingUse_Init();
    gt_AcquireInfraredGoggles_Init();
    gt_HelpMenuHandleIDs_Init();
    gt_MarineDIES_Init();
    gt_TheThingDIES_Init();
    gt_PlayerLeaves_Init();
    gt_ResetName_Init();
    gt_SetName_Init();
    gt_Doorsmasher_Init();
    gt_MuteRoundsDialog_Init();
    gt_MuteRoundsControls_Init();
    gt_MutedPlayers_Init();
    gt_BanRoundsDialog_Init();
    gt_BanRoundsControls_Init();
    gt_BannedPlayers_Init();
    gt_RatingBanDialog_Init();
    gt_RatingBanControls_Init();
    gt_RatingBannedPlayers_Init();
    gt_BanList_Init();
    gt_AdminControlShow_Init();
    gt_AdminPanelControls_Init();
    gt_AdminControlMouseEnter_Init();
    gt_AdminControlMouseExit_Init();
    gt_AdminControlHighlight_Init();
    gt_AdminControlUnhighlight_Init();
    gt_AdminControlHide_Init();
    gt_AdminPanelButton_Init();
    gt_AdminButton_Init();
    gt_AdminPanelMainButton_Init();
    gt_ModelButtons_Init();
    gt_Modellistselection_Init();
    gt_ShowHideDebugDialog_Init();
    gt_SelectDebugDialog_Init();
    gt_ResizeDebugDialog_Init();
    gt_MoveDebugDialog_Init();
    gt_MoveDebugDialogDrop_Init();
    gt_GrantRandomThingAbilities_Init();
    gt_GrantAllThingAbils_Init();
    gt_SpawnCorpse_Init();
    gt_SpawnBattlecruiser_Init();
    gt_SpawnFlamethrower_Init();
    gt_SpawnTheThing_Init();
    gt_SpawnRiotShield_Init();
    gt_SpawnDummyTargets_Init();
    gt_ShowChat_Init();
    gt_SpawnGrenade_Init();
    gt_TEST8_Init();
    gt_Damage_Init();
    gt_Noteamkillingremoved_Init();
    gt_SimulateFlamethrower_Init();
    gt_spooky_Init();
    gt_spookyactivator_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
